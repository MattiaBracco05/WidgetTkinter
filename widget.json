[	
	{
	"keyword": ["filedialog",
		    "file",
		    "finestra di dialogo file",
		    "finestra di dialogo"
	],
	"nome": "Alba Luca",
	"parte": [
			{
				"titolo": "Filedialog",
				"corpo": " Il filedialog è un widgets della tkinter, per poterlo utilizzare dovremmo importalo, in questo modo <strong>from tkinter import filedialog</strong>, una volta importato potremmo andare ad utilizzare lui e i suoi metodi. Le keyword principali del filediaog sono: <strong>title, initialdir, filetypes, defaultextension, initialfile e multiple.</strong> Invece i suoi metodi principali sono: <strong>askopenfile, asksaveasfile, askopenfilename, asksaveasfilename, askdirectory.</strong>",
				"code": ["import tkinter as tk\nfrom tkinter import filedialog\nimport tkinter.messagebox as mbox\nfrom functools import partial\nfrom PIL import Image, ImageTk\nimport os\n\n#pulisco il terminale\nos.system('clear')\n\n#creo la classe principale della mia finestra e creo la finestra principale\nclass Edipy(tk.Tk):\n\tdef __init__(self):\n\t\t#richiamo il costruttore delal tk.Tk\n\t\tsuper().__init__()\n\t\tself.grandezza_finestra = '400x400'\n\t\t\n\t\t#variabili menu\n\t\tself.sfondo = '#1c2226'\n\t\tself.sfondo_scritta = 'white'\n\t\tself.user_name = 'Utente'\n\t\tself.message_benvenuto = f'Benvenuto su Edipy {self.user_name}'\n\t\tself.image_user = None\n\t\tself.h_img = 8\n\t\tself.w_img = 15\n\t\t\n\t\t#variabili impostazioni\n\t\tself.path_predefinita = '/home'\n\t\tself.width_tab = 30\n\t\t\n\t\t#variabili popup metodi prefatti\n\t\tself.variable_radio = tk.StringVar()\n\t\tself.save_code = ''\n\t\t\n\t\tself.geometry(self.grandezza_finestra)\n\t\tself.title('Alba - Edipy')\n\t\tself.resizable(0, 0)\n\t\tself.config(bg = self.sfondo)\n\t\tself.crea_widgets()\n\t\n\tdef crea_widgets(self):\n\t\tself.crea_menu()\n\t\n\tdef crea_menu(self, can_remove = False, fin = None):\t\n\t\t#mi salvo il codice che l'utente ha digitato all'interno della Text() in tal caso\n\t\t#non esista ancora il widgets gestisco i vari errori\n\t\ttry:\n\t\t\tself.save_code = str(self.blocco_lavoro.get('1.0', 'end'))\n\t\texcept AttributeError:\n\t\t\tself.save_code = ''\n\t\texcept tk.TclError:\n\t\t\tpass\n\t\t\n\t\t#rimuovo la finestra precedente in tal modo da far visualizzare solo il menu quando necessario\n\t\tif can_remove == True:\n\t\t\tfin.destroy()\n\t\t\n\t\t#per sicurezza rimposto la grandezza della finestra principale in tal caso siamo andati nell'edipy\n\t\t#che al suo interno viene ingrandita la finestra \n\t\tself.geometry(self.grandezza_finestra)\n\t\t\n\t\t#creo il frame e grazie alla place() riesco a centrare il frame\n\t\twm = tk.Frame(self, bg = self.sfondo)\n\t\twm.place(relx = 0.5, rely = 0.45, anchor = tk.CENTER)\n\t\t\n\t\t#creazione dei widgets\n\t\ttitle_win = tk.Label(wm, text = 'MENU', font = ('Arial', 16, 'bold'), bg = self.sfondo, fg = self.sfondo_scritta)\n\t\ttitle_win.grid(row = 0, column = 0)\n\t\t\n\t\tself.button_user_image = tk.Button(wm, image = self.image_user, height = self.h_img, width = self.w_img, text = 'carica immagine...', command = self.aggiungi_foto)\n\t\tself.button_user_image.grid(row = 1, column = 0, pady = (10, 0))\n\t\t\n\t\tself.label_benvenuto = tk.Label(wm, bg = self.sfondo, text = self.message_benvenuto, fg = self.sfondo_scritta)\n\t\tself.label_benvenuto.grid(row = 2, column = 0, pady = (10, 0))\n\t\t\n\t\tbutton_settings = tk.Button(wm, text = 'IMPOSTAZIONI', command = partial(self.crea_impostazioni, wm))\n\t\tbutton_settings.grid(row = 3, column = 0, pady = (10, 0))\n\t\t\n\t\tbutton_create = tk.Button(wm, text = 'EDIPY', width = 14, command = partial(self.crea_progetto, wm))\n\t\tbutton_create.grid(row = 4, column = 0, pady = (10, 0))\n\t\t\n\t\tbutton_exit = tk.Button(wm, text = 'ESCI', width = 14, command = self.destroy)\n\t\tbutton_exit.grid(row = 5, column = 0, pady = (10, 0))\n\t\t\n\t\t#riconfiguoro il nome dell'utente ogni volta che entra nel menu in tal caso\n\t\t#l'utente abbia cambiato il suo user name dalle impostazioni\n\t\tself.label_benvenuto.config(text = f'Benvenuto su Edipy {self.user_name}')\n\n\tdef aggiungi_foto(self):\n\t\t'''\n\t\tCon il file dialog.askopenfilename() l'utente può selezionare l'immagine che \n\t\tvuole, in più evito che l'utente possa iserire qualsiasi tipo di file limitando l'apertura\n\t\tdei file solo per il tipo di estensioni che io vado ad elencare all'interno della tupla grazie \n\t\tall'opzione filetypes, e io riceverò la posizione dell'immagine, in cui uccessivamente grazie il\n\t\tmetodo tk.PhotoImage() potrò andar a visualizzare l'immagine all'interno del mio programma\n\t\t'''\n\t\t\n\t\ttry:\n\t\t\tpath_img = filedialog.askopenfilename(initialdir = self.path_predefinita, filetypes=[('Image Files', ('*.png'))])\n\t\t\t#self.image_user = tk.PhotoImage(file = path_img) --> così non puoi gestire la dimensione delle immagini\n\t\t\t#imposto grandezza button per la selezione delle immagini\n\t\t\tself.w_img = 125\n\t\t\tself.h_img = 125\n\t\t\t\n\t\t\t#uso il modulo PIL perchè ha la funzione adatta per ridimensionare l'immagine\n\t\t\t#e alla fine lo faccio diventare un oggetto di tipo PhotoImage così viene\n\t\t\t#riconosciuto dalla tkinter\n\t\t\top_img = Image.open(path_img)\n\t\t\tresized_img = op_img.resize((self.w_img, self.h_img))\n\t\t\tself.image_user = ImageTk.PhotoImage(resized_img)\n\t\t\t\n\t\t\tself.button_user_image.config(image = self.image_user, activebackground = self.sfondo, bg = self.sfondo, width = 125, height = 125)\n\t\t\n\t\texcept AttributeError:\n\t\t\t#imposto grandezza button per la selezione delle immagini e mostro errore se\n\t\t\t#l'utente ha solo schiacciato aggiugi immagine ma ha schiacciato la x\n\t\t\tself.w_img = 15\n\t\t\tself.h_img = 8\n\t\t\tmbox.showwarning('Attenzione!', 'Nessuna immagine è stata caricata!')\n\t\t\n\tdef crea_impostazioni(self, fin):\n\t\t#mi salvo il codice che l'utente ha digitato all'interno della Text() in tal caso\n\t\t#non esista ancora il widgets gestisco i vari errori\n\t\ttry:\n\t\t\tself.save_code = str(self.blocco_lavoro.get('1.0', 'end'))\n\t\texcept AttributeError:\n\t\t\tself.save_code = ''\n\t\texcept tk.TclError:\n\t\t\tpass\n\t\n\t\t#distruggo qualsiasi finestra precedente\n\t\tfin.destroy()\n\t\t\n\t\t#per sicurezza rimposto la grandezza della finestra principale in tal caso siamo andati nell'edipy\n\t\t#che al suo interno viene ingrandita la finestra \n\t\tself.geometry(self.grandezza_finestra)\n\t\t\n\t\t#creo il frame e grazie alla place() riesco a centrare il frame\n\t\twi = tk.Frame(self, bg = self.sfondo)\n\t\twi.place(relx = 0.5, rely = 0.45, anchor = tk.CENTER)\n\t\t\n\t\t#creo i widgets necessari per la mia finestra\n\t\ttitle_win = tk.Label(wi, text = 'IMPOSTAZIONI', font = ('Arial', 16, 'bold'), bg = self.sfondo, fg = self.sfondo_scritta)\n\t\ttitle_win.grid(row = 0, column = 0, columnspan = 2)\n\t\t\n\t\tlbl_username = tk.Label(wi, text = 'Nome utente: ', bg = self.sfondo, fg = self.sfondo_scritta)\n\t\tlbl_username.grid(row = 1, column = 0, pady = 15)\n\t\t\n\t\tself.input_name = tk.Entry(wi)\n\t\tself.input_name.grid(row = 1, column = 1, pady = 15, ipady = 8, ipadx = 5)\n\t\t\n\t\tlbl_width_tab = tk.Label(wi, text = 'Larghezza tabulazioni: ', bg = self.sfondo, fg = self.sfondo_scritta)\n\t\tlbl_width_tab.grid(row = 2, column = 0, pady = 15)\n\t\t\n\t\tself.input_width_tab = tk.Entry(wi)\n\t\tself.input_width_tab.grid(row = 2, column = 1, pady = 15, ipady = 8, ipadx = 5)\n\t\t\n\t\tlbl_save_path = tk.Label(wi, text = 'Percorso predefinito: ', bg = self.sfondo, fg = self.sfondo_scritta)\n\t\tlbl_save_path.grid(row = 3, column = 0, pady = 15)\n\t\t\n\t\tself.input_save_path = tk.Entry(wi)\n\t\tself.input_save_path.grid(row = 3, column = 1, pady = 15, ipady = 8, ipadx = 5)\n\t\t\n\t\tbtn_home = tk.Button(wi, text = 'SALVA', width = 20, command = self.salva_impostazioni)\n\t\tbtn_home.grid(row = 4, column = 0, padx = (0, 10))\n\t\t\n\t\tbtn_home = tk.Button(wi, text = 'MENU', width = 20, command = partial(self.crea_menu, True, wi))\n\t\tbtn_home.grid(row = 4, column = 1)\n\t\t\n\t\tbtn_edipy = tk.Button(wi, text = 'EDIPY', command = partial(self.crea_progetto, wi))\n\t\tbtn_edipy.grid(row = 5, columnspan = 2, pady = (10, 0), sticky = 'WE')\n\t\t\n\t\t#in tal caso l'utente abbia già effettuato delle modifiche \n\t\t#le inserisco all'intero delle entry\n\t\tself.input_name.insert(0, self.user_name)\n\t\tself.input_width_tab.insert(0, self.width_tab)\n\t\tself.input_save_path.insert(0, self.path_predefinita)\n\t\n\tdef salva_impostazioni(self):\n\t\t#flag controllo errori, valori entry\n\t\tno_error = True\n\t\tself.user_name = str(self.input_name.get())\n\t\tself.path_predefinita = str(self.input_save_path.get())\n\t\t\n\t\ttry:\n\t\t\tself.width_tab = int(self.input_width_tab.get())\n\t\t\tno_error = True\n\t\texcept ValueError:\n\t\t\tmbox.showerror('Errore - tabulazione', 'Errore nell'inserimento del numero di tabulazione')\n\t\t\tno_error = False\n\t\t\t\n\t\tif self.user_name.isspace() or self.user_name.isnumeric() or self.user_name == ''  or self.path_predefinita.isspace() or self.path_predefinita.isnumeric() or self.path_predefinita == '':\n\t\t\tmbox.showerror('Errore - campi impostazioni', 'Errore nell'inserimento dei campi')\n\t\t\tno_error = False\n\t\t\n\t\tif no_error == True:\n\t\t\tmbox.showinfo('impostazioni - salvate', f'Le tue impostazioni sono state salvate con successo\n\nNome utente: {self.user_name}\nPercorso predefinito: {self.path_predefinita}\nLarghezza tabulazioni: {self.width_tab}')\n\t\t\n\tdef crea_progetto(self, fin):\n\t\t#distruggo la finestra precedente\n\t\tfin.destroy()\n\t\t\n\t\t#imposto la grandezza della finestra principale più grande, soltato per avere una visione\n\t\t#maggiore all'intero della mia finestra\n\t\tself.geometry('1000x750')\n\t\t\n\t\t#creo i frame e grazie alla place() riesco a centrare il frame padre\n\t\twp = tk.Frame(self, bg = self.sfondo)\n\t\twp.place(relx = 0.5, rely = 0.5, anchor = tk.CENTER)\n\n\t\twb = tk.Frame(wp, bg = self.sfondo)\n\t\twb.grid(row = 0, column = 0, padx = (0, 30))\n\n\t\twbl = tk.Frame(wp, bg = self.sfondo)\n\t\twbl.grid(row = 0, column = 1)\n\n\t\t#creo i widgets necessari per la finestra\n\t\tbutton_settings = tk.Button(wb, text = 'IMPOSTAZIONI', command = partial(self.crea_impostazioni, wp))\n\t\tbutton_settings.grid(row = 0, column = 0, pady = (20, 0), sticky = 'NSWE')\t\n\n\t\tbtn_home = tk.Button(wb, text = 'MENU', command = partial(self.crea_menu, True, wp))\n\t\tbtn_home.grid(row = 1, column = 0, sticky = 'NSWE', pady = (20, 0))\n\n\t\tbtn_cls_set_get = tk.Button(wb, text = 'Classe, set + get', command = partial(self.crea_classe_set_get, wp, True ))\n\t\tbtn_cls_set_get.grid(row = 2, column = 0, pady = (20, 0), sticky = 'NSWE')\t\n\t\t\n\t\tbtn_cls_set_get = tk.Button(wb, text = 'set + get', command = partial(self.crea_classe_set_get, wp, False ))\n\t\tbtn_cls_set_get.grid(row = 3, column = 0, pady = (20, 0), sticky = 'NSWE')\n\t\t\n\t\tbtn_pulisci = tk.Button(wb, text = 'PULISCI', command = self.pulisci_blocco)\n\t\tbtn_pulisci.grid(row = 4, column = 0, sticky = 'WE', pady = (20, 0))\n\t\t\n\t\tbtn_save = tk.Button(wb, text = 'SALVA', command = self.salva_progetto)\n\t\tbtn_save.grid(row = 6, column = 0, columnspan = 2, sticky = 'WE', pady = (20, 0))\n\t\t\n\t\tbtn_save = tk.Button(wb, text = 'CARICA', command = self.carica_progetto)\n\t\tbtn_save.grid(row = 5, column = 0, sticky = 'WE', pady = (20, 0))\n\t\t\n\t\tself.blocco_lavoro = tk.Text(wbl, width = 102, height = 45, tabs = (self.width_tab), bg = '#283136', fg = 'white', borderwidth = 0, insertbackground = 'white')\n\t\tself.blocco_lavoro.grid(row = 0, column = 1)\n\t\t\n\t\tself.blocco_lavoro.insert('1.0', self.save_code)\n\t\n\tdef crea_classe_set_get(self, fin, class_flag = False):\n\t\t#creo un popup per far inserire all'utente il metodo che vuole e graze alla tk.Toplevel()\n\t\t#vado a creare una finestra sueriore alla finestra principale\n\t\tpopup = tk.Toplevel(bg = self.sfondo)\n\t\tpopup.geometry('350x300')\n\t\tpopup.title('crea metodi')\n\t\t\n\t\t#creo il frame e grazie alla place() riesco a centrare il frames\n\t\tfp = tk.Frame(popup, bg = self.sfondo)\n\t\tfp.place(relx = 0.5, rely = 0.45, anchor = tk.CENTER)\n\t\t\n\t\t#piccolo controllo per vedere se l'utente ha schiacciato il bottone classe, set e get\n\t\t#oppure solo setter e getter + creazione widgets\n\t\tif class_flag == True:\n\t\t\tlabel_nm_cls = tk.Label(fp, text = 'Inserisci nome classe: ', bg = self.sfondo, fg = self.sfondo_scritta)\n\t\t\tlabel_nm_cls.grid(row = 0, column = 0, pady = (10, 0))\n\t\t\t\n\t\t\tself.input_nm_cls = tk.Entry(fp)\n\t\t\tself.input_nm_cls.grid(row = 0, column = 1, ipady = 8, ipadx = 10, pady = (10, 0))\n\t\t\n\t\tself.radio_private = tk.Radiobutton(fp, text = 'Privato: ', variable = self.variable_radio, value = 'Privato', bg = self.sfondo, activebackground = self.sfondo, fg = self.sfondo_scritta, activeforeground = self.sfondo_scritta, selectcolor=self.sfondo)\n\t\tself.radio_private.grid(row = 1, column = 0, pady = (10, 0))\n\t\t\n\t\tself.radio_public = tk.Radiobutton(fp, text = 'Pubblico: ', variable = self.variable_radio, value = 'Pubblico', bg = self.sfondo, activebackground = self.sfondo, fg = self.sfondo_scritta, activeforeground = self.sfondo_scritta, selectcolor=self.sfondo)\n\t\tself.radio_public.grid(row = 1, column = 1, pady = (10, 0))\n\t\t\n\t\tlabel_primo_attributo = tk.Label(fp, text = 'Nome primo attributo: ', bg = self.sfondo, fg = self.sfondo_scritta)\n\t\tlabel_primo_attributo.grid(row = 2, column = 0, pady = (10, 0))\n\t\t\n\t\tself.input_primo_attributo = tk.Entry(fp)\n\t\tself.input_primo_attributo.grid(row = 2, column = 1, ipady = 8, ipadx = 10, pady = (10, 0))\n\t\t\n\t\tlabel_secondo_attributo = tk.Label(fp, text = 'Nome secondo attributo: ', bg = self.sfondo, fg = self.sfondo_scritta)\n\t\tlabel_secondo_attributo.grid(row = 3, column = 0, pady = (10, 0))\n\t\t\n\t\tself.input_secondo_attributo = tk.Entry(fp)\n\t\tself.input_secondo_attributo.grid(row = 3, column = 1, ipady = 8, ipadx = 10, pady = (10, 0))\n\t\t\n\t\tbtn_aggiungi = tk.Button(fp, text = 'AGGIUNGI', command = partial(self.popup_aggiungi, class_flag))\n\t\tbtn_aggiungi.grid(row = 4, columnspan = 2, sticky = 'NSWE', pady = (10, 0))\n\t\t\n\t\t#valoredi default per i radio button\n\t\tself.variable_radio.set('Privato')\n\t\n\tdef popup_aggiungi(self, fc):\n\t\t#flag per il controllo errore delle entry per l'utente\n\t\tno_error = True\n\t\tatr1 = str(self.input_primo_attributo.get())\n\t\tatr2 = str(self.input_secondo_attributo.get())\n\t\tvalore_radio = str(self.variable_radio.get())\n\t\t\n\t\t#controllo se ha schiacciato il bottone con classe, set e get... \n\t\t#evitando di fare controlli inutili\n\t\tif fc == True:\n\t\t\tnm_cls = str(self.input_nm_cls.get())\n\t\t\t\n\t\t\tif nm_cls.isspace() or nm_cls.isnumeric() or nm_cls == '': \n\t\t\t\tmbox.showerror('Errore - nome classe', 'Il nome della classe ha una sintassi errata')\n\t\t\t\tno_error = False\n\t\t\n\t\tif atr1.isspace() or atr1.isnumeric() or atr1 == '' or atr2.isspace() or atr2.isnumeric() or atr2 == '':\n\t\t\tmbox.showerror('Errore - nome attributi', 'I nomi degli attrubuti hanno una sintassi errata')\n\t\t\tno_error = False\n\t\t\n\t\t#se non è presente alcun errore controllo se ha selezionato un radio\n\t\t#per la classe privata oppure pubblica\n\t\tif no_error == True:\n\t\t\tif valore_radio == 'Privato':\n\t\t\t\tnome_var1 = f'self.__V{atr1}'\n\t\t\t\tnome_var2 = f'self.__V{atr2}'\n\t\t\telse:\n\t\t\t\tnome_var1 = f'self.V{atr1}'\n\t\t\t\tnome_var2 = f'self.V{atr2}'\n\t\t\t\n\t\t\t#solito controllo per vedere se il codice che devo andare ad inserire dentro la\n\t\t\t#text ha schiacciato il bottone con classe + set e get o solo setter e getter\n\t\t\tif fc == True:\n\t\t\t\tcodice = f'''class {nm_cls}():\n\tdef __init__(self, {atr1}_ex, {atr2}_ex):\n\t\tself.set_{atr1}({atr1}_ex)\n\t\tself.set_{atr2}({atr2}_ex)\n\t\t\n\tdef set_{atr1}(self, {atr1}):\n\t\t{nome_var1} = {atr1}\n\t\n\tdef get_{atr1}(self):\n\t\treturn {nome_var1}\n\t\n\tdef set_{atr2}(self, {atr2}):\n\t\t{nome_var2} = {atr2}\n\t\n\tdef get_{atr2}(self):\n\t\treturn {nome_var2}\n\t\t\t\t\t\t'''\n\t\t\telse:\n\t\t\t\tcodice = f'''\tdef set_{atr1}(self, {atr1}):\n\t\t{nome_var1} = {atr1}\n\n\tdef get_{atr1}(self):\n\t\treturn {nome_var1}\n\n\tdef set_{atr2}(self, {atr2}):\n\t\t{nome_var2} = {atr2}\n\n\tdef get_{atr2}(self):\n\t\treturn {nome_var2}\n\t\t\t\t\t\t'''\n\t\t\t#ricavo l'indice in cui lampeggia il cursore del mouse e lo inserisco\n\t\t\t#all'intero della text in quella posizione\n\t\t\tindice = self.blocco_lavoro.index(tk.INSERT).split('.')[0]\n\t\t\tself.blocco_lavoro.insert(f'{indice}.0', codice)\n\t\n\tdef pulisci_blocco(self):\n\t\t#pulisco la text\n\t\tself.blocco_lavoro.delete('1.0', 'end')\n\t\n\tdef salva_progetto(self):\n\t\t'''\n\t\tgrazie al filedialog.asksaveasfilename() chiedo all'utente in che directory vuole salvare il progetto\n\t\te grazie al metodo initialdir gli inserisci la path principale in cui l'utente vuole andare a salvare\n\t\ti suoi futuri progetti, di default ha /home ed e modificabile nelle impostazioni. Proseguendo\n\t\tgrazie alla filetypes vado a definire all'interno di una tupla che tipo di file vuole salavare, in questo \n\t\tcaso .py\n\t\t'''\n\t\tcode = self.blocco_lavoro.get('1.0', 'end')\n\t\tpath_file = filedialog.asksaveasfilename(initialdir = self.path_predefinita, filetypes = [('python file', ('*.py'))])\n\t\t\n\t\t#qui semplicemente controllo se la path_file restituise True. Faccio una try per aprire il file\n\t\t#in modlità scrittura, inserisco il codice e chiudo il file, in caso contrario visualizzo\n\t\t#un errore\n\t\tif path_file:\n\t\t\ttry:\n\t\t\t\tfile_py = open(path_file,'w')\n\t\t\t\tfile_py.write(code)\n\t\t\t\tfile_py.close()\n\t\t\texcept IOError:\n\t\t\t\tmbox.showwarning('Errore', 'È stato rilevato un errore nel salvare il file')\n\t\n\tdef carica_progetto(self):\n\t\t'''\n\t\tgrazie al filedialog.askopenfilename() chiedo all'utente in che directory vuole aprire il progetto\n\t\te grazie al metodo initialdir gli inserisci la path principale in cui l'utente vuole andare a visualizzare\n\t\ti suoi futuri progetti, di default ha /home ed e modificabile nelle impostazioni. Proseguendo\n\t\tgrazie alla filetypes vado a definire all'interno di una tupla che tipo di file vuole salavare, in questo \n\t\tcaso .py\n\t\t'''\n\t\tpath_file = filedialog.askopenfilename(initialdir = self.path_predefinita, filetypes=[('Python File', ('*.py'))])\n\t\t\n\t\t#qui semplicemente controllo se la path_file restituise True. Faccio una try per aprire il file\n\t\t#in modlità letturo, prendo il codice e chiudo il file, in caso contrario visualizzo\n\t\t#un errore, impossibile aprire file.\n\t\tif path_file:\n\t\t\ttry:\n\t\t\t\tfile_py = open(path_file,'r')\n\t\t\t\tres = file_py.read()\n\t\t\t\tfile_py.close()\n\t\t\t\t\n\t\t\t\tself.blocco_lavoro.delete('1.0', 'end')\n\t\t\t\tself.blocco_lavoro.insert(f'1.0', res)\n\t\t\t\t\n\t\t\texcept IOError:\n\t\t\t\tmbox.showwarning('Errore', 'È stato rilevato un errore nel caricare il file')\n\t\t\t\n#funzione principale per richiamare la mia classe\t\ndef main():\n\tep = Edipy()\n\tep.mainloop()\n\nmain()\n\t\n"],
				"prestetazione": "https://lucx-albx.github.io/Filedialog_guida/index.html",
				"pdf": ""
			}
		]
	},
	
	{
	"keyword": ["listbox",
		    "lista",
		    "list",
		    "scroll",
		    "scorrimento",
		    "tendina",
		    "menu",
		    "menù",
		    "opzioni",
		    "selezione",
		    "scelta"
	],
	"nome": "Bracco Mattia",
	"parte": [
			{
				"titolo": "Listbox",
				"corpo": "Attraverso una <strong>listbox</strong> l’utente può visualizzare una tendina contenente diverse opzioni fra le quali può effettuare delle selezioni.",
				"code": ["#4C Bracco Mattia - TKINTER Widget listbox\n\nimport tkinter\nfrom tkinter import ttk\nfrom tkinter import messagebox as mbox\n\nmioFont = ('Arial, 16')\n\nclass Finestra(tkinter.Tk):\n\t#Costruttore\n\tdef __init__(self, nome):\n\t\tsuper().__init__()\n\t\tself.title(nome)\n\t\tself.geometry('660x1000')\n\t\tself.resizable(0, 0)\n\t\tself.crea_widgets()\n\t#CREA WIDGETS\n\tdef crea_widgets(self):\n\t\tmf = tkinter.Frame(self) #Creo l'oggetto Main Frame (contenitore principale), ci deve sempre essere e contine i widget\n\t\tmf.grid() #Definisco il layout del Main Frame (in questo caso 'grid')\n\n\t\t#LABEL SELECTMODE\n\t\tlblSelectmode = tkinter.Label(mf, text='OPZIONI PER SELECTMODE')\n\t\tlblSelectmode.grid(row=0, column=0, columnspan=4, sticky=tkinter.EW)\n\n\t\t#LISTBOX ACCESSORI (selectmode = browse)\n\t\t#Label\n\t\tlblBrowse = tkinter.Label(mf, text='BROWSE', bg='blue')\n\t\tlblBrowse.grid(row=1, column=0, sticky=tkinter.EW)\n\t\t#Listbox\n\t\taccessori = ('Pasta', 'Bistecca', 'Carne', 'Pesce', 'Patatine', 'Verdura', 'Contorno', 'Dolce')\n\t\tvarAccessori = tkinter.Variable(value = accessori)\n\t\tlistAccessori = tkinter.Listbox(mf, listvariable=varAccessori, height=5, selectmode=tkinter.BROWSE)\n\t\tlistAccessori.grid(row=2, column=0)\n\n\t\t#LISTBOX CIBI (selectmode = extend)\n\t\t#Label\n\t\tlblBrowse = tkinter.Label(mf, text='EXTENDED', bg='yellow')\n\t\tlblBrowse.grid(row=1, column=1, sticky=tkinter.EW)\n\t\t#Listbox\n\t\tcibi = ('Pasta', 'Bistecca', 'Carne', 'Pesce', 'Patatine', 'Verdura', 'Contorno', 'Dolce')\n\t\tvarCibi = tkinter.Variable(value = cibi)\n\t\tlistCibi = tkinter.Listbox(mf, listvariable=varCibi, height=5, selectmode=tkinter.EXTENDED)\n\t\tlistCibi.grid(row=2, column=1)\n\n\t\t#LISTBOX AUTO (selectmode = single)\n\t\t#Label\n\t\tlblBrowse = tkinter.Label(mf, text='SINGLE', bg='green')\n\t\tlblBrowse.grid(row=1, column=2, sticky=tkinter.EW)\n\t\t#Listbox\n\t\tauto = ('Alfa Romeo', 'Fiat', 'Ford', 'Ferrari', 'Lamborgini', 'Maserati', 'Audi', 'Mercedes', 'BMW', 'Lancia', 'Volvo', 'Seat', 'Kia')\n\t\tvarAuto = tkinter.Variable(value = auto)\n\t\tlistAuto = tkinter.Listbox(mf, listvariable=varAuto, height=5, selectmode=tkinter.SINGLE)\n\t\tlistAuto.grid(row=2, column=2)\n\n\t\t#LISTBOX COLORI (selectmode = multiple)\n\t\t#Label\n\t\tlblBrowse = tkinter.Label(mf, text='MULTIPLE', bg='gray')\n\t\tlblBrowse.grid(row=1, column=3, sticky=tkinter.EW)\n\t\t#Listbox\n\t\tcolori = ('Giallo', 'Azzurro', 'Blu', 'Verde', 'Marrone', 'Nero', 'Giallo', 'Mercedes', 'BMW', 'Lancia', 'Volvo', 'Seat', 'Kia')\n\t\tvarColori = tkinter.Variable(value = colori)\n\t\tlistColori = tkinter.Listbox(mf, listvariable=varColori, height=5, selectmode=tkinter.MULTIPLE)\n\t\tlistColori.grid(row=2, column=3)\n\n\t\t#LABEL SCROLLBAR\n\t\tlblScrollbar = tkinter.Label(mf, text='SCROLLBAR')\n\t\tlblScrollbar.grid(row=3, column=0, columnspan=4, sticky=tkinter.EW)\n\n\t\t#Listbox\n\t\tlinguaggi = ('C#', 'C', 'C++', 'Python', 'Go', 'PHP', 'Swift', 'HTML', 'CSS', 'JSON', 'XML', 'JavaScript', 'Java')\n\t\tvarLinguaggi = tkinter.Variable(value = linguaggi)\n\t\tlistLinguaggi = tkinter.Listbox(mf, listvariable=varLinguaggi, height=8, selectmode=tkinter.BROWSE)\n\t\tlistLinguaggi.grid(row=4, column=0)\n\t\t#Scrollbar\n\t\tscrollbar = ttk.Scrollbar(mf, orient=tkinter.VERTICAL, command=listLinguaggi.yview)\n\t\tlistLinguaggi['yscrollcommand'] = scrollbar.set\n\t\tscrollbar.grid(row=4, column=1, sticky=tkinter.NS)\n\n\t\t#LABEL OPERAZIONI\n\t\tlblOperazioni = tkinter.Label(mf, text='OPERAZIONI SULLE LISTE (Vedere codice)')\n\t\tlblOperazioni.grid(row=5, column=0, columnspan=4, sticky=tkinter.EW)\n\n\t\t#Listbox di partenza\n\t\tnomi = ('Alessio', 'Francesco', 'Pietro', 'Paolo', 'Giuseppe', 'Gabriele', 'Edoardo', 'Leonardo', 'Davide')\n\t\tvarNomi = tkinter.Variable(value = nomi)\n\t\tlistNomi = tkinter.Listbox(mf, listvariable=varNomi, height=8, selectmode=tkinter.BROWSE)\n\t\tlistNomi.grid(row=6, column=0)\n\t\t#Inserisco un nome in posizione 0 ('Mattia')\n\t\tlistNomi.insert(0, 'Mattia')\n\t\t#Elimino il nome nella posizione 2 ('Francesco')\n\t\tlistNomi.delete(2)\n\n\t\t#LABEL SELEZIONE\n\t\tlblSelezione = tkinter.Label(mf, text='VALORE SELEZIONATO')\n\t\tlblSelezione.grid(row=7, column=0, columnspan=4, sticky=tkinter.EW)\n\n\t\t#Listbox\n\t\tsport = ('Calcio', 'Pallavolo', 'Basket', 'Rugby', 'Tennis', 'Nuoto', 'Padel', 'Atletica')\n\t\tvarSport = tkinter.Variable(value = sport)\n\t\tself.listSport = tkinter.Listbox(mf, listvariable=varSport, height=8, selectmode=tkinter.BROWSE)\n\t\tself.listSport.grid(row=8, column=0)\n\t\t#Button\n\t\tbtnConferma = tkinter.Button(mf, text='CONFERMA', command=self.stampaSelezione, bg='lightgreen')\n\t\tbtnConferma.grid(row=8, column=1)\n\n\t\t#BUTTON ESCI\n\t\tbtnEsci = tkinter.Button(mf, text='ESCI', command=self.destroy, bg='red')\n\t\tbtnEsci.grid(row=9, column=0, columnspan=4, sticky=tkinter.EW)\n\n\t#STAMPA SELEZIONE\n\tdef stampaSelezione(self):\n\t\tfor i in self.listSport.curselection():\n\t\t\tprint(self.listSport.get(i))\n\t\t\tmbox.showinfo('Selezione', self.listSport.get(i))\n\ndef main():\n\tf = Finestra('Widget Listbox')\n\tf.mainloop()\nmain()\n"],
				"prestetazione": "https://www.canva.com/design/DAFjQ92SnEc/yA9rRmbWWskjgwc2dvlilQ/view?website#2L",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/938259b864fdc6218d2cdddbb08927ae2c1afffa/PDF/listbox.pdf"
			}
		]
	},
	
	{
	"keyword": ["radiobutton",
		    "radiobutton",
		    "radio",
		    "il radiobutton",
		    "selezionare",
		    "pallino rotondo"
	],
	"nome": "Culasso Edoardo",
	"parte": [
			{
				"titolo": "Radiobutton",
				"corpo": "Il <strong>Radiobutton</strong> è un <strong>widget della tkinter</strong> che ti permette di <strong>selezionare</strong> una cosa di un gruppo di oggetti, e per utilizzarlo non serve importare cose tranne la tkinter e si crea così: <strong>tk.Radiobutton.</strong>",
				"code": ["import tkinter as tk\nfrom functools import partial\nfrom tkinter import messagebox\n\nclass Finestra(tk.Tk):\n\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.title('Progetto Pasqua Radiobutton')\n\t\tself.geometry('600x600')\n\t\tself.resizable(0,0)\n\t\tself.crea_widgets()\n\t\t\n\tdef crea_widgets(self):\n\t\tfin = tk.Frame(self)\n\t\tfin.place(rely = 0.4, relx = 0.5, anchor = tk.CENTER) \n\t\tfin.option_add('*Label*Font', 'TkDefaultFont 11')\n\t\t\n\t\t#label titolo\n\t\tlblt = tk.Label(fin, text = 'Progetto Radio button', font = ('TkDefaultFont', 16, 'bold'))\n\t\tlblt.grid(row = 0, column = 1, columnspan = 4, padx = 10, pady = 10, sticky = 'WE')\n\t\t\n\t\t#label prima domanda\n\t\tlbl1 = tk.Label(fin, text = 'Quando è scoppiata la prima guerra mondiale?')\n\t\tlbl1.grid(row = 1, column = 1)\n\t\t\n\t\t#radio sbagliato\n\t\tself.val = tk.IntVar() \n\t\tself.radio1 = tk.Radiobutton(fin, text = '1945', value = 1, variable = self.val, activeforeground = 'green', cursor = 'dot', relief = tk.RAISED)\n\t\tself.radio1.grid(row = 2, column = 1)\n\t\t\n\t\t#radio giusto\n\t\tself.radio2 = tk.Radiobutton(fin, text = '1914', value = 2, variable = self.val, activeforeground = 'red', cursor = 'dot', relief = tk.RAISED)\n\t\tself.radio2.grid(row = 2, column = 2)\n\t\t\n\t\t#label seconda domanda\n\t\tlbl2 = tk.Label(fin, text = 'Quando è scoppiata la seconda guerra mondiale?')\n\t\tlbl2.grid(row = 3, column = 1)\n\t\t\n\t\t#radio giusto\n\t\tself.val1 = tk.IntVar() \n\t\tself.radio3 = tk.Radiobutton(fin, text = '1939', value = 1, variable = self.val1, activeforeground = 'red', cursor = 'dot', relief = tk.RAISED)\n\t\tself.radio3.grid(row = 4, column = 1)\n\t\tself.radio3.invoke()\n\t\t\n\t\t#radio sbagliato\n\t\tself.radio4 = tk.Radiobutton(fin, text = '1960', value = 2, variable = self.val1, activeforeground = 'green', cursor = 'dot', relief = tk.RAISED)\n\t\tself.radio4.grid(row = 4, column = 2)\n\t\t\n\t\t#label terza domanda\n\t\tlbl3 = tk.Label(fin, text = 'Chi ha inventato la macchina a vapore?')\n\t\tlbl3.grid(row = 5, column = 1)\n\t\t\n\t\t#radio giusto\n\t\tself.val2 = tk.IntVar() \n\t\tself.radio5 = tk.Radiobutton(fin, text = 'Thomas Newcomen', value = 1, variable = self.val2, activeforeground = 'red', cursor = 'dot', relief = tk.RAISED)\n\t\tself.radio5.grid(row = 6, column = 1)\n\t\t\n\t\t#radio sbagliato\n\t\tself.radio6 = tk.Radiobutton(fin, text = 'James Watt', value = 2, variable = self.val2, activeforeground = 'green', cursor = 'dot', relief = tk.RAISED)\n\t\tself.radio6.grid(row = 6, column = 2)\n\t\t\n\t\t#label quarta domanda\n\t\tlbl4 = tk.Label(fin, text = 'La tupla è mutabile o immutabile?')\n\t\tlbl4.grid(row = 7, column = 1)\n\t\t\n\t\t#radio sbagliato\n\t\tself.val3 = tk.IntVar() \n\t\tself.radio7 = tk.Radiobutton(fin, text = 'mutabile', value = 1, variable = self.val3, activeforeground = 'green', cursor = 'dot', relief = tk.SUNKEN)\n\t\tself.radio7.grid(row = 8, column = 1)\n\t\t\n\t\t#radio giusto\n\t\tself.radio8 = tk.Radiobutton(fin, text = 'immutabile', value = 2, variable = self.val3, activeforeground = 'red', cursor = 'dot', relief = tk.SUNKEN)\n\t\tself.radio8.grid(row = 8, column = 2)\n\t\t\n\t\t#label quinta domanda\n\t\tlbl5 = tk.Label(fin, text = 'Qual'è l'indirizzo ip privato di classe B?')\n\t\tlbl5.grid(row = 9, column = 1)\n\t\t\n\t\t#radio giusto\n\t\tself.val4 = tk.IntVar() \n\t\tself.radio9 = tk.Radiobutton(fin, text = '172.16.0.0', value = 1, variable = self.val4, activeforeground = 'red', cursor = 'dot', relief = tk.SUNKEN)\n\t\tself.radio9.grid(row = 10, column = 1)\n\t\t\n\t\t#radio sbagliato\n\t\tself.radio10 = tk.Radiobutton(fin, text = '172.32.0.0', value = 2, variable = self.val4, activeforeground = 'green', cursor = 'dot', relief = tk.SUNKEN)\n\t\tself.radio10.grid(row = 10, column = 2)\n\t\t\n\t\t#label sesta domanda\n\t\tlbl6 = tk.Label(fin, text = 'Come si calcola l'area del trapezio?')\n\t\tlbl6.grid(row = 11, column = 1)\n\t\t\n\t\t#radio sbagliato\n\t\tself.val5 = tk.IntVar() \n\t\tself.radio11 = tk.Radiobutton(fin, text = '(B+b)/2', value = 1, variable = self.val5, activeforeground = 'green', cursor = 'dot', relief = tk.SUNKEN)\n\t\tself.radio11.grid(row = 12, column = 1)\n\t\t\n\t\t#radio giusto\n\t\tself.radio12 = tk.Radiobutton(fin, text = '(B+b)*h/2', value = 2, variable = self.val5, activeforeground = 'red', cursor = 'dot', relief = tk.SUNKEN)\n\t\tself.radio12.grid(row = 12, column = 2)\n\t\t\n\t\t#bottone annulla\n\t\tbottAnn = tk.Button(fin, text = 'ANNULLA', command = partial(self.annulla, fin))\n\t\tbottAnn.grid(row = 13, column = 1)\n\t\t\n\t\t#bottone esci\n\t\tbottConf = tk.Button(fin, text = 'CONFERMA', command = self.conferma)\n\t\tbottConf.grid(row = 13, column = 2, pady = 10)\n\t\t\n\t\t#bottone esci\n\t\tbottEsci = tk.Button(fin, text = 'ESCI', command = self.destroy)\n\t\tbottEsci.grid(row = 14, column = 2, pady = 10)\n\t\t\n\t\t\n\tdef annulla(self, fint):\n\t\tfor radio in fint.winfo_children(): #nella finestra guarda tutti i widgets che ci sono\n\t\t\tif isinstance(radio, tk.Radiobutton): #guarda se radio è un istanza di Radiobutton\n\t\t\t\tradio.flash()\n\t\t\t\tradio.deselect()\n\t\t\t\tradio.configure(bg = 'light gray')\n\t\t\t\t\n\tdef conferma(self):\n\t\tpunti = 0\n\t\tvalore1 = self.val.get()\n\t\tvalore2 = self.val1.get()\n\t\tvalore3 = self.val2.get()\n\t\tvalore4 = self.val3.get()\n\t\tvalore5 = self.val4.get()\n\t\tvalore6 = self.val5.get() \n\t\t\n\t\tif valore1 == 2:\n\t\t\tpunti = punti + 1\n\t\t\tself.radio2.configure(bg = 'green')\n\t\telse:\n\t\t\tself.radio1.configure(bg = 'red')\n\t\t\t\n\t\tif valore2 == 1:\n\t\t\tpunti = punti + 1\n\t\t\tself.radio3.configure(bg = 'green')\n\t\telse:\n\t\t\tself.radio4.configure(bg = 'red')\n\t\t\t\n\t\tif valore3 == 1:\n\t\t\tpunti = punti + 1\n\t\t\tself.radio5.configure(bg = 'green')\n\t\telse:\n\t\t\tself.radio6.configure(bg = 'red')\n\t\t\t\n\t\tif valore4 == 2:\n\t\t\tpunti = punti + 1\n\t\t\tself.radio8.configure(bg = 'green')\n\t\telse:\n\t\t\tself.radio7.configure(bg = 'red')\n\t\t\n\t\tif valore5 == 1:\n\t\t\tpunti = punti + 1\n\t\t\tself.radio9.configure(bg = 'green')\n\t\telse:\n\t\t\tself.radio10.configure(bg = 'red')\n\t\t\t\n\t\tif valore6 == 2:\n\t\t\tpunti = punti + 1\n\t\t\tself.radio12.configure(bg = 'green')\n\t\telse:\n\t\t\tself.radio11.configure(bg = 'red')\n\t\t\n\t\tmessaggio = f'Hai totalizzato {punti} punti'\n\t\tmessagebox.showinfo('Punti', messaggio)\n\t\t\n\t\t\ndef main():\n\tf = Finestra()\n\tf.mainloop()\n\t\nif __name__ == '__main__':\n\tmain()\n\n"],
				"prestetazione": "https://www.canva.com/design/DAFjv-fRzZ8/1zKCOF67tyU0zaMZ1_LeVg/view?website#2:il-radiobutton",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/58b2f59b8c6bc8ebe4a9a1e408fc13337173052a/PDF/radioButton.pdf"
			}
		]
	},
	
	{
	"keyword": ["checkbutton",
		    "check",
		    "button",
		    "selezione",
		    "scelta",
		    "pulsante",
		    "click"
	],
	"nome": "De Boni Simone",
	"parte": [
			{
				"titolo": "Checkbutton",
				"corpo": "I checkbutton sono utilizzati per visualizzare una serie di opzioni all'utente come pulsanti di commutazione. Grazie a questo widget, della Tkinter, l'utente può selezionare una o più opzioni facendo clic sul pulsante corrispondente a ciascuna opzione.",
				"code": ["#Presentazione\\s-\\sCheckbutton\\s\n#De\\sBoni\\sSimone\n\nimport\\stkinter\nfrom\\stkinter\\simport\\smessagebox\nfrom\\sfunctools\\simport\\spartial\nimport\\swebbrowser\n\nclass\\sFinestra(tkinter.Tk):\n\\s\\s\\s\\sdef\\s__init__(self,\\snome):\n\\s\\s\\s\\s\\s\\s\\s\\ssuper().__init__()\n\\s\\s\\s\\s\\s\\s\\s\\sself.title('Presentazione\\sCheckbutton,\\s'+nome)\n\\s\\s\\s\\s\\s\\s\\s\\sself.geometry('500x700')\n\\s\\s\\s\\s\\s\\s\\s\\sself.resizable(1,1)\n\\s\\s\\s\\s\\s\\s\\s\\sself.crea_widgets()\n\n\\s\\s\\s\\sdef\\screa_widgets(self):\n\\s\\s\\s\\s\\s\\s\\s\\stitolo=tkinter.Frame()\n\\s\\s\\s\\s\\s\\s\\s\\stitolo.grid()\n\\s\\s\\s\\s\\s\\s\\s\\stitolo.configure(bg='lightgrey',padx=38)\n\n\\s\\s\\s\\s\\s\\s\\s\\stit=tkinter.Label(titolo,\\stext='CHECKBUTTON\\sE\\sPARAMETRI',\\sfont=('Arial',\\s15,\\s'bold'),\\sfg='grey',\\sbg='lightgrey',\\sheight=2)\n\\s\\s\\s\\s\\s\\s\\s\\stit.grid(row=0,\\scolumn=0,\\scolumnspan=3,\\srowspan=3)\n\n\n\\s\\s\\s\\s\\s\\s\\s\\smf=tkinter.Frame()\n\\s\\s\\s\\s\\s\\s\\s\\smf.grid()\n\\s\\s\\s\\s\\s\\s\\s\\sself.configure(bg='lightgrey',\\spadx=60,\\spady=10)\n\\s\\s\\s\\s\\s\\s\\s\\smf.configure(bg='grey')\n\n\\s\\s\\s\\s\\s\\s\\s\\sself.check_lista=[]\n\n\\s\\s\\s\\s\\s\\s\\s\\sfor\\si\\sin\\srange(17):\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\sself.scelta\\s=\\stkinter.IntVar()\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\sself.check_lista.append(self.scelta)\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\n\\s\\s\\s\\s\\s\\s\\s\\sB1=tkinter.Checkbutton(mf,\\stext='1-activebackground',\\svariable=self.check_lista[0],\\sactivebackground='grey')\n\\s\\s\\s\\s\\s\\s\\s\\s#Attiva\\slo\\ssfondo\\squando\\ssi\\sclicca\\ssul\\sbotton.\n\\s\\s\\s\\s\\s\\s\\s\\sB1.grid(row=0,\\scolumn=0,\\ssticky='w',\\scolumnspan=3,\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB2=tkinter.Checkbutton(mf,\\stext='2-activeforeground',\\svariable=self.check_lista[1],\\sactiveforeground='grey')\n\\s\\s\\s\\s\\s\\s\\s\\s#Attiva\\sil\\scolore\\sdel\\stesto\\squando\\ssi\\sclicca\\ssul\\sbutton\n\\s\\s\\s\\s\\s\\s\\s\\sB2.grid(row=1,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB3=tkinter.Checkbutton(mf,\\stext='3-bg',\\svariable=self.check_lista[2],\\sbg='grey')\n\\s\\s\\s\\s\\s\\s\\s\\s#Colorazione\\sdello\\ssfondo\\sattiva\\squando\\snon\\ssi\\sclicca\\ssul\\sbutton.\n\\s\\s\\s\\s\\s\\s\\s\\sB3.grid(row=2,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB4=tkinter.Checkbutton(mf,\\sbitmap='error',\\svariable=self.check_lista[3])\n\\s\\s\\s\\s\\s\\s\\s\\s#Immagine\\sdi\\smessaggio\\sdi\\serrore\\sal\\sposto\\sdel\\stesto,\\spuò\\scambiare\\sin\\sbase\\sai\\sparametri.\n\\s\\s\\s\\s\\s\\s\\s\\sB4.grid(row=3,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB5=tkinter.Checkbutton(mf,\\stext='5-bd',\\svariable=self.check_lista[4],\\sbd=10)\n\\s\\s\\s\\s\\s\\s\\s\\s#Margine\\sattorno\\sad\\sogni\\slato\\sdel\\sbutton,\\sdi\\sdefault\\svale\\s2\\spixel.\n\\s\\s\\s\\s\\s\\s\\s\\sB5.grid(row=4,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB6=tkinter.Checkbutton(mf,\\stext='6-command',\\svariable=self.check_lista[5],\\scommand=mf.master.destroy)\n\\s\\s\\s\\s\\s\\s\\s\\s#Consente\\sdi\\sattivare\\smetodi\\se\\sfunzioni\\sal\\sclick\\sdel\\sbottone.\n\\s\\s\\s\\s\\s\\s\\s\\sB6.grid(row=5,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB7=tkinter.Checkbutton(mf,\\stext='7-cursor',\\svariable=self.check_lista[6],\\scursor='dot')\n\\s\\s\\s\\s\\s\\s\\s\\s#Cambia\\sla\\sforma\\sdel\\scursore\\sal\\sdi\\ssopra\\sdi\\squesto\\sbutton.\n\\s\\s\\s\\s\\s\\s\\s\\sB7.grid(row=6,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB8=tkinter.Checkbutton(mf,\\stext='8-font',\\svariable=self.check_lista[7],\\sfont=('Arial',\\s15))\n\\s\\s\\s\\s\\s\\s\\s\\s#Font\\sdel\\stesto.\n\\s\\s\\s\\s\\s\\s\\s\\sB8.grid(row=8,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB9=tkinter.Checkbutton(mf,\\stext='9-fg',\\svariable=self.check_lista[8],\\sfg='grey')\n\\s\\s\\s\\s\\s\\s\\s\\s#Colore\\sdel\\stesto.\n\\s\\s\\s\\s\\s\\s\\s\\sB9.grid(row=9,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB10=tkinter.Checkbutton(mf,\\stext='10-height',\\svariable=self.check_lista[9],\\sheight=5)\n\\s\\s\\s\\s\\s\\s\\s\\s#Altezza\\sdel\\sbutton.\n\\s\\s\\s\\s\\s\\s\\s\\sB10.grid(row=10,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB11=tkinter.Checkbutton(mf,\\stext='11-image',\\svariable=self.check_lista[10],\\scommand=partial(self.creaImmagine,\\smf))\n\\s\\s\\s\\s\\s\\s\\s\\s#Immagini\\scome\\sdei\\sbutton\\sgrazie\\sagli\\soggetti\\sphotoimage.\n\\s\\s\\s\\s\\s\\s\\s\\sB11.grid(row=0,\\scolumn=1,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB12=tkinter.Checkbutton(mf,\\stext='12-justify\\s\n\\saltra\\sriga',\\sanchor='e',\\svariable=self.check_lista[11],\\sjustify=tkinter.CENTER)\n\\s\\s\\s\\s\\s\\s\\s\\s#Se\\sil\\stesto\\scontiene\\spiù\\srighe,\\squesta\\sopzione\\scontrolla\\sla\\sgiustificazione\\sdel\\stesto:\\sCENTRO,\\sSINISTRA\\so\\sDESTRA.\n\\s\\s\\s\\s\\s\\s\\s\\sB12.grid(row=1,\\scolumn=1,sticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB13=tkinter.Checkbutton(mf,\\stext='13-relief',\\svariable=self.check_lista[12],\\srelief=tkinter.GROOVE)\n\\s\\s\\s\\s\\s\\s\\s\\s#Con\\sil\\svalore\\spredefinito,\\srelief=FLAT,\\sil\\scheckbutton\\snon\\ssi\\sdistingue\\sdal\\ssuo\\ssfondo.\\sPuoi\\simpostare\\spiù\\sstili.\n\\s\\s\\s\\s\\s\\s\\s\\sB13.grid(row=2,\\scolumn=1,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB14=tkinter.Checkbutton(mf,\\stext='14-selectcolor',\\svariable=self.check_lista[13],\\sselectcolor='grey')\n\\s\\s\\s\\s\\s\\s\\s\\s#Il\\scolore\\sdel\\scheckbutton\\squando\\sè\\simpostato.\\sL'impostazione\\spredefinita\\sè\\sselectcolor='rosso'.\n\\s\\s\\s\\s\\s\\s\\s\\sB14.grid(row=3,\\scolumn=1,sticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB15=tkinter.Checkbutton(mf,\\stext='15-state',\\svariable=self.check_lista[14],\\sstate=tkinter.DISABLED)\n\\s\\s\\s\\s\\s\\s\\s\\s#è\\spossibile\\sutilizzare\\sstate=DISABLED\\sper\\sdisattivare\\sil\\scontrollo\\se\\srenderlo\\snon\\srispondente.\n\\s\\s\\s\\s\\s\\s\\s\\sB15.grid(row=4,\\scolumn=1,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB16=tkinter.Checkbutton(mf,\\stext='16-underline',\\svariable=self.check_lista[15],\\sunderline=4)\n\\s\\s\\s\\s\\s\\s\\s\\s#Si\\spuò\\ssottolineare\\sun\\scarattere\\soppure\\stutto\\siò\\stesto\\sdel\\sbutton.\n\\s\\s\\s\\s\\s\\s\\s\\sB16.grid(row=5,\\scolumn=1,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB17=tkinter.Checkbutton(mf,\\stext='17-wraplength',\\svariable=self.check_lista[16],\\swraplength=5)\n\\s\\s\\s\\s\\s\\s\\s\\s#suddividi\\sin\\spiù\\srighe\\sanche\\stesti\\sdi\\ssolo\\suna\\sparola.\n\\s\\s\\s\\s\\s\\s\\s\\sB17.grid(row=6,\\scolumn=1,\\ssticky='we',\\srowspan=5,\\spadx=10,\\spady=10)\n\\s\\s\\s\\s\\s\\s\\s\\s#All'interno\\sdei\\sCheckbutton\\sabbiamo\\sil\\smainFrame,\\sdove\\sinseriremo\\sil\\snostro\\swidget,\n\\s\\s\\s\\s\\s\\s\\s\\s#il\\stesto\\sda\\sassociare\\sai\\spulsanti\\se\\sla\\svariabile,\n\\s\\s\\s\\s\\s\\s\\s\\s#che\\ssarà\\sproprio\\squesta\\sche\\spermetterà\\sdi\\spoter\\sselezionare\\suno\\so\\spiù\\sopzioni,\\sgrazie\\sal\\ssuo\\svalore\n\\s\\s\\s\\s\\s\\s\\s\\s#di\\stipo\\sintero,\\sche\\spuò\\sessere\\s0\\so\\s1\\s(0\\snon\\sselezionato,\\s1\\sselezionato).\\s\n\n\\s\\s\\s\\s\\s\\s\\s\\sbutt=tkinter.Button(mf,\\stext='VERIFICA',\\scommand=self.Dispensa)\n\\s\\s\\s\\s\\s\\s\\s\\sbutt.grid(row=11,\\scolumn=0,\\scolumnspan=3,\\sipadx=30,\\sipady=10)\n\n\n\\s\\s\\s\\sdef\\screaImmagine(self,\\smf):\n\\s\\s\\s\\s\\s\\s\\s\\sself.acceso\\s=\\stkinter.PhotoImage(width=48,\\sheight=24)\n\\s\\s\\s\\s\\s\\s\\s\\sself.spento\\s=\\stkinter.PhotoImage(width=48,\\sheight=24)\n\\s\\s\\s\\s\\s\\s\\s\\sself.acceso.put(('green',),\\sto=(0,\\s0,\\s23,23))\n\\s\\s\\s\\s\\s\\s\\s\\sself.spento.put(('red',),\\sto=(24,\\s0,\\s47,\\s23))\n\\s\\s\\s\\s\\s\\s\\s\\s#Creo\\si\\sdue\\soggetti\\sPhotoImage\\se\\ssuccessivamente\\simposterò\\sloro\\sla\\sgrandezza,\n\\s\\s\\s\\s\\s\\s\\s\\s#il\\scolore\\sche\\sdevono\\sassumere,\\se\\sla\\sloro\\sposizione.\n\n\\s\\s\\s\\s\\s\\s\\s\\sself.var1\\s=\\stkinter.IntVar(value=1)\n\\s\\s\\s\\s\\s\\s\\s\\sself.var2\\s=\\stkinter.IntVar()\n\\s\\s\\s\\s\\s\\s\\s\\scb1\\s=\\stkinter.Checkbutton(mf,\\simage=self.spento,\\sselectimage=self.acceso,\\sindicatoron=False,\\svariable=self.var1)\n\\s\\s\\s\\s\\s\\s\\s\\scb2\\s=\\stkinter.Checkbutton(mf,\\simage=self.spento,\\sselectimage=self.acceso,\\sindicatoron=False,\\svariable=self.var2)\n\\s\\s\\s\\s\\s\\s\\s\\scb1.grid(row=0,\\scolumn=2,\\spadx=20,\\spady=10)\n\\s\\s\\s\\s\\s\\s\\s\\scb2.grid(row=1,\\scolumn=2,\\spadx=20,\\spady=10)\n\\s\\s\\s\\s\\s\\s\\s\\s#Creo\\si\\sdue\\scheckbutton\\se\\sgrazie\\salle\\sopzioni\\simage\\se\\sselectimage\\sposso\\sgestire\\sle\\simmagini\n\\s\\s\\s\\s\\s\\s\\s\\s#che\\sverranno\\smostrate\\ssia\\squando\\sil\\sbutton\\sè\\sselezionato\\ssia\\squando\\snon\\slo\\sè...\n\\s\\s\\s\\s\\s\\s\\s\\s#grazie\\spoi\\sall'opzione\\sindicatoron\\simpostata\\sa\\sfalse\\sposso\\sgestire\\sio\\sl'indicatore\\sdella\\stkinter\n\\s\\s\\s\\s\\s\\s\\s\\s#senza\\sche\\susi\\squello\\spredefinito.\n\n\\s\\s\\s\\sdef\\sDispensa(self):\n\\s\\s\\s\\s\\s\\s\\s\\sif\\sself.check_lista[0].get()==0\\sand\\sself.check_lista[1].get()==0\\sand\\sself.check_lista[2].get()==0\\sand\\sself.check_lista[3].get()==0\\sand\\sself.check_lista[4].get()==0\\sand\\sself.check_lista[6].get()==0\\sand\\sself.check_lista[7].get()==0\\sand\\sself.check_lista[8].get()==0\\sand\\sself.check_lista[9].get()==0\\sand\\sself.check_lista[10].get()==0\\sand\\sself.check_lista[11].get()==0\\sand\\sself.check_lista[12].get()==0\\sand\\sself.check_lista[13].get()==0\\sand\\sself.check_lista[15].get()==0\\sand\\sself.check_lista[16].get()==0:\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\swebbrowser.open_new('https://www.canva.com/design/DAFfxoltwcg/O_sJAmSX29-pS-1xUnrVkw/edit?utm_content=DAFfxoltwcg&utm_campaign=designshare&utm_medium=link2&utm_source=sharebutton')\n\\s\\s\\s\\s\\s\\s\\s\\selse:\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\sselezionati\\s=\\s[i+1\\sfor\\si,\\sself.scelta\\sin\\senumerate(self.check_lista)\\sif\\sself.scelta.get()\\s==\\s1]\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s#creo\\suna\\snuova\\slista\\sSELEZIONATI\\sdove\\sall'interno\\ssalvo\\sun\\svalore,\\sovvero\\sl'indice\\sdella\\slista\\sCHECK_LISTA\\sincreementato\\sdi\\suno,\\sche\\scorrisponde\\sa\\sogni\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s#elemento\\sdi\\stipo\\sint\\svar\\sche\\sha\\svalore==1.\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\smessagebox.showinfo('Checkbutton\\sselezionati',\\sf'Sono\\sstati\\sselezionati\\si\\scheckbutton\\snumero:\\s{selezionati}')\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s#stampo\\sla\\slista\\sche\\scontiene\\si\\svalori.\n\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s#la\\sfunzione\\senumerate()\\sfornisce\\sl'indice\\se\\sil\\svalore\\sdi\\sciascun\\selemento\\sdi\\suna\\slista\\so\\stupla\\secc...\ndef\\smain():\n\\s\\s\\s\\sf=Finestra('De\\sBoni')\n\\s\\s\\s\\sf.mainloop()\n\nmain()\n\\s\\s\\s\\s\\s\\s\\s\\s\n"],
				"prestetazione": "https://www.canva.com/design/DAFfxoltwcg/O_sJAmSX29-pS-1xUnrVkw/edit?utm_content=DAFfxoltwcg&utm_campaign=designshare&utm_medium=link2&utm_source=sharebutton",
				"pdf": ""
			}
		]
	},
	
	{
	"keyword": ["pack",
		    "pa",
		    "pac",
		    "p",
		    "layout",
		    "disposizione"
		],
	"nome": "Di Marco Mirko",
	"parte": [
			{
				"titolo": "Pack",
				"corpo": "Il metodo <strong>pack()</strong> in Tkinter è utilizzato per posizionare e allineare i widget all'interno di un contenitore. È un modo semplice per organizzare i componenti di un'interfaccia grafica. Chiamando pack() su un widget, puoi specificare come desideri che venga posizionato nel suo contenitore padre. È possibile utilizzare opzioni aggiuntive come side (lato), fill (riempimento) e expand (espansione) per personalizzare ulteriormente il comportamento del widget. Il metodo pack() segue un layout predefinito, che di solito è un allineamento verticale dall'alto verso il basso. È un modo veloce e semplice per iniziare a posizionare i widget nella tua interfaccia grafica, ma potresti considerare metodi più avanzati se hai bisogno di layout più complessi.",
				"code": ["import tkinter as tk\nfrom tkinter import messagebox\nclass Finestra(tk.Tk):\n\tdef __init__(self,nome=''):\n\t\tsuper().__init__()\n\t\tself.title('Gestione '+ nome)\n\t\tself.geometry('750x450')\n\t\tself.resizable(1,1)\n\t\tself.creawidget()\n\tdef creawidget(self):\n\t\twidget1=tk.Label(self,text='expand=True || fill=y || side=top',bg='Red')\n\t\twidget1.pack(side='top',expand=True,fill='y')\n\t\t\n\t\t\n\t\twidget2=tk.Label(self,text='expand=False || fill=both || side=top',bg='green')\n\t\twidget2.pack(side='top',expand=False,fill='both')\n\t\t\n\t\t\n\t\twidget3=tk.Label(self,text='expand=True || fill=both || side=top',bg='yellow')\n\t\twidget3.pack(side='top',expand=True,fill='both')\n\t\t\n\t\tspace=tk.Label(self,text='')\n\t\tspace.pack(side='top',expand=True,fill='both')\n\t\t\n\t\t\n\t\twidget4=tk.Label(self,text='expand=True || fill=None || side=left',bg='Red')\n\t\twidget4.pack(side='left',expand=True,fill=None)\n\t\t\n\t\t\n\t\twidget5=tk.Label(self,text='expand=False || fill=y || side=left',bg='green')\n\t\twidget5.pack(side='left',expand=False,fill=None)\n\t\t\n\t\t\n\t\twidget6=tk.Label(self,text='expand=True || fill=x || side=left',bg='yellow')\n\t\twidget6.pack(side='left',expand=True,fill='x')\n\t\t\n\t\tspace2=tk.Label(self,text='')\n\t\tspace2.pack(side='top',expand=True,fill='both')\n\t\t\n\t\tspace3=tk.Label(self,text='')\n\t\tspace3.pack(side='top',expand=True,fill='both')\n\t\t\ndef main():\n\twin=Finestra('Pack')\n\twin.mainloop()\nmain()\n"],
				"prestetazione": "https://www.canva.com/design/DAFjvqZC4zg/KSeCEAxNBJbmyKQs8-NfyA/view",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/1a532b82e6c5c3646807e849462595678883dd5a/PDF/pack.pdf"
			}
		]
	},
	
	{
		"keyword": ["text",
			"widget",
			"casella",
			"testo",
			"box",
			"tk",
			"tkinter"

		],
	"nome": "Dossetto Giuseppe",
	"parte": [
			{
				"titolo": "Text",
				"corpo": "Il widget text della tkinter può essere usato sia per salvare l’input di testo dell’utente che per stampare del testo, in entrambi i casi su più linee.",
				"code": ["from tkinter import * \n\nclass textWidget(Tk):\n\t#costruttore\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.title('Text widget')\n\t\tself.geometry('610x830')\n\t\tself.resizable(0,0)\n\t\tself.crea_widgets()\n\t\tself.crea_widgets2()\n\t\tself.crea_widgets3()\n\n\t\t\n\t\t\n\tdef crea_widgets(self):\n\t\tmf=Frame(self)\n\t\tmf.grid()\n\t\t#Multi line Text widget \n\t\tself.lbl1=Label(mf,text='text come multiline input text') \n\t\tself.lbl1.grid(row=0,column=0)\n\n\t\tself.txtA = Text(mf, width=50, height=10, wrap= WORD) # creazione widjed width: numero colonne height: numero righe wrap: WORD=va a capo senza spezzare le parole CHAR= va a capo spezzando le parole\n\t\tself.txtA.grid(row=1,column=0) #inserisco widget  nel Frame\n\n\t\tself.btn=Button(mf,text='stampa testo',command=self.stampa)\n\t\tself.btn.grid(row=2,column=0,pady=2,padx=2)\n\n\t\tself.lbl2=Label(mf,text='text come multiline output text') \n\t\tself.lbl2.grid(row=3,column=0)\n\n\t\tself.txtA2 = Text(mf, width=50, height=10, wrap= CHAR,fg='blue',font=('Times New Roman',15),cursor='circle',padx=25,pady=5) # creazione widjed width: numero colonne height: numero righe wrap: WORD=va a capo senza spezzare le parole CHAR= va a capo spezzando le parole\n\t\tself.txtA2.grid(row=4,column=0) #inserisco widget  nel Frame\n\t\tself.txtA2['state'] = DISABLED # disabilito la casella di testo in modo che l'utente non ci possa scrivere\n\t\t\n\t\t\n\tdef crea_widgets2(self):\n\t\tmf2=Frame(self)\n\t\tmf2.grid()\n\n\t\tself.btn=Button(mf2,text='scrivo all inizio',command=self.SI)\n\t\tself.btn.grid(row=1,column=0,pady=2)\n\n\t\tself.btn=Button(mf2,text='scrivo alla fine',command=self.SF)\n\t\tself.btn.grid(row=1,column=1,pady=2)\n\t\t\n\n\n\t\tself.btn=Button(mf2,text='cancello tutto',command=self.CancAll)\n\t\tself.btn.grid(row=1,column=2,pady=2)\n\n\t\tself.btn=Button(mf2,text='colora primi 6 caratteri',command=self.colora)\n\t\tself.btn.grid(row=1,column=3,pady=2)\n\n\t\tself.btn=Button(mf2,text='elimina colore',command=self.eliminaColore)\n\t\tself.btn.grid(row=1,column=4,pady=2)\t\n\n\tdef crea_widgets3(self):\n\t\tmf=Frame(self)\n\t\tmf.grid(pady=30,padx=30)\n\t\tverticalScroll=Scrollbar(mf, orient=VERTICAL)  #creo la scrollbar, orient=VERTICAL imposta la scrollbar in verticale\n\t\thorizontalScroll=Scrollbar(mf, orient=HORIZONTAL) #creo la scrollbar, orient=HORIZONTAL imposta la scrollbar in orizzontale\n\n\t\tself.txtA = Text(mf, width=50, height=5, wrap= NONE,yscrollcommand=verticalScroll.set,xscrollcommand=horizontalScroll.set) # creazione widget width: numero colonne height: numero righe wrap: WORD=va a capo senza spezzare le parole CHAR= va a capo spezzando le parole y/xscrollcommad= richiama la set della scrollbar quando la scrollbar necessita di essere aggiornata (es. quando aggiungiamo o cancelliamo righe)\n\t\tself.txtA.grid(row=1,column=0) #inserisco widget  nel Frame\n\t\tself.txtA.insert('1.0','aaaaabbbbbbcccccddddddeeeeeeffffgggghhhhhhhhhaaaaaabbbbbcccccdddddeeeefffffggggg\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10')\n\t\t# self.txtA['state']=DISABLED\n\n\t\tverticalScroll.grid(row=1,column=2,sticky=W+N+S,rowspan=2) # inserisco il widget \n\t\thorizontalScroll.grid(row=2,column=0,sticky=W+E) # inserisco il widget  \n\n\t\tverticalScroll.config(command= self.txtA.yview)  # configuro la scrollbar il metodo yview della txtA viene richiamato quando agisco sulla scrollbar\n\t\thorizontalScroll.config(command= self.txtA.xview)  # configuro la scrollbar il metodo xview della txtA viene richiamato quando agisco sulla scrollbar\n\n\tdef stampa(self):\n\t\ttxt=self.txtA.get('1.0',END) # prende tutto il testo in txtA dalla righa 1 colonna 0 fino alla fine 'END'\n\t\tselected_text = self.txtA.selection_get()\n\t\tprint(txt)\n\t\t# selected_text = self.txtA.selection_get()  # Ottiene il testo selezionato\n\t\tself.txtA.tag_add('colored', 'sel.first', 'sel.last')  # Aggiunge il tag 'colored' alla selezione\n\t\tself.txtA.tag_config('colored', foreground='red')\n\n\n\tdef SI(self):\n\t\tself.txtA2['state']=NORMAL #abilito il widget in modo da poter scrivere\n\t\tself.txtA2.insert('1.0','Testo inizio ') # inserisco il testo all inizio riga 1 colonna 0\n\t\tself.txtA2['state']=DISABLED # disabilito la casella di testo in modo che l'utente non ci possa scrivere\n\n\tdef SF(self):\n\t\tself.txtA2['state']=NORMAL #abilito il widget in modo da poter scrivere\n\t\tself.txtA2.insert(END,'Testo fine ') # inserisco il testo alla fine END\n\t\tself.txtA2['state']=DISABLED # disabilito la casella di testo in modo che l'utente non ci possa scrivere\n\n\tdef CancAll(self):\n\t\tself.txtA2['state']=NORMAL #abilito il widget in modo da poter scrivere\n\t\tself.txtA2.delete('1.0',END) # cancello il testo da riga 1 colonna 0  fino alla fine\n\t\tself.txtA2['state']=DISABLED # disabilito la casella di testo in modo che l'utente non ci possa scrivere\n\n\tdef colora(self):\n\t\tself.txtA2['state']=NORMAL #abilito il widget in modo da poter scrivere\n\t\tself.txtA2.tag_add('rosso', '1.0', '1.6')  #aggiungo un tag a txtA2 dandogli il nome e il range di caratteri che influisce\n\t\tself.txtA2.tag_config('rosso', foreground='red', background='yellow') #configuro il tag 'rosso' in modo da rendere il colore del carattere rosso e evidenziarlo di giallo \n\t\tself.txtA2['state']=DISABLED # disabilito la casella di testo in modo che l'utente non ci possa scrivere\n\t\t\n\tdef eliminaColore(self):\n\t\tself.txtA2['state']=NORMAL #abilito il widget in modo da poter scrivere\n\t\tself.txtA2.tag_delete('rosso')  # elimino il tag 'rosso'\n\t\tself.txtA2['state']=DISABLED # disabilito la casella di testo in modo che l'utente non ci possa scrivere\n\t\t\ndef main():\n\tf=textWidget()\n\tf.mainloop()\n\n\nmain()\n\n"],
				"prestetazione": "https://www.canva.com/design/DAFjwAcdX3U/M8Uj3t3nlGZgYzxuvMXRDQ/view?website#2:text-widget-tkinter"
			}
		]
	},
	
	{
	"keyword": ["PanedWindow",
		    "window",
		    "pannello",
		    "ridimensiona",
		    "paned",
		    "trascina",
		    "espandi",
		    "riduci"
	],
	
	"nome": "Martini Gabriele",
	"parte": [
			{
				"titolo": "PanedWindow",
				"corpo": "Il <strong>PanedWindow</strong> è un <strong>contenitore</strong> in cui è possibile aggiungere dei widget (figli). Esso è suddiviso a <strong>fasce</strong>, che possono essere verticali o orizzontali (a seconda di come si decide di disporre i widget. Ogni fascia ha una maniglia. La particolarità di questo widget è che tramite le fasce possiamo andare a <strong>rimodellare</strong> lo spazio assegnato a ciascun widget figlio, ovviamente designando più <strong>spazio</strong> ad un widget l'altro ne avrà di meno. Un esempio pratico sono le varie 'pagine secondarie' degli editor di testo e/o foto/video.",
				"code": ["import tkinter as tk\nfrom tkinter import messagebox\nimport os\n\n\nclass Window(tk.Tk):\n\tdef __init__(self):\n\\tsuper().__init__()\n\t\tself.title('Panedwindow | Martini')\n\t\tself.geometry('650x500')\n\t\tself.resizable(True,True)\n\t\tself.configure(bg='grey')\n\n\t\tself.flagADD = False\n\n\t\tself.widget()\n\n\tdef widget(self):\n\t\tself.mainFrame = tk.Frame(self)\n\t\tself.mainFrame.grid()\n\t\tself.mainFrame.configure(bg='grey')\n\n\t\t# MAIN PW\n\t\tself.mainPW = tk.PanedWindow(self.mainFrame, bg='light grey', height=500, width=650, relief='ridge', bd=2, cursor='dotbox', handlepad=2, handlesize=10, opaqueresize=True, sashpad=10, sashwidth=5, showhandle=True, orient=tk.VERTICAL)\n\t\tself.mainPW.pack(fill=tk.BOTH, side=tk.TOP, expand=True)\n\n\t\t# TITLE\n\t\ttitle = tk.Label(self.mainFrame,bg='black',text='IL PANEDWINDOW\ndi Gabriele Martini',font=('Courier', 18,'bold'),fg='white')\n\t\ttitle.pack(fill=tk.BOTH,side=tk.TOP,pady=10)\n\n\t\t# PANEDWINDOW ROW 1\n\t\tself.pwR1 = tk.PanedWindow(self.mainFrame, bg='grey', height=100, relief='ridge', bd=2, cursor='dotbox', handlepad=2, handlesize=10, opaqueresize=True, sashpad=10, sashwidth=5, showhandle=True, orient=tk.HORIZONTAL)\n\t\tself.pwR1.pack(fill=tk.BOTH, side=tk.TOP, expand=True)\n\n\t\tself.b1 = tk.Button(self.mainFrame, text='.add', bg='#dcdcdc', width=21, command=self.methodAdd)\n\t\tself.b2 = tk.Button(self.mainFrame, text='.forget', bg='#dcdcdc', width=21, command=self.methodForget)\n\t\tself.infoR1 = tk.Button(self.mainFrame, text='INFO', bg='purple',command=self.Row1Info)\n\t\tself.pwR1.add(self.b1)\n\t\tself.pwR1.add(self.b2)\n\t\tself.pwR1.add(self.infoR1)\n\n\t\t# PANEDWINDOW ROW 2\n\t\tself.pwR2 = tk.PanedWindow(self.mainFrame, bg='grey', height=100, relief='solid', bd=5, cursor='dotbox', handlepad=40, handlesize=15, opaqueresize=True, sashpad=10, sashwidth=8, showhandle=True, orient=tk.HORIZONTAL)\n\t\tself.pwR2.pack(fill=tk.BOTH, side=tk.TOP, expand=True)\n\t\t\n\t\tself.b3 = tk.Button(self.mainFrame, text='.identify', bg='#dcdcdc', width=21, command=self.methodIdentify)\t\t\n\t\tself.b4 = tk.Button(self.mainFrame, text='.panecget', bg='#dcdcdc', width=21, command=self.methodPanecget)\n\t\tself.infoR2 = tk.Button(self.mainFrame, text='INFO', bg='purple',command=self.Row2Info)\n\t\tself.pwR2.add(self.b3)\n\t\tself.pwR2.add(self.b4)\n\t\tself.pwR2.add(self.infoR2)\n\t\t\n\t\t# PANEDWINDOW ROW 3\n\t\tself.pwR3 = tk.PanedWindow(self.mainFrame, bg='grey', height=100, relief='ridge', bd=8, cursor='dotbox', handlepad=48, handlesize=20, opaqueresize=True, sashpad=10, sashwidth=10, showhandle=True, orient=tk.HORIZONTAL)\n\t\tself.pwR3.pack(fill=tk.BOTH, side=tk.TOP, expand=True)\n\n\t\tself.b5 = tk.Button(self.mainFrame,text='.paneconfig',bg='#dcdcdc', width=21, command=self.methodPaneconfig)\n\t\tself.b6 = tk.Button(self.mainFrame,text='.panes',bg='#dcdcdc', width=21, command=self.methodPanes)\n\t\tself.infoR3 = tk.Button(self.mainFrame, text='INFO', bg='purple',command=self.Row3Info)\n\t\tself.pwR3.add(self.b5)\n\t\tself.pwR3.add(self.b6)\n\t\tself.pwR3.add(self.infoR3)\n\n\t\t# PANEDWINDOW ROW 4\n\t\tself.pwR4 = tk.PanedWindow(self.mainFrame, bg='grey', height=100, relief='solid', bd=10, cursor='dotbox', handlepad=55, handlesize=25, opaqueresize=True, sashpad=10, sashwidth=15, showhandle=True, orient=tk.HORIZONTAL)\n\t\tself.pwR4.pack(fill=tk.BOTH, side=tk.TOP, expand=True)\n\t\t\n\t\tself.b7 = tk.Button(self.mainFrame,text='.sash_coord',bg='#dcdcdc', width=21, command=self.methodSash_coord)\n\t\tself.b8 = tk.Button(self.mainFrame,text='.sash_place',bg='#dcdcdc', width=21, command=self.methodSash_place)\n\t\tself.infoR4 = tk.Button(self.mainFrame, text='INFO', bg='purple',command=self.Row4Info)\n\t\tself.pwR4.add(self.b7)\n\t\tself.pwR4.add(self.b8)\n\t\tself.pwR4.add(self.infoR4)\n\n\t\t# ADD IN THE MAIN PW\n\t\tself.mainPW.add(title)\n\t\tself.mainPW.add(self.pwR1)\n\t\tself.mainPW.add(self.pwR2)\n\t\tself.mainPW.add(self.pwR3)\n\t\tself.mainPW.add(self.pwR4)\n\n\tdef methodAdd(self):\n\t\tif self.flagADD == False:\n\t\t\tself.LabelAdd = tk.Label(self.mainFrame, text='Label agiunto', bg='green')\n\t\t\tself.pwR1.add(self.LabelAdd)\n\t\t\tself.flagADD = True\n\n\tdef methodForget(self):\n\t\tif self.flagADD == True:\n\t\t\tself.pwR1.forget(self.LabelAdd)\n\t\t\tself.flagADD = False\n\n\tdef methodIdentify(self):\n\t\tresult = self.pwR2.identify(384,10)\n\t\ttk.messagebox.showinfo(title='RETURN .identify', message='LEGENDA:\n- stringa vuota = finestra figlio;\n- fascia = (n, 'sash');\n- maniglia = (n, 'handle');\n RISULTATO = '+str(result))\n\n\tdef methodPanecget(self):\n\t\tresult = self.pwR2.panecget(self.b4,'sticky')\n\t\ttk.messagebox.showinfo(title='RETURN .panecget', message='RISULTATO(su quale lato aderisce il button) = '+str(result))\n\t\n\tdef methodPaneconfig(self):\n\t\tself.pwR3.paneconfig(self.b5,pady=10)\n\n\tdef methodPanes(self):\n\t\tresult = self.pwR3.panes()\n\t\ttk.messagebox.showinfo(title='RETURN .panes', message='RISULTATO(lista widget dentro il PanedWindow) = '+str(result))\n\n\tdef methodSash_coord(self):\n\t\tresult = self.pwR4.sash_coord(0)\n\t\ttk.messagebox.showinfo(title='RETURN .sash_coord', message='RISULTATO(coordinate fascia n.0) = '+str(result))\n\n\tdef methodSash_place(self):\n\t\tself.pwR4.sash_place(1,250,10)\n\n\tdef Row1Info(self):\n\t\ttk.messagebox.showinfo(title='INFO 1° PANEDWINDOW', message='bd(spessore bordo)=2px; handlepad(distanza della maniglia dalla parte sup.)=2px; handlesize(dimensone maniglia)=10px; sashwidth(larghezza fascia)=5px;')\n\t\n\tdef Row2Info(self):\n\t\ttk.messagebox.showinfo(title='INFO 2° PANEDWINDOW', message='bd(spessore bordo)=5px; handlepad(distanza della maniglia dalla parte sup.)=40px; handlesize(dimensone maniglia)=15px; sashwidth(larghezza fascia)=8px;')\n\n\tdef Row3Info(self):\n\t\ttk.messagebox.showinfo(title='INFO 3° PANEDWINDOW', message='bd(spessore bordo)=8px; handlepad(distanza della maniglia dalla parte sup.)=48px; handlesize(dimensone maniglia)=20px; sashwidth(larghezza fascia)=10px;')\n\t\n\tdef Row4Info(self):\n\t\ttk.messagebox.showinfo(title='INFO 4° PANEDWINDOW', message='bd(spessore bordo)=10px; handlepad(distanza della maniglia dalla parte sup.)=55px; handlesize(dimensone maniglia)=25px; sashwidth(larghezza fascia)=15px;')\n\n\ndef main():\n\tpulisci()\n\tw = Window()\n\tw.mainloop()\n\ndef pulisci():\n\tos.system('clear')\n\nmain()\n"],
				"prestetazione": "https://view.genial.ly/6431721d14a74800184df5b8/guide-python-tkinter-panedwindow",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/938259b864fdc6218d2cdddbb08927ae2c1afffa/PDF/panedWindow.pdf"
			}
		]
	},
	
	{
	"keyword": ["bind",
		    "bind()",
		    "la bind()",
		    "la bind",
		    "metodo bind",
		    "eventi"
		],
	"nome": "Paseri Kevin",
	"parte": [
			{
				"titolo": "Il metodo bind",
				"corpo": "La <strong>bind()</strong> è un metodo che permette di associare a un widget qualunque il gestore di un evento. Assomiglia alla <strong>command</strong> del tk.Button per attivare il metodo associato in seguito al click del mouse, ma attraverso questo metodo potremmo anche gestire i tasti della tastiera, oltre ovviamente al mouse.",
				"code": ["import tkinter as tk\nfrom functools import partial\nfrom tkinter import messagebox\nfrom datetime import datetime\nimport locale\nlocale.setlocale(locale.LC_ALL, '')\n\nclass WidgetBind(tk.Tk):\n\tdef __init__(self, nome):\n\t\tsuper().__init__()\n\t\tself.title(nome)\n\t\tself.geometry('400x400')\n\t\tself.resizable(1, 1)\n\t\tself.creaWidgets()\n\t\t\n\tdef creaWidgets(self):\n\t\tself.mf = tk.Frame(self)\n\t\tself.mf.grid()\n\t\t\n\t\tself.valNomPre = tk.StringVar()\n\t\tself.labNomPre = tk.Label(self.mf, text = 'NOME [N]', borderwidth = 2, relief = 'raised')\n\t\tself.labNomPre.grid(row = 0, column = 0, pady = 10, padx = 10, ipadx = 20, ipady = 10, columnspan = 1, sticky = 'ew')\n\t\tself.bind('<KeyPress-N>', partial(self.MostraNome, self.valNomPre, 0, 1, 'Nome'))\n\t\t\n\t\tself.valCogPre = tk.StringVar()\n\t\tself.labNomPre = tk.Label(self.mf, text = 'COGNOME [C]', borderwidth = 2, relief = 'raised')\n\t\tself.labNomPre.grid(row = 1, column = 0, pady = 10, padx = 10, ipadx = 20, ipady = 10, columnspan = 1, sticky = 'ew')\n\t\tself.bind('<KeyPress-C>', partial(self.MostraCognome, self.valCogPre, 1, 1, 'Cognome'))\n\t\t\n\t\tself.tipo = tk.Label(self.mf, text = 'TIPO', borderwidth = 2, relief = 'raised')\n\t\tself.tipo.grid(row = 2, column = 0, pady = 10, padx = 10, ipadx = 20, ipady = 10, columnspan = 1, sticky = 'ew')\n\t\tself.tipo.bind('<ButtonPress-1>', partial(self.Abilita, 'singolo'))\n\t\tself.tipo.bind('<Double-Button-1>', partial(self.Abilita, 'doppio'))\n\t\tself.bind('<KeyPress-m>', partial(self.Abilita, 'singolo'))\n\t\tself.bind('<KeyPress-M>', partial(self.Abilita, 'doppio'))\n\t\t\n\t\tself.tipoVeicolo = tk.StringVar()\n\t\tself.moto = tk.Radiobutton(self.mf, text = 'Motocicletta  [m]', variable = self.tipoVeicolo, value = 'Motocicletta')\n\t\tself.macchina = tk.Radiobutton(self.mf, text = 'Macchina [M]', variable = self.tipoVeicolo, value = 'Macchina')\n\t\tself.moto.grid(row = 3, column = 1)\n\t\tself.macchina.grid(row = 3, column = 2)\n\t\t\n\t\tself.labCausale = tk.Label(self.mf, text = 'CAUSALE [A]', borderwidth = 2, relief = 'raised')\n\t\tself.labCausale.grid(row = 4, column = 0, pady = 10, padx = 10, ipadx = 20, ipady = 10, columnspan = 1, sticky = 'ew')\n\t\tself.valCausale = tk.StringVar()\n\t\tself.bind('<KeyPress-A>', partial(self.MostraCausale, self.valCausale, 4, 1, 'Causale'))\n\t\t\n\t\tself.labImporto = tk.Label(self.mf, text = 'IMPORTO [F1-F2]', borderwidth = 2, relief = 'raised')\n\t\tself.labImporto.grid(row = 5, column = 0, pady = 10, padx = 10, ipadx = 20, ipady = 10, columnspan = 1, sticky = 'ew')\n\t\tself.valImporto = tk.StringVar()\n\t\tself.valImporto.set('0,0')\n\t\tself.txtImporto = tk.Entry(self.mf, textvariable = self.valImporto, justify = tk.CENTER, width = 4)\n\t\tself.txtImporto.grid(row = 5, column = 1, ipadx = 10, ipady = 10, columnspan = 1, sticky = 'ew')\n\t\tself.bind('<KeyPress-F1>', partial(self.Calcola))\n\t\tself.bind('<KeyPress-F2>', partial(self.Multa))\n\t\tself.bind('<KeyPress-Escape>', partial(self.Esci))\n\t\t\n\tdef MostraNome(self, valore, riga, colonna, lab, event):\n\t\tself.txtNome = tk.Entry(self.mf, textvariable = valore, justify = tk.CENTER)\n\t\tself.txtNome.grid(row = riga, column = colonna, ipadx = 10, ipady = 10, columnspan = 2, sticky = 'ew')\n\t\tself.txtNome.bind('<KeyPress-Return>', partial(self.controllo, lab))\n\t\t\n\tdef MostraCognome(self, valore, riga, colonna, lab, event):\n\t\tself.txtCognome = tk.Entry(self.mf, textvariable = valore, justify = tk.CENTER)\n\t\tself.txtCognome.grid(row = riga, column = colonna, ipadx = 10, ipady = 10, columnspan = 2, sticky = 'ew')\n\t\tself.txtCognome.bind('<KeyPress-Return>', partial(self.controllo, lab))\n\t\t\n\tdef MostraCausale(self, valore, riga, colonna, lab, event):\n\t\tself.txtCausale = tk.Entry(self.mf, textvariable = valore, justify = tk.CENTER)\n\t\tself.txtCausale.grid(row = riga, column = colonna, ipadx = 10, ipady = 10, columnspan = 2, sticky = 'ew')\n\t\tself.txtCausale.bind('<KeyPress-Return>', partial(self.controllo, lab))\n\t\t\n\tdef controllo(self, val, event):\n\t\tif val == 'Nome':\n\t\t\tif len(self.valNomPre.get()) < 3:\n\t\t\t\tmessagebox.showerror('Errore nel NOME', 'Inserisci un nome valido')\n\t\t\telse:\n\t\t\t\tmessagebox.showinfo('NOME', f'Il nome e' {self.valNomPre.get()}')\n\t\t\t\tself.txtNome.configure(state = 'disabled')\n\t\telif val == 'Cognome':\n\t\t\tif len(self.valCogPre.get()) < 3:\n\t\t\t\tmessagebox.showerror('Errore nel COGNOME', 'Inserisci un cognome valido')\n\t\t\telse:\n\t\t\t\tmessagebox.showinfo('COGNOME', f'Il cognome e' {self.valCogPre.get()}')\n\t\t\t\tself.txtCognome.configure(state = 'disabled')\n\t\telif val == 'Causale':\n\t\t\tif len(self.valCausale.get()) < 3:\n\t\t\t\tmessagebox.showerror('Errore nella CAUSALE', 'Inserisci una causale valido')\n\t\t\telse:\n\t\t\t\tmessagebox.showinfo('MOTIVO', f'La causale della multa e' {self.valCausale.get()}')\n\t\t\t\tself.txtCausale.configure(state = 'disabled')\n\t\t\n\tdef Abilita(self, click, event):\n\t\tif click == 'singolo':\n\t\t\tself.tipoVeicolo.set(value = 'Motocicletta')\n\t\telif click == 'doppio':\n\t\t\tself.tipoVeicolo.set(value = 'Macchina')\n\t\t\n\tdef Calcola(self, event):\n\t\tNome = self.valNomPre.get()\n\t\tCognome = self.valCogPre.get()\n\t\tTipo = self.tipoVeicolo.get()\n\t\tCausale = self.valCausale.get()\n\t\tImporto = locale.atof(self.valImporto.get())\n\t\t\n\t\tif len(Nome) < 3:\n\t\t\tmessagebox.showerror('Errore nel NOME', 'Inserisci un nome valido')\n\t\telif len(Cognome) < 3:\n\t\t\tmessagebox.showerror('Errore nel COGNOME', 'Inserisci un cognome valido')\n\t\telif Tipo != 'Motocicletta' and Tipo != 'Macchina':\n\t\t\tmessagebox.showerror('Errore nel TIPO di VEICOLO', 'Inserire un tipo di veicolo')\n\t\telif len(Causale) < 3:\n\t\t\tmessagebox.showerror('Errore nella CAUSALE', 'Inserire una causale valido')\n\t\telif Importo < 0:\n\t\t\tmessagebox.showerror('Errore nell'IMPORTO', 'Inserire un importo valido')\n\t\telse:\n\t\t\tmessagebox.showinfo('MULTA', f'Cognome e Nome: {Cognome.capitalize()} {Nome.capitalize()}\n\nTipo veicolo: {Tipo}\n\nCausale: {Causale.capitalize()}\n\n\tImporto: €{Importo}')\n\t\t\t\n\tdef Multa(self, event):\n\t\tNome = self.valNomPre.get()\n\t\tCognome = self.valCogPre.get()\n\t\tTipo = self.tipoVeicolo.get()\n\t\tCausale = self.valCausale.get()\n\t\tImporto = locale.atof(self.valImporto.get())\n\t\t\n\t\tif len(Nome) < 3:\n\t\t\tmessagebox.showerror('Errore nel NOME', 'Inserisci un nome valido')\n\t\telif len(Cognome) < 3:\n\t\t\tmessagebox.showerror('Errore nel COGNOME', 'Inserisci un cognome valido')\n\t\telif Tipo != 'Motocicletta' and Tipo != 'Macchina':\n\t\t\tmessagebox.showerror('Errore nel TIPO di VEICOLO', 'Inserire un tipo di veicolo')\n\t\telif len(Causale) < 3:\n\t\t\tmessagebox.showerror('Errore nella CAUSALE', 'Inserire una causale valido')\n\t\telif Importo < 0:\n\t\t\tmessagebox.showerror('Errore nell'IMPORTO', 'Inserire un importo valido')\n\t\telse:\n\t\t\tMultaFile = open('Multa.txt', 'w')\n\t\t\tMultaFile.write(f'MULTA {datetime.today().strftime('%d-%m-%Y')}\n\nCognome e Nome: {Cognome.capitalize()} {Nome.capitalize()}\n\nTipo veicolo: {Tipo}\n\nCausale: {Causale.capitalize()}\n\n\tImporto: €{Importo}')\n\t\t\tMultaFile.close()\n\t\t\t\n\tdef Esci(self, event):\t\n\t\tself.destroy()\n\t\t\t\ndef MAIN():\n\tBIND = WidgetBind('PASERI | Widget Bind | MULTE')\n\tBIND.mainloop()\n\t\nMAIN()\n\n"],
				"prestetazione": "https://www.canva.com/design/DAFf5hzHtWk/s3-afKyTM_wJCJK62HGawQ/view?website#2:titolo",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/b512163f2cddd51bb8c3db6f7a7729dc86090866/PDF/bind.pdf"
			}
		]
	},
	
	{
	"keyword": ["Tkinter",
		    "widget",
		    "Canvas",
		    "grafica",
		    "2D",
		    "interattivo",
		    "forme geometriche",
		    "linee",
		    "testo",
		    "immagini",
		    "visualizzazioni",
		    "personalizzato",
		    "interfaccia utente",
		    "mouse",
		    "tastiera",
		    "interazione",
		    "metodi di disegno",
		    "colori",
		    "gradazioni",
		    "riempimenti",
		    "stili di linea",
		    "posizionamento",
		    "eventi",
		    "callback",
		    "risposte",
		    "eventi del mouse",
		    "eventi da tastiera",
		    "interazioni dinamiche",
		    "reattivo",
		    "applicazioni Python",
		    "versatilità",
		    "potenza",
		    "interfacce utente dinamiche",
		    "coinvolgente",
		    "interfaccia grafica",
		    "oggetti grafici",
		    "rettangoli",
		    "ovali",
		    "poligoni",
		    "movimento del cursore",
		    "callback",
		    "eventi del mouse",
		    "eventi da tastiera",
		    "dinamico",
		    "creativo",
		    "canvas virtuale",
		    "trasformazioni",
		    "animazioni",
		    "interattività",
		    "programmazione visiva",
		    "progettazione",
		    "creazione",
		    "modifica",
		    "punti di ancoraggio",
		    "scorrimento",
		    "riposizionamento",
		    "dimensioni",
		    "zoom",
		    "reticolo",
		    "sistema di coordinate",
		    "salvataggio",
		    "caricamento",
		    "impostazione dello sfondo",
		    "eliminazione degli oggetti",
		    "aggiornamento dinamico",
		    "ritaglio",
		    "pennello",
		    "editing di immagini",
		    "gestione degli errori",
		    "ottimizzazione",
		    "gestione degli eventi",
		    "grafica vettoriale",
		    "sfumature",
		    "trasparenza",
		    "effetti speciali",
		    "rotazione",
		    "ridimensionamento",
		    "gruppi",
		    "livelli",
		    "interpolazione",
		    "maschere",
		    "sovrapposizione",
		    "sfondo trasparente",
		    "disegno a mano libera",
		    "tracciamento del percorso",
		    "filtraggio",
		    "confini",
		    "disposizione",
		    "stile",
		    "scrittura",
		    "formattazione del testo",
		    "font",
		    "paragrafi",
		    "stile di paragrafo",
		    "allineamento del testo",
		    "scelta del colore",
		    "gestione degli oggetti",
		    "selezione",
		    "spostamento",
		    "copiatura",
		    "incollaggio",
		    "annullamento",
		    "ripristino",
		    "griglia",
		    "integrazione",
		    "sincronizzazione",
		    "guida",
		    "risoluzione",
		    "dimensione del pixel",
		    "visualizzazione",
		    "personalizzazione",
		    "panoramica",
		    "zoom",
		    "interazione multi-touch",
		    "rottura",
		    "clonazione",
		    "punti di ancoraggio",
		    "modifica delle proprietà",
		    "glossario",
		    "strumenti di disegno",
		    "pennello",
		    "matita",
		    "gomma",
		    "strumenti di selezione",
		    "rettangolo di selezione",
		    "selezione a mano libera",
		    "strumenti di trasformazione",
		    "traslazione",
		    "scala",
		    "rotazione",
		    "specchio",
		    "composizione",
		    "sovrapposizione",
		    "effetti",
		    "livelli",
		    "gestione dei livelli",
		    "organizzazione",
		    "apertura",
		    "salvataggio",
		    "esportazione",
		    "importazione",
		    "impostazioni",
		    "configurazione",
		    "personalizzazione",
		    "grafica interattiva",
		    "creazione di giochi",
		    "strumento di presentazione",
		    "programmazione visuale",
		    "interfaccia di progettazione",
		    "creazione di interfacce utente",
		    "elaborazione delle immagini",
		    "animazione",
		    "grafica per il web",
		    "disegno tecnico",
		    "progettazione di loghi",
		    "prototipazione",
		    "sviluppo di applicazioni",
		    "editing di immagini",
		    "creazione di elementi visivi",
		    "visualizzazione dei dati",
		    "creazione di diagrammi",
		    "progettazione di mappe"
	],
	"nome": "Zhou ChengHuan",
	"parte": [
			{
				"titolo": "Canvas",
				"corpo": "Il widget Canvas di Tkinter è un componente versatile e potente che consente di <strong>creare e manipolare grafiche 2D interattive</strong>. Conosciuto per la sua <strong>flessibilità</strong>, il Canvas può essere utilizzato per <strong>disegnare forme geometriche</strong>, linee, testo e persino immagini all'interno di una finestra o di un frame dell'interfaccia utente. \nGrazie al Canvas, <strong>è possibile creare visualizzazioni personalizzate e interattive</strong>, ad esempio grafici, diagrammi, mappe e molti altri elementi visivi. È possibile utilizzare il mouse e la tastiera per interagire con gli oggetti all'interno del Canvas, <strong>come selezionarli, trascinarli o effettuare clic su di essi per eseguire azioni specifiche</strong>. \nIl Canvas offre un'ampia gamma di metodi per disegnare e manipolare gli oggetti. È possibile <strong>creare rettangoli, ovali, poligoni e linee personalizzate utilizzando i metodi di disegno del Canvas</strong>. È anche possibile <strong>applicare colori, gradazioni, riempimenti e stili di linea per personalizzare l'aspetto degli oggetti</strong>. Inoltre, il Canvas supporta anche il posizionamento dei testi e delle immagini all'interno dell'area disegnabile.\n Un aspetto importante del Canvas è la sua capacità di associare eventi agli oggetti grafici. È possibile definire <strong>callback e risposte agli eventi del mouse</strong>, come clic del pulsante sinistro o movimento del cursore, o eventi da tastiera. Questo consente di creare <strong>interazioni dinamiche e reattive all'interno del Canvas</strong>. \nIn sintesi, il widget Canvas di Tkinter offre un'ampia gamma di funzionalità per la creazione di grafiche interattive personalizzate all'interno delle applicazioni Python. La sua versatilità e potenza lo rendono uno strumento essenziale per la creazione di interfacce utente dinamiche e coinvolgenti.",
				"code": ["https://gitlab.com/xkzyw/tkinter-canvas-editor"],
				"prestetazione": "<a href='https://gitlab.com/xkzyw/tkinter-canvas-editor/-/blob/main/doc/canvas.pdf'>https://gitlab.com/xkzyw/tkinter-canvas-editor/-/blob/main/doc/canvas.pdf</a>",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/d013f7723be2d871c7faaa11f32865a5610875a1/PDF/canvas.pdf"
			}
		]
	}


]
