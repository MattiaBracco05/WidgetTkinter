[	
	{
	"nome": "Alba Luca",
	"keyword": ["filedialog",
		    "file",
		    "finestra di dialogo file",
		    "finestra di dialogo"
	],
	"parte": [
			{
				"titolo": "Filedialog",
				"corpo": "Il filedialog è un widgets della tkinter, per poterlo utilizzare dovremmo importalo, in questo modo <strong>from tkinter import filedialog</strong>, una volta importato potremmo andare ad utilizzare lui e i suoi metodi. Le keyword principali del filediaog sono: <strong>title, initialdir, filetypes, defaultextension, initialfile e multiple.</strong> Invece i suoi metodi principali sono: <strong>askopenfile, asksaveasfile, askopenfilename, asksaveasfilename, askdirectory.</strong>",
				"code": ["#Presentazione - Checkbutton \n#De Boni Simone\n\nimport tkinter\nfrom tkinter import messagebox\nfrom functools import partial\nimport webbrowser\n\nclass Finestra(tkinter.Tk):\n    def __init__(self, nome):\n        super().__init__()\n        self.title('Presentazione Checkbutton, '+nome)\n        self.geometry('500x700')\n        self.resizable(1,1)\n        self.crea_widgets()\n\n    def crea_widgets(self):\n        titolo=tkinter.Frame()\n        titolo.grid()\n        titolo.configure(bg='lightgrey',padx=38)\n\n        tit=tkinter.Label(titolo, text='CHECKBUTTON E PARAMETRI', font=('Arial', 15, 'bold'), fg='grey', bg='lightgrey', height=2)\n        tit.grid(row=0, column=0, columnspan=3, rowspan=3)\n\n\n        mf=tkinter.Frame()\n        mf.grid()\n        self.configure(bg='lightgrey', padx=60, pady=10)\n        mf.configure(bg='grey')\n\n        self.check_lista=[]\n\n        for i in range(17):\n            self.scelta = tkinter.IntVar()\n            self.check_lista.append(self.scelta)\n            \n        B1=tkinter.Checkbutton(mf, text='1-activebackground', variable=self.check_lista[0], activebackground='grey')\n        #Attiva lo sfondo quando si clicca sul botton.\n        B1.grid(row=0, column=0, sticky='w', columnspan=3, padx=10, pady=10)\n\n        B2=tkinter.Checkbutton(mf, text='2-activeforeground', variable=self.check_lista[1], activeforeground='grey')\n        #Attiva il colore del testo quando si clicca sul button\n        B2.grid(row=1, column=0, sticky='we', padx=10, pady=10)\n\n        B3=tkinter.Checkbutton(mf, text='3-bg', variable=self.check_lista[2], bg='grey')\n        #Colorazione dello sfondo attiva quando non si clicca sul button.\n        B3.grid(row=2, column=0, sticky='we', padx=10, pady=10)\n\n        B4=tkinter.Checkbutton(mf, bitmap='error', variable=self.check_lista[3])\n        #Immagine di messaggio di errore al posto del testo, può cambiare in base ai parametri.\n        B4.grid(row=3, column=0, sticky='we', padx=10, pady=10)\n\n        B5=tkinter.Checkbutton(mf, text='5-bd', variable=self.check_lista[4], bd=10)\n        #Margine attorno ad ogni lato del button, di default vale 2 pixel.\n        B5.grid(row=4, column=0, sticky='we', padx=10, pady=10)\n\n        B6=tkinter.Checkbutton(mf, text='6-command', variable=self.check_lista[5], command=mf.master.destroy)\n        #Consente di attivare metodi e funzioni al click del bottone.\n        B6.grid(row=5, column=0, sticky='we', padx=10, pady=10)\n\n        B7=tkinter.Checkbutton(mf, text='7-cursor', variable=self.check_lista[6], cursor='dot')\n        #Cambia la forma del cursore al di sopra di questo button.\n        B7.grid(row=6, column=0, sticky='we', padx=10, pady=10)\n\n        B8=tkinter.Checkbutton(mf, text='8-font', variable=self.check_lista[7], font=('Arial', 15))\n        #Font del testo.\n        B8.grid(row=8, column=0, sticky='we', padx=10, pady=10)\n\n        B9=tkinter.Checkbutton(mf, text='9-fg', variable=self.check_lista[8], fg='grey')\n        #Colore del testo.\n        B9.grid(row=9, column=0, sticky='we', padx=10, pady=10)\n\n        B10=tkinter.Checkbutton(mf, text='10-height', variable=self.check_lista[9], height=5)\n        #Altezza del button.\n        B10.grid(row=10, column=0, sticky='we', padx=10, pady=10)\n\n        B11=tkinter.Checkbutton(mf, text='11-image', variable=self.check_lista[10], command=partial(self.creaImmagine, mf))\n        #Immagini come dei button grazie agli oggetti photoimage.\n        B11.grid(row=0, column=1, sticky='we', padx=10, pady=10)\n\n        B12=tkinter.Checkbutton(mf, text='12-justify \n altra riga', anchor='e', variable=self.check_lista[11], justify=tkinter.CENTER)\n        #Se il testo contiene più righe, questa opzione controlla la giustificazione del testo: CENTRO, SINISTRA o DESTRA.\n        B12.grid(row=1, column=1,sticky='we', padx=10, pady=10)\n\n        B13=tkinter.Checkbutton(mf, text='13-relief', variable=self.check_lista[12], relief=tkinter.GROOVE)\n        #Con il valore predefinito, relief=FLAT, il checkbutton non si distingue dal suo sfondo. Puoi impostare più stili.\n        B13.grid(row=2, column=1, sticky='we', padx=10, pady=10)\n\n        B14=tkinter.Checkbutton(mf, text='14-selectcolor', variable=self.check_lista[13], selectcolor='grey')\n        #Il colore del checkbutton quando è impostato. L'impostazione predefinita è selectcolor='rosso'.\n        B14.grid(row=3, column=1,sticky='we', padx=10, pady=10)\n\n        B15=tkinter.Checkbutton(mf, text='15-state', variable=self.check_lista[14], state=tkinter.DISABLED)\n        #è possibile utilizzare state=DISABLED per disattivare il controllo e renderlo non rispondente.\n        B15.grid(row=4, column=1, sticky='we', padx=10, pady=10)\n\n        B16=tkinter.Checkbutton(mf, text='16-underline', variable=self.check_lista[15], underline=4)\n        #Si può sottolineare un carattere oppure tutto iò testo del button.\n        B16.grid(row=5, column=1, sticky='we', padx=10, pady=10)\n\n        B17=tkinter.Checkbutton(mf, text='17-wraplength', variable=self.check_lista[16], wraplength=5)\n        #suddividi in più righe anche testi di solo una parola.\n        B17.grid(row=6, column=1, sticky='we', rowspan=5, padx=10, pady=10)\n        #All'interno dei Checkbutton abbiamo il mainFrame, dove inseriremo il nostro widget,\n        #il testo da associare ai pulsanti e la variabile,\n        #che sarà proprio questa che permetterà di poter selezionare uno o più opzioni, grazie al suo valore\n        #di tipo intero, che può essere 0 o 1 (0 non selezionato, 1 selezionato). \n\n        butt=tkinter.Button(mf, text='VERIFICA', command=self.Dispensa)\n        butt.grid(row=11, column=0, columnspan=3, ipadx=30, ipady=10)\n\n\n    def creaImmagine(self, mf):\n        self.acceso = tkinter.PhotoImage(width=48, height=24)\n        self.spento = tkinter.PhotoImage(width=48, height=24)\n        self.acceso.put(('green',), to=(0, 0, 23,23))\n        self.spento.put(('red',), to=(24, 0, 47, 23))\n        #Creo i due oggetti PhotoImage e successivamente imposterò loro la grandezza,\n        #il colore che devono assumere, e la loro posizione.\n\n        self.var1 = tkinter.IntVar(value=1)\n        self.var2 = tkinter.IntVar()\n        cb1 = tkinter.Checkbutton(mf, image=self.spento, selectimage=self.acceso, indicatoron=False, variable=self.var1)\n        cb2 = tkinter.Checkbutton(mf, image=self.spento, selectimage=self.acceso, indicatoron=False, variable=self.var2)\n        cb1.grid(row=0, column=2, padx=20, pady=10)\n        cb2.grid(row=1, column=2, padx=20, pady=10)\n        #Creo i due checkbutton e grazie alle opzioni image e selectimage posso gestire le immagini\n        #che verranno mostrate sia quando il button è selezionato sia quando non lo è...\n        #grazie poi all'opzione indicatoron impostata a false posso gestire io l'indicatore della tkinter\n        #senza che usi quello predefinito.\n\n    def Dispensa(self):\n        if self.check_lista[0].get()==0 and self.check_lista[1].get()==0 and self.check_lista[2].get()==0 and self.check_lista[3].get()==0 and self.check_lista[4].get()==0 and self.check_lista[6].get()==0 and self.check_lista[7].get()==0 and self.check_lista[8].get()==0 and self.check_lista[9].get()==0 and self.check_lista[10].get()==0 and self.check_lista[11].get()==0 and self.check_lista[12].get()==0 and self.check_lista[13].get()==0 and self.check_lista[15].get()==0 and self.check_lista[16].get()==0:\n            webbrowser.open_new('https://www.canva.com/design/DAFfxoltwcg/O_sJAmSX29-pS-1xUnrVkw/edit?utm_content=DAFfxoltwcg&utm_campaign=designshare&utm_medium=link2&utm_source=sharebutton')\n        else:\n            selezionati = [i+1 for i, self.scelta in enumerate(self.check_lista) if self.scelta.get() == 1]\n            #creo una nuova lista SELEZIONATI dove all'interno salvo un valore, ovvero l'indice della lista CHECK_LISTA increementato di uno, che corrisponde a ogni\n            #elemento di tipo int var che ha valore==1.\n            messagebox.showinfo('Checkbutton selezionati', f'Sono stati selezionati i checkbutton numero: {selezionati}')\n            #stampo la lista che contiene i valori.\n\n            #la funzione enumerate() fornisce l'indice e il valore di ciascun elemento di una lista o tupla ecc...\ndef main():\n    f=Finestra('De Boni')\n    f.mainloop()\n\nmain()\n"],
				"prestetazione": "https://lucx-albx.github.io/Filedialog_guida/index.html",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/b02b65c884509e727d8d9232cfd012b78a51b4cb/PDF/filedialog.pdf"
			}
		]
	},
	
	{
	"nome": "Audisio Nicolo",
	"keyword": ["combobox",
		    "combo",
		    "box",
		    "menu",
		    "tendina",
		    "menu a tendina",
		    "selezione",
		    "scelta"
	],
	"parte": [
			{
				"titolo": "Combobox",
				"corpo": "La combobox serve per realizzare un menù a tendina",
				"code": ["# Audisio Combobox\nimport tkinter as tk\nfrom tkinter import ttk\nfrom tkinter import messagebox\n\nclass Finestra(tk.Tk):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.title('Audisio Combobox')\n\t\tself.geometry('500x500')\n\t\tself.resizable(0, 0)\n\t\tself.create_widgets()\n\n\tdef create_widgets(self):\n\t\topzioni = ['opzione 1', 'opzione 2', 'opzione 3']\n\n\t\tself.combo = ttk.Combobox(self, values=opzioni)\n\t\tself.combo.pack()\n\n\t\tself.button = tk.Button(self, text='Scelta', command=self.visualizza_selezione)\n\t\tself.button.pack()\n\n\tdef visualizza_selezione(self):\n\t\tselezione = self.combo.get()\n\t\ttk.messagebox.showinfo('Selezione', 'Hai selezionato: {}'.format(selezione))\n\nroot = Finestra()\nroot.mainloop()\n", "# Audisio esempio utilizzo Combobox\nimport tkinter as tk\nfrom tkinter import ttk\nfrom tkinter import messagebox\n\nclass Finestra(tk.Tk):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.title('Prenotazione Hotel')\n\t\tself.geometry('700x500')\n\t\tself.resizable(0, 0)\n\t\n\t# --- FUNZIONI ---\n\tdef prenota(self):\n\t\ttry:\n\t\t\twith open('prenotazioni.txt', 'a') as f:\n\t\t\t\tservizi = []\n\t\t\t\tif self.piscina.get() == True:\n\t\t\t\t\tservizi.append('Piscina')\n\t\t\t\tif self.parcheggio.get():\n\t\t\t\t\tservizi.append('Parcheggio')\n\t\t\t\tif self.wifi.get():\n\t\t\t\t\tservizi.append('Wi-Fi')\n\t\t\t\tservizi_str = ','.join(servizi) # unisce tutte le stringhe, inserendo la ','\n\t\t\t\tprenotazione = f'Ripilogo prenotazione\nIl sig. {self.cognome_entry.get()} {self.nome_entry.get()} ha prenotato una stanza {self.tipologia_camera.get()} per {self.notti.get()} notti\nServizi richiesti: {servizi_str}\nTipologia pensione: {self.combo.get()}\n'\n\t\t\t\tf.write(prenotazione)\n\t\t\t\tself.lbl_conferma.config(text = 'Prenotazione effettuata con successo!')\n\t\t\t\tself.lbl_conferma.config(fg = 'green')\n\t\texcept ValueError:\n\t\t\tmessagebox.showerror('Errore', 'Errore nell'inserimento dei dati')\n\n\n\tdef crea_widgets(self):\n\t\t# --- LABEL HOTEL BELLAVISTA\n\t\tlbl_hotel = tk.Label(self, text='Hotel Rimini', font=('Time New Romans', 20))\n\t\tlbl_hotel.pack(pady=20)\n\n\t\t# --- COGNOME E NOME---\n\t\tfrm_dati = tk.Frame(self)\n\t\tlbl_cognome = tk.Label(frm_dati, text='Cognome')\n\t\tlbl_cognome.pack(side=tk.LEFT, padx=10)\n\t\tself.cognome_entry = tk.Entry(frm_dati)\n\t\tself.cognome_entry.pack(side=tk.LEFT)\n\n\t\tlbl_nome = tk.Label(frm_dati, text='Nome')\n\t\tlbl_nome.pack(side=tk.LEFT, padx=10)\n\t\tself.nome_entry = tk.Entry(frm_dati)\n\t\tself.nome_entry.pack(side=tk.LEFT)\n\t\tfrm_dati.pack(pady=10)\n\n\t\t# --- SCELTA CAMERA ---\n\t\tlbl_camera = tk.Label(self, text='Tipologia camera: ')\n\t\tlbl_camera.pack()\n\t\tself.tipologia_camera = tk.StringVar()\n\t\tself.tipologia_camera.set('Singola')\n\t\trbt_singola = tk.Radiobutton(self, text='Singola', variable=self.tipologia_camera, value='Singola')\n\t\trbt_singola.pack()\n\t\trbt_matrimoniale = tk.Radiobutton(self, text='Matrimoniale', variable=self.tipologia_camera, value='Matrimoniale')\n\t\trbt_matrimoniale.pack()\n\n\t\t# --- NUMERO NOTTI ---\n\t\tlbl_notti = tk.Label(self, text='Numero notti')\n\t\tlbl_notti.pack()\n\t\tself.notti = tk.StringVar()\n\t\tself.notti.set('1')\n\t\tspin_notti = tk.Spinbox(self, from_=1, to=30, textvariable=self.notti)\n\t\tspin_notti.pack()\n\n\t\t# --- SCLETA PENSIONE ---\n\t\tlbl_piano = tk.Label(self, text='Tipologia di pensione')\n\t\tlbl_piano.pack()\n\t\topzioni = ['Solo colazione', 'Mezza pensione', 'Pensione completa']\n\t\tself.combo = ttk.Combobox(self, values=opzioni)\n\t\tself.combo.pack()\n\n\t\t# --- SERVIZI EXTRA ---\n\t\tlbl_serviziExtra = tk.Label(self, text='Servizi extra')\n\t\tlbl_serviziExtra.pack()\n\t\tself.piscina = tk.BooleanVar()\n\t\tchk_piscina = tk.Checkbutton(self, text='Piscina', variable=self.piscina)\n\t\tchk_piscina.pack()\n\t\tself.parcheggio = tk.BooleanVar()\n\t\tchk_parcheggio = tk.Checkbutton(self, text='Parcheggio', variable=self.parcheggio)\n\t\tchk_parcheggio.pack()\n\t\tself.wifi = tk.BooleanVar()\n\t\tchk_wifi = tk.Checkbutton(self, text='Wi-Fi', variable=self.wifi)\n\t\tchk_wifi.pack()\n\n\t\t# --- BOTTONE PRENOTA ---\n\t\tbtn_prenota = tk.Button(self, text='Prenota', command=self.prenota)\n\t\tbtn_prenota.pack(pady=20)\n\n\t\t# --- LABLE CONFERMA ---\n\t\tself.lbl_conferma = tk.Label(self, text='')\n\t\tself.lbl_conferma.pack()\n\nroot = Finestra()\nroot.crea_widgets()\nroot.mainloop()\n"],
				"prestetazione": "https://www.canva.com/design/DAFf5Z9IVkc/ZrCsjbfqrUjtNL6F_jkIfQ/view?website#2",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/80470f4bda4e82594b356994c42520ab3d74a6f2/PDF/combobox.pdf"
			}
		]
	},	
	
	{
	"nome": "Barra Leonardo",
	"keyword": ["spinbox",
		    "spin",
		    "box",
		    "selezione"
	],
	"parte": [
			{
				"titolo": "Spinbox",
				"corpo": "Lo spinbox è un widget di tkinter che consente all'utente di selezionare un valore da una lista predefinita di opzioni. Tuttavia, a differenza della casella di testo, lo spinbox ha dei bottoni di incremento e decremento che consentono all'utente di selezionare un valore specifico nella lista.",
				"code": ["import tkinter as tk\n\n\ndef converti_temperatura():\n    celsius = float(celsius_var.get())\n    fahrenheit = (celsius * 9/5) + 32\n    fahrenheit_var.set(fahrenheit)\n\n\nroot = tk.Tk()\nroot.geometry('200x100')\n\n\n\ncelsius_var = tk.StringVar()\ncelsius_spinbox = tk.Spinbox(root, from_=-273.15, to=100, textvariable=celsius_var, increment=0.1)\ncelsius_spinbox.pack()\n\n\n\nconverti_button = tk.Button(root, text='Converti', command=converti_temperatura)\nconverti_button.pack()\n\n\n\nfahrenheit_var = tk.StringVar()\nfahrenheit_label = tk.Label(root, textvariable=fahrenheit_var)\nfahrenheit_label.pack()\n\n\nroot.mainloop()\n", "import tkinter as tk\n\n\ndef opzione_selezionata():\n    opzioneselezionata = opzione_var.get()\n    print(f'Opzione selezionata: {opzioneselezionata}')\n\n\n\nroot = tk.Tk()\nroot.geometry('200x100')\n\n\n\nopzioni = ['Opzione 1', 'Opzione 2', 'Opzione 3']\nopzione_var = tk.StringVar(value=opzioni[0])\nopzione_spinbox = tk.Spinbox(root, values=opzioni, textvariable=opzione_var)\nopzione_spinbox.pack()\n\n\n\nbutton = tk.Button(root, text='Mostra opzione', command=opzione_selezionata)\nbutton.pack()\n\n\nroot.mainloop()\n", "import tkinter as tk\n\n\ndef valida_numero(value):\n    if not value.isdigit():\n        return False\n    if int(value) < 0 or int(value) > 100:\n        return False\n    return True\n\n\ndef numeroselezionato():\n    numeroselezionato = numero_var.get()\n    print(f'numero selezionato: {numeroselezionato}')\n\n\nroot = tk.Tk()\nroot.geometry('200x100')\n\n\n\nnumero_var = tk.StringVar(value='0')\nnumero_spinbox = tk.Spinbox(root, from_=0, to=100, textvariable=numero_var, validate='key', validatecommand=(root.register(valida_numero), '%P'))\nnumero_spinbox.pack()\n\n\n\nshow_button = tk.Button(root, text='Mostra numero', command=numeroselezionato)\nshow_button.pack()\n\n\nroot.mainloop()\n", "import tkinter as tk\n\n\nroot = tk.Tk()\n\n\nnumero_var = tk.StringVar(value='0')\nnumero_spinbox = tk.Spinbox(root, from_=0, to=10, textvariable=numero_var, wrap=True)\nnumero_spinbox.pack()\n\n\nroot.mainloop()\n"],
				"prestetazione": "https://github.com/MattiaBracco05/WidgetTkinter/blob/d7dcf2687fa1d2dea20a7ecba4042430d3e4161f/PDF/spinbox.pdf",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/d7dcf2687fa1d2dea20a7ecba4042430d3e4161f/PDF/spinbox.pdf"
			}
		]
	},
	
	{
	"nome": "Bracco Mattia",
	"keyword": ["listbox",
		    "lista",
		    "list",
		    "scroll",
		    "scorrimento",
		    "tendina",
		    "menu",
		    "menù",
		    "opzioni",
		    "selezione",
		    "scelta"
	],
	"parte": [
			{
				"titolo": "Listbox",
				"corpo": "Attraverso una <strong>listbox</strong> l’utente può visualizzare una tendina contenente diverse opzioni fra le quali può effettuare delle selezioni.",
				"code": ["#4C Bracco Mattia - TKINTER Widget listbox\n\nimport tkinter\nfrom tkinter import ttk\nfrom tkinter import messagebox as mbox\n\nmioFont = ('Arial, 16')\n\nclass Finestra(tkinter.Tk):\n\t#Costruttore\n\tdef __init__(self, nome):\n\t\tsuper().__init__()\n\t\tself.title(nome)\n\t\tself.geometry('660x1000')\n\t\tself.resizable(0, 0)\n\t\tself.crea_widgets()\n\t#CREA WIDGETS\n\tdef crea_widgets(self):\n\t\tmf = tkinter.Frame(self) #Creo l'oggetto Main Frame (contenitore principale), ci deve sempre essere e contine i widget\n\t\tmf.grid() #Definisco il layout del Main Frame (in questo caso 'grid')\n\n\t\t#LABEL SELECTMODE\n\t\tlblSelectmode = tkinter.Label(mf, text='OPZIONI PER SELECTMODE')\n\t\tlblSelectmode.grid(row=0, column=0, columnspan=4, sticky=tkinter.EW)\n\n\t\t#LISTBOX ACCESSORI (selectmode = browse)\n\t\t#Label\n\t\tlblBrowse = tkinter.Label(mf, text='BROWSE', bg='blue')\n\t\tlblBrowse.grid(row=1, column=0, sticky=tkinter.EW)\n\t\t#Listbox\n\t\taccessori = ('Pasta', 'Bistecca', 'Carne', 'Pesce', 'Patatine', 'Verdura', 'Contorno', 'Dolce')\n\t\tvarAccessori = tkinter.Variable(value = accessori)\n\t\tlistAccessori = tkinter.Listbox(mf, listvariable=varAccessori, height=5, selectmode=tkinter.BROWSE)\n\t\tlistAccessori.grid(row=2, column=0)\n\n\t\t#LISTBOX CIBI (selectmode = extend)\n\t\t#Label\n\t\tlblBrowse = tkinter.Label(mf, text='EXTENDED', bg='yellow')\n\t\tlblBrowse.grid(row=1, column=1, sticky=tkinter.EW)\n\t\t#Listbox\n\t\tcibi = ('Pasta', 'Bistecca', 'Carne', 'Pesce', 'Patatine', 'Verdura', 'Contorno', 'Dolce')\n\t\tvarCibi = tkinter.Variable(value = cibi)\n\t\tlistCibi = tkinter.Listbox(mf, listvariable=varCibi, height=5, selectmode=tkinter.EXTENDED)\n\t\tlistCibi.grid(row=2, column=1)\n\n\t\t#LISTBOX AUTO (selectmode = single)\n\t\t#Label\n\t\tlblBrowse = tkinter.Label(mf, text='SINGLE', bg='green')\n\t\tlblBrowse.grid(row=1, column=2, sticky=tkinter.EW)\n\t\t#Listbox\n\t\tauto = ('Alfa Romeo', 'Fiat', 'Ford', 'Ferrari', 'Lamborgini', 'Maserati', 'Audi', 'Mercedes', 'BMW', 'Lancia', 'Volvo', 'Seat', 'Kia')\n\t\tvarAuto = tkinter.Variable(value = auto)\n\t\tlistAuto = tkinter.Listbox(mf, listvariable=varAuto, height=5, selectmode=tkinter.SINGLE)\n\t\tlistAuto.grid(row=2, column=2)\n\n\t\t#LISTBOX COLORI (selectmode = multiple)\n\t\t#Label\n\t\tlblBrowse = tkinter.Label(mf, text='MULTIPLE', bg='gray')\n\t\tlblBrowse.grid(row=1, column=3, sticky=tkinter.EW)\n\t\t#Listbox\n\t\tcolori = ('Giallo', 'Azzurro', 'Blu', 'Verde', 'Marrone', 'Nero', 'Giallo', 'Mercedes', 'BMW', 'Lancia', 'Volvo', 'Seat', 'Kia')\n\t\tvarColori = tkinter.Variable(value = colori)\n\t\tlistColori = tkinter.Listbox(mf, listvariable=varColori, height=5, selectmode=tkinter.MULTIPLE)\n\t\tlistColori.grid(row=2, column=3)\n\n\t\t#LABEL SCROLLBAR\n\t\tlblScrollbar = tkinter.Label(mf, text='SCROLLBAR')\n\t\tlblScrollbar.grid(row=3, column=0, columnspan=4, sticky=tkinter.EW)\n\n\t\t#Listbox\n\t\tlinguaggi = ('C#', 'C', 'C++', 'Python', 'Go', 'PHP', 'Swift', 'HTML', 'CSS', 'JSON', 'XML', 'JavaScript', 'Java')\n\t\tvarLinguaggi = tkinter.Variable(value = linguaggi)\n\t\tlistLinguaggi = tkinter.Listbox(mf, listvariable=varLinguaggi, height=8, selectmode=tkinter.BROWSE)\n\t\tlistLinguaggi.grid(row=4, column=0)\n\t\t#Scrollbar\n\t\tscrollbar = ttk.Scrollbar(mf, orient=tkinter.VERTICAL, command=listLinguaggi.yview)\n\t\tlistLinguaggi['yscrollcommand'] = scrollbar.set\n\t\tscrollbar.grid(row=4, column=1, sticky=tkinter.NS)\n\n\t\t#LABEL OPERAZIONI\n\t\tlblOperazioni = tkinter.Label(mf, text='OPERAZIONI SULLE LISTE (Vedere codice)')\n\t\tlblOperazioni.grid(row=5, column=0, columnspan=4, sticky=tkinter.EW)\n\n\t\t#Listbox di partenza\n\t\tnomi = ('Alessio', 'Francesco', 'Pietro', 'Paolo', 'Giuseppe', 'Gabriele', 'Edoardo', 'Leonardo', 'Davide')\n\t\tvarNomi = tkinter.Variable(value = nomi)\n\t\tlistNomi = tkinter.Listbox(mf, listvariable=varNomi, height=8, selectmode=tkinter.BROWSE)\n\t\tlistNomi.grid(row=6, column=0)\n\t\t#Inserisco un nome in posizione 0 ('Mattia')\n\t\tlistNomi.insert(0, 'Mattia')\n\t\t#Elimino il nome nella posizione 2 ('Francesco')\n\t\tlistNomi.delete(2)\n\n\t\t#LABEL SELEZIONE\n\t\tlblSelezione = tkinter.Label(mf, text='VALORE SELEZIONATO')\n\t\tlblSelezione.grid(row=7, column=0, columnspan=4, sticky=tkinter.EW)\n\n\t\t#Listbox\n\t\tsport = ('Calcio', 'Pallavolo', 'Basket', 'Rugby', 'Tennis', 'Nuoto', 'Padel', 'Atletica')\n\t\tvarSport = tkinter.Variable(value = sport)\n\t\tself.listSport = tkinter.Listbox(mf, listvariable=varSport, height=8, selectmode=tkinter.BROWSE)\n\t\tself.listSport.grid(row=8, column=0)\n\t\t#Button\n\t\tbtnConferma = tkinter.Button(mf, text='CONFERMA', command=self.stampaSelezione, bg='lightgreen')\n\t\tbtnConferma.grid(row=8, column=1)\n\n\t\t#BUTTON ESCI\n\t\tbtnEsci = tkinter.Button(mf, text='ESCI', command=self.destroy, bg='red')\n\t\tbtnEsci.grid(row=9, column=0, columnspan=4, sticky=tkinter.EW)\n\n\t#STAMPA SELEZIONE\n\tdef stampaSelezione(self):\n\t\tfor i in self.listSport.curselection():\n\t\t\tprint(self.listSport.get(i))\n\t\t\tmbox.showinfo('Selezione', self.listSport.get(i))\n\ndef main():\n\tf = Finestra('Widget Listbox')\n\tf.mainloop()\nmain()\n"],
				"prestetazione": "https://www.canva.com/design/DAFjQ92SnEc/yA9rRmbWWskjgwc2dvlilQ/view?website#2L",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/938259b864fdc6218d2cdddbb08927ae2c1afffa/PDF/listbox.pdf"
			}
		]
	},
	
	{
	"nome": "Culasso Edoardo",
	"keyword": ["radiobutton",
		    "radiobutton",
		    "radio",
		    "il radiobutton",
		    "selezionare",
		    "pallino rotondo"
	],
	"parte": [
			{
				"titolo": "Radiobutton",
				"corpo": "Il <strong>Radiobutton</strong> è un <strong>widget della tkinter</strong> che ti permette di <strong>selezionare</strong> una cosa di un gruppo di oggetti, e per utilizzarlo non serve importare cose tranne la tkinter e si crea così: <strong>tk.Radiobutton.</strong>",
				"code": ["import tkinter as tk\nfrom functools import partial\nfrom tkinter import messagebox\n\nclass Finestra(tk.Tk):\n\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.title('Progetto Pasqua Radiobutton')\n\t\tself.geometry('600x600')\n\t\tself.resizable(0,0)\n\t\tself.crea_widgets()\n\t\t\n\tdef crea_widgets(self):\n\t\tfin = tk.Frame(self)\n\t\tfin.place(rely = 0.4, relx = 0.5, anchor = tk.CENTER) \n\t\tfin.option_add('*Label*Font', 'TkDefaultFont 11')\n\t\t\n\t\t#label titolo\n\t\tlblt = tk.Label(fin, text = 'Progetto Radio button', font = ('TkDefaultFont', 16, 'bold'))\n\t\tlblt.grid(row = 0, column = 1, columnspan = 4, padx = 10, pady = 10, sticky = 'WE')\n\t\t\n\t\t#label prima domanda\n\t\tlbl1 = tk.Label(fin, text = 'Quando è scoppiata la prima guerra mondiale?')\n\t\tlbl1.grid(row = 1, column = 1)\n\t\t\n\t\t#radio sbagliato\n\t\tself.val = tk.IntVar() \n\t\tself.radio1 = tk.Radiobutton(fin, text = '1945', value = 1, variable = self.val, activeforeground = 'green', cursor = 'dot', relief = tk.RAISED)\n\t\tself.radio1.grid(row = 2, column = 1)\n\t\t\n\t\t#radio giusto\n\t\tself.radio2 = tk.Radiobutton(fin, text = '1914', value = 2, variable = self.val, activeforeground = 'red', cursor = 'dot', relief = tk.RAISED)\n\t\tself.radio2.grid(row = 2, column = 2)\n\t\t\n\t\t#label seconda domanda\n\t\tlbl2 = tk.Label(fin, text = 'Quando è scoppiata la seconda guerra mondiale?')\n\t\tlbl2.grid(row = 3, column = 1)\n\t\t\n\t\t#radio giusto\n\t\tself.val1 = tk.IntVar() \n\t\tself.radio3 = tk.Radiobutton(fin, text = '1939', value = 1, variable = self.val1, activeforeground = 'red', cursor = 'dot', relief = tk.RAISED)\n\t\tself.radio3.grid(row = 4, column = 1)\n\t\tself.radio3.invoke()\n\t\t\n\t\t#radio sbagliato\n\t\tself.radio4 = tk.Radiobutton(fin, text = '1960', value = 2, variable = self.val1, activeforeground = 'green', cursor = 'dot', relief = tk.RAISED)\n\t\tself.radio4.grid(row = 4, column = 2)\n\t\t\n\t\t#label terza domanda\n\t\tlbl3 = tk.Label(fin, text = 'Chi ha inventato la macchina a vapore?')\n\t\tlbl3.grid(row = 5, column = 1)\n\t\t\n\t\t#radio giusto\n\t\tself.val2 = tk.IntVar() \n\t\tself.radio5 = tk.Radiobutton(fin, text = 'Thomas Newcomen', value = 1, variable = self.val2, activeforeground = 'red', cursor = 'dot', relief = tk.RAISED)\n\t\tself.radio5.grid(row = 6, column = 1)\n\t\t\n\t\t#radio sbagliato\n\t\tself.radio6 = tk.Radiobutton(fin, text = 'James Watt', value = 2, variable = self.val2, activeforeground = 'green', cursor = 'dot', relief = tk.RAISED)\n\t\tself.radio6.grid(row = 6, column = 2)\n\t\t\n\t\t#label quarta domanda\n\t\tlbl4 = tk.Label(fin, text = 'La tupla è mutabile o immutabile?')\n\t\tlbl4.grid(row = 7, column = 1)\n\t\t\n\t\t#radio sbagliato\n\t\tself.val3 = tk.IntVar() \n\t\tself.radio7 = tk.Radiobutton(fin, text = 'mutabile', value = 1, variable = self.val3, activeforeground = 'green', cursor = 'dot', relief = tk.SUNKEN)\n\t\tself.radio7.grid(row = 8, column = 1)\n\t\t\n\t\t#radio giusto\n\t\tself.radio8 = tk.Radiobutton(fin, text = 'immutabile', value = 2, variable = self.val3, activeforeground = 'red', cursor = 'dot', relief = tk.SUNKEN)\n\t\tself.radio8.grid(row = 8, column = 2)\n\t\t\n\t\t#label quinta domanda\n\t\tlbl5 = tk.Label(fin, text = 'Qual'è l'indirizzo ip privato di classe B?')\n\t\tlbl5.grid(row = 9, column = 1)\n\t\t\n\t\t#radio giusto\n\t\tself.val4 = tk.IntVar() \n\t\tself.radio9 = tk.Radiobutton(fin, text = '172.16.0.0', value = 1, variable = self.val4, activeforeground = 'red', cursor = 'dot', relief = tk.SUNKEN)\n\t\tself.radio9.grid(row = 10, column = 1)\n\t\t\n\t\t#radio sbagliato\n\t\tself.radio10 = tk.Radiobutton(fin, text = '172.32.0.0', value = 2, variable = self.val4, activeforeground = 'green', cursor = 'dot', relief = tk.SUNKEN)\n\t\tself.radio10.grid(row = 10, column = 2)\n\t\t\n\t\t#label sesta domanda\n\t\tlbl6 = tk.Label(fin, text = 'Come si calcola l'area del trapezio?')\n\t\tlbl6.grid(row = 11, column = 1)\n\t\t\n\t\t#radio sbagliato\n\t\tself.val5 = tk.IntVar() \n\t\tself.radio11 = tk.Radiobutton(fin, text = '(B+b)/2', value = 1, variable = self.val5, activeforeground = 'green', cursor = 'dot', relief = tk.SUNKEN)\n\t\tself.radio11.grid(row = 12, column = 1)\n\t\t\n\t\t#radio giusto\n\t\tself.radio12 = tk.Radiobutton(fin, text = '(B+b)*h/2', value = 2, variable = self.val5, activeforeground = 'red', cursor = 'dot', relief = tk.SUNKEN)\n\t\tself.radio12.grid(row = 12, column = 2)\n\t\t\n\t\t#bottone annulla\n\t\tbottAnn = tk.Button(fin, text = 'ANNULLA', command = partial(self.annulla, fin))\n\t\tbottAnn.grid(row = 13, column = 1)\n\t\t\n\t\t#bottone esci\n\t\tbottConf = tk.Button(fin, text = 'CONFERMA', command = self.conferma)\n\t\tbottConf.grid(row = 13, column = 2, pady = 10)\n\t\t\n\t\t#bottone esci\n\t\tbottEsci = tk.Button(fin, text = 'ESCI', command = self.destroy)\n\t\tbottEsci.grid(row = 14, column = 2, pady = 10)\n\t\t\n\t\t\n\tdef annulla(self, fint):\n\t\tfor radio in fint.winfo_children(): #nella finestra guarda tutti i widgets che ci sono\n\t\t\tif isinstance(radio, tk.Radiobutton): #guarda se radio è un istanza di Radiobutton\n\t\t\t\tradio.flash()\n\t\t\t\tradio.deselect()\n\t\t\t\tradio.configure(bg = 'light gray')\n\t\t\t\t\n\tdef conferma(self):\n\t\tpunti = 0\n\t\tvalore1 = self.val.get()\n\t\tvalore2 = self.val1.get()\n\t\tvalore3 = self.val2.get()\n\t\tvalore4 = self.val3.get()\n\t\tvalore5 = self.val4.get()\n\t\tvalore6 = self.val5.get() \n\t\t\n\t\tif valore1 == 2:\n\t\t\tpunti = punti + 1\n\t\t\tself.radio2.configure(bg = 'green')\n\t\telse:\n\t\t\tself.radio1.configure(bg = 'red')\n\t\t\t\n\t\tif valore2 == 1:\n\t\t\tpunti = punti + 1\n\t\t\tself.radio3.configure(bg = 'green')\n\t\telse:\n\t\t\tself.radio4.configure(bg = 'red')\n\t\t\t\n\t\tif valore3 == 1:\n\t\t\tpunti = punti + 1\n\t\t\tself.radio5.configure(bg = 'green')\n\t\telse:\n\t\t\tself.radio6.configure(bg = 'red')\n\t\t\t\n\t\tif valore4 == 2:\n\t\t\tpunti = punti + 1\n\t\t\tself.radio8.configure(bg = 'green')\n\t\telse:\n\t\t\tself.radio7.configure(bg = 'red')\n\t\t\n\t\tif valore5 == 1:\n\t\t\tpunti = punti + 1\n\t\t\tself.radio9.configure(bg = 'green')\n\t\telse:\n\t\t\tself.radio10.configure(bg = 'red')\n\t\t\t\n\t\tif valore6 == 2:\n\t\t\tpunti = punti + 1\n\t\t\tself.radio12.configure(bg = 'green')\n\t\telse:\n\t\t\tself.radio11.configure(bg = 'red')\n\t\t\n\t\tmessaggio = f'Hai totalizzato {punti} punti'\n\t\tmessagebox.showinfo('Punti', messaggio)\n\t\t\n\t\t\ndef main():\n\tf = Finestra()\n\tf.mainloop()\n\t\nif __name__ == '__main__':\n\tmain()\n\n"],
				"prestetazione": "https://www.canva.com/design/DAFjv-fRzZ8/1zKCOF67tyU0zaMZ1_LeVg/view?website#2:il-radiobutton",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/58b2f59b8c6bc8ebe4a9a1e408fc13337173052a/PDF/radioButton.pdf"
			}
		]
	},
	
	{
	"nome": "De Boni Simone",
	"keyword": ["checkbutton",
		    "check",
		    "button",
		    "selezione",
		    "scelta",
		    "pulsante",
		    "click"
	],
	"parte": [
			{
				"titolo": "Checkbutton",
				"corpo": "I checkbutton sono utilizzati per visualizzare una serie di opzioni all'utente come pulsanti di commutazione. Grazie a questo widget, della Tkinter, l'utente può selezionare una o più opzioni facendo clic sul pulsante corrispondente a ciascuna opzione.",
				"code": ["#Presentazione - Checkbutton \n#De Boni Simone\n\nimport tkinter\nfrom tkinter import messagebox\nfrom functools import partial\nimport webbrowser\n\nclass Finestra(tkinter.Tk):\n    def __init__(self, nome):\n        super().__init__()\n        self.title('Presentazione Checkbutton, '+nome)\n        self.geometry('500x700')\n        self.resizable(1,1)\n        self.crea_widgets()\n\n    def crea_widgets(self):\n        titolo=tkinter.Frame()\n        titolo.grid()\n        titolo.configure(bg='lightgrey',padx=38)\n\n        tit=tkinter.Label(titolo, text='CHECKBUTTON E PARAMETRI', font=('Arial', 15, 'bold'), fg='grey', bg='lightgrey', height=2)\n        tit.grid(row=0, column=0, columnspan=3, rowspan=3)\n\n\n        mf=tkinter.Frame()\n        mf.grid()\n        self.configure(bg='lightgrey', padx=60, pady=10)\n        mf.configure(bg='grey')\n\n        self.check_lista=[]\n\n        for i in range(17):\n            self.scelta = tkinter.IntVar()\n            self.check_lista.append(self.scelta)\n            \n        B1=tkinter.Checkbutton(mf, text='1-activebackground', variable=self.check_lista[0], activebackground='grey')\n        #Attiva lo sfondo quando si clicca sul botton.\n        B1.grid(row=0, column=0, sticky='w', columnspan=3, padx=10, pady=10)\n\n        B2=tkinter.Checkbutton(mf, text='2-activeforeground', variable=self.check_lista[1], activeforeground='grey')\n        #Attiva il colore del testo quando si clicca sul button\n        B2.grid(row=1, column=0, sticky='we', padx=10, pady=10)\n\n        B3=tkinter.Checkbutton(mf, text='3-bg', variable=self.check_lista[2], bg='grey')\n        #Colorazione dello sfondo attiva quando non si clicca sul button.\n        B3.grid(row=2, column=0, sticky='we', padx=10, pady=10)\n\n        B4=tkinter.Checkbutton(mf, bitmap='error', variable=self.check_lista[3])\n        #Immagine di messaggio di errore al posto del testo, può cambiare in base ai parametri.\n        B4.grid(row=3, column=0, sticky='we', padx=10, pady=10)\n\n        B5=tkinter.Checkbutton(mf, text='5-bd', variable=self.check_lista[4], bd=10)\n        #Margine attorno ad ogni lato del button, di default vale 2 pixel.\n        B5.grid(row=4, column=0, sticky='we', padx=10, pady=10)\n\n        B6=tkinter.Checkbutton(mf, text='6-command', variable=self.check_lista[5], command=mf.master.destroy)\n        #Consente di attivare metodi e funzioni al click del bottone.\n        B6.grid(row=5, column=0, sticky='we', padx=10, pady=10)\n\n        B7=tkinter.Checkbutton(mf, text='7-cursor', variable=self.check_lista[6], cursor='dot')\n        #Cambia la forma del cursore al di sopra di questo button.\n        B7.grid(row=6, column=0, sticky='we', padx=10, pady=10)\n\n        B8=tkinter.Checkbutton(mf, text='8-font', variable=self.check_lista[7], font=('Arial', 15))\n        #Font del testo.\n        B8.grid(row=8, column=0, sticky='we', padx=10, pady=10)\n\n        B9=tkinter.Checkbutton(mf, text='9-fg', variable=self.check_lista[8], fg='grey')\n        #Colore del testo.\n        B9.grid(row=9, column=0, sticky='we', padx=10, pady=10)\n\n        B10=tkinter.Checkbutton(mf, text='10-height', variable=self.check_lista[9], height=5)\n        #Altezza del button.\n        B10.grid(row=10, column=0, sticky='we', padx=10, pady=10)\n\n        B11=tkinter.Checkbutton(mf, text='11-image', variable=self.check_lista[10], command=partial(self.creaImmagine, mf))\n        #Immagini come dei button grazie agli oggetti photoimage.\n        B11.grid(row=0, column=1, sticky='we', padx=10, pady=10)\n\n        B12=tkinter.Checkbutton(mf, text='12-justify \n altra riga', anchor='e', variable=self.check_lista[11], justify=tkinter.CENTER)\n        #Se il testo contiene più righe, questa opzione controlla la giustificazione del testo: CENTRO, SINISTRA o DESTRA.\n        B12.grid(row=1, column=1,sticky='we', padx=10, pady=10)\n\n        B13=tkinter.Checkbutton(mf, text='13-relief', variable=self.check_lista[12], relief=tkinter.GROOVE)\n        #Con il valore predefinito, relief=FLAT, il checkbutton non si distingue dal suo sfondo. Puoi impostare più stili.\n        B13.grid(row=2, column=1, sticky='we', padx=10, pady=10)\n\n        B14=tkinter.Checkbutton(mf, text='14-selectcolor', variable=self.check_lista[13], selectcolor='grey')\n        #Il colore del checkbutton quando è impostato. L'impostazione predefinita è selectcolor='rosso'.\n        B14.grid(row=3, column=1,sticky='we', padx=10, pady=10)\n\n        B15=tkinter.Checkbutton(mf, text='15-state', variable=self.check_lista[14], state=tkinter.DISABLED)\n        #è possibile utilizzare state=DISABLED per disattivare il controllo e renderlo non rispondente.\n        B15.grid(row=4, column=1, sticky='we', padx=10, pady=10)\n\n        B16=tkinter.Checkbutton(mf, text='16-underline', variable=self.check_lista[15], underline=4)\n        #Si può sottolineare un carattere oppure tutto iò testo del button.\n        B16.grid(row=5, column=1, sticky='we', padx=10, pady=10)\n\n        B17=tkinter.Checkbutton(mf, text='17-wraplength', variable=self.check_lista[16], wraplength=5)\n        #suddividi in più righe anche testi di solo una parola.\n        B17.grid(row=6, column=1, sticky='we', rowspan=5, padx=10, pady=10)\n        #All'interno dei Checkbutton abbiamo il mainFrame, dove inseriremo il nostro widget,\n        #il testo da associare ai pulsanti e la variabile,\n        #che sarà proprio questa che permetterà di poter selezionare uno o più opzioni, grazie al suo valore\n        #di tipo intero, che può essere 0 o 1 (0 non selezionato, 1 selezionato). \n\n        butt=tkinter.Button(mf, text='VERIFICA', command=self.Dispensa)\n        butt.grid(row=11, column=0, columnspan=3, ipadx=30, ipady=10)\n\n\n    def creaImmagine(self, mf):\n        self.acceso = tkinter.PhotoImage(width=48, height=24)\n        self.spento = tkinter.PhotoImage(width=48, height=24)\n        self.acceso.put(('green',), to=(0, 0, 23,23))\n        self.spento.put(('red',), to=(24, 0, 47, 23))\n        #Creo i due oggetti PhotoImage e successivamente imposterò loro la grandezza,\n        #il colore che devono assumere, e la loro posizione.\n\n        self.var1 = tkinter.IntVar(value=1)\n        self.var2 = tkinter.IntVar()\n        cb1 = tkinter.Checkbutton(mf, image=self.spento, selectimage=self.acceso, indicatoron=False, variable=self.var1)\n        cb2 = tkinter.Checkbutton(mf, image=self.spento, selectimage=self.acceso, indicatoron=False, variable=self.var2)\n        cb1.grid(row=0, column=2, padx=20, pady=10)\n        cb2.grid(row=1, column=2, padx=20, pady=10)\n        #Creo i due checkbutton e grazie alle opzioni image e selectimage posso gestire le immagini\n        #che verranno mostrate sia quando il button è selezionato sia quando non lo è...\n        #grazie poi all'opzione indicatoron impostata a false posso gestire io l'indicatore della tkinter\n        #senza che usi quello predefinito.\n\n    def Dispensa(self):\n        if self.check_lista[0].get()==0 and self.check_lista[1].get()==0 and self.check_lista[2].get()==0 and self.check_lista[3].get()==0 and self.check_lista[4].get()==0 and self.check_lista[6].get()==0 and self.check_lista[7].get()==0 and self.check_lista[8].get()==0 and self.check_lista[9].get()==0 and self.check_lista[10].get()==0 and self.check_lista[11].get()==0 and self.check_lista[12].get()==0 and self.check_lista[13].get()==0 and self.check_lista[15].get()==0 and self.check_lista[16].get()==0:\n            webbrowser.open_new('https://www.canva.com/design/DAFfxoltwcg/O_sJAmSX29-pS-1xUnrVkw/edit?utm_content=DAFfxoltwcg&utm_campaign=designshare&utm_medium=link2&utm_source=sharebutton')\n        else:\n            selezionati = [i+1 for i, self.scelta in enumerate(self.check_lista) if self.scelta.get() == 1]\n            #creo una nuova lista SELEZIONATI dove all'interno salvo un valore, ovvero l'indice della lista CHECK_LISTA increementato di uno, che corrisponde a ogni\n            #elemento di tipo int var che ha valore==1.\n            messagebox.showinfo('Checkbutton selezionati', f'Sono stati selezionati i checkbutton numero: {selezionati}')\n            #stampo la lista che contiene i valori.\n\n            #la funzione enumerate() fornisce l'indice e il valore di ciascun elemento di una lista o tupla ecc...\ndef main():\n    f=Finestra('De Boni')\n    f.mainloop()\n\nmain()\n"],
				"prestetazione": "https://www.canva.com/design/DAFfxoltwcg/lcDB280uPfB-W28bXsCg-w/view?website#2",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/4d8548e0848f2b8eb80b7916ddd8c9439e936c5d/PDF/checkbutton.pdf"
			}
		]
	},
	
	{
	"nome": "Di Marco Mirko",
	"keyword": ["pack",
		    "pa",
		    "pac",
		    "p",
		    "layout",
		    "disposizione"
		],
	"parte": [
			{
				"titolo": "Pack",
				"corpo": "Il metodo <strong>pack()</strong> in Tkinter è utilizzato per posizionare e allineare i widget all'interno di un contenitore. È un modo semplice per organizzare i componenti di un'interfaccia grafica. Chiamando pack() su un widget, puoi specificare come desideri che venga posizionato nel suo contenitore padre. È possibile utilizzare opzioni aggiuntive come side (lato), fill (riempimento) e expand (espansione) per personalizzare ulteriormente il comportamento del widget. Il metodo pack() segue un layout predefinito, che di solito è un allineamento verticale dall'alto verso il basso. È un modo veloce e semplice per iniziare a posizionare i widget nella tua interfaccia grafica, ma potresti considerare metodi più avanzati se hai bisogno di layout più complessi.",
				"code": ["import tkinter as tk\nfrom tkinter import messagebox\nclass Finestra(tk.Tk):\n\tdef __init__(self,nome=''):\n\t\tsuper().__init__()\n\t\tself.title('Gestione '+ nome)\n\t\tself.geometry('750x450')\n\t\tself.resizable(1,1)\n\t\tself.creawidget()\n\tdef creawidget(self):\n\t\twidget1=tk.Label(self,text='expand=True || fill=y || side=top',bg='Red')\n\t\twidget1.pack(side='top',expand=True,fill='y')\n\t\t\n\t\t\n\t\twidget2=tk.Label(self,text='expand=False || fill=both || side=top',bg='green')\n\t\twidget2.pack(side='top',expand=False,fill='both')\n\t\t\n\t\t\n\t\twidget3=tk.Label(self,text='expand=True || fill=both || side=top',bg='yellow')\n\t\twidget3.pack(side='top',expand=True,fill='both')\n\t\t\n\t\tspace=tk.Label(self,text='')\n\t\tspace.pack(side='top',expand=True,fill='both')\n\t\t\n\t\t\n\t\twidget4=tk.Label(self,text='expand=True || fill=None || side=left',bg='Red')\n\t\twidget4.pack(side='left',expand=True,fill=None)\n\t\t\n\t\t\n\t\twidget5=tk.Label(self,text='expand=False || fill=y || side=left',bg='green')\n\t\twidget5.pack(side='left',expand=False,fill=None)\n\t\t\n\t\t\n\t\twidget6=tk.Label(self,text='expand=True || fill=x || side=left',bg='yellow')\n\t\twidget6.pack(side='left',expand=True,fill='x')\n\t\t\n\t\tspace2=tk.Label(self,text='')\n\t\tspace2.pack(side='top',expand=True,fill='both')\n\t\t\n\t\tspace3=tk.Label(self,text='')\n\t\tspace3.pack(side='top',expand=True,fill='both')\n\t\t\ndef main():\n\twin=Finestra('Pack')\n\twin.mainloop()\nmain()\n"],
				"prestetazione": "https://www.canva.com/design/DAFjvqZC4zg/KSeCEAxNBJbmyKQs8-NfyA/view",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/1a532b82e6c5c3646807e849462595678883dd5a/PDF/pack.pdf"
			}
		]
	},
	
	{
	"nome": "Dossetto Giuseppe",
	"keyword": ["text",
		    "widget",
		    "casella",
		    "testo",
		    "box",
		    "tk",
		    "tkinter"
		],
	"parte": [
			{
				"titolo": "Text",
				"corpo": "Il widget text della tkinter può essere usato sia per salvare l’input di testo dell’utente che per stampare del testo, in entrambi i casi su più linee.",
				"code": ["from tkinter import * \n\nclass textWidget(Tk):\n\t#costruttore\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.title('Text widget')\n\t\tself.geometry('610x830')\n\t\tself.resizable(0,0)\n\t\tself.crea_widgets()\n\t\tself.crea_widgets2()\n\t\tself.crea_widgets3()\n\n\t\t\n\t\t\n\tdef crea_widgets(self):\n\t\tmf=Frame(self)\n\t\tmf.grid()\n\t\t#Multi line Text widget \n\t\tself.lbl1=Label(mf,text='text come multiline input text') \n\t\tself.lbl1.grid(row=0,column=0)\n\n\t\tself.txtA = Text(mf, width=50, height=10, wrap= WORD) # creazione widjed width: numero colonne height: numero righe wrap: WORD=va a capo senza spezzare le parole CHAR= va a capo spezzando le parole\n\t\tself.txtA.grid(row=1,column=0) #inserisco widget  nel Frame\n\n\t\tself.btn=Button(mf,text='stampa testo',command=self.stampa)\n\t\tself.btn.grid(row=2,column=0,pady=2,padx=2)\n\n\t\tself.lbl2=Label(mf,text='text come multiline output text') \n\t\tself.lbl2.grid(row=3,column=0)\n\n\t\tself.txtA2 = Text(mf, width=50, height=10, wrap= CHAR,fg='blue',font=('Times New Roman',15),cursor='circle',padx=25,pady=5) # creazione widjed width: numero colonne height: numero righe wrap: WORD=va a capo senza spezzare le parole CHAR= va a capo spezzando le parole\n\t\tself.txtA2.grid(row=4,column=0) #inserisco widget  nel Frame\n\t\tself.txtA2['state'] = DISABLED # disabilito la casella di testo in modo che l'utente non ci possa scrivere\n\t\t\n\t\t\n\tdef crea_widgets2(self):\n\t\tmf2=Frame(self)\n\t\tmf2.grid()\n\n\t\tself.btn=Button(mf2,text='scrivo all inizio',command=self.SI)\n\t\tself.btn.grid(row=1,column=0,pady=2)\n\n\t\tself.btn=Button(mf2,text='scrivo alla fine',command=self.SF)\n\t\tself.btn.grid(row=1,column=1,pady=2)\n\t\t\n\n\n\t\tself.btn=Button(mf2,text='cancello tutto',command=self.CancAll)\n\t\tself.btn.grid(row=1,column=2,pady=2)\n\n\t\tself.btn=Button(mf2,text='colora primi 6 caratteri',command=self.colora)\n\t\tself.btn.grid(row=1,column=3,pady=2)\n\n\t\tself.btn=Button(mf2,text='elimina colore',command=self.eliminaColore)\n\t\tself.btn.grid(row=1,column=4,pady=2)\t\n\n\tdef crea_widgets3(self):\n\t\tmf=Frame(self)\n\t\tmf.grid(pady=30,padx=30)\n\t\tverticalScroll=Scrollbar(mf, orient=VERTICAL)  #creo la scrollbar, orient=VERTICAL imposta la scrollbar in verticale\n\t\thorizontalScroll=Scrollbar(mf, orient=HORIZONTAL) #creo la scrollbar, orient=HORIZONTAL imposta la scrollbar in orizzontale\n\n\t\tself.txtA = Text(mf, width=50, height=5, wrap= NONE,yscrollcommand=verticalScroll.set,xscrollcommand=horizontalScroll.set) # creazione widget width: numero colonne height: numero righe wrap: WORD=va a capo senza spezzare le parole CHAR= va a capo spezzando le parole y/xscrollcommad= richiama la set della scrollbar quando la scrollbar necessita di essere aggiornata (es. quando aggiungiamo o cancelliamo righe)\n\t\tself.txtA.grid(row=1,column=0) #inserisco widget  nel Frame\n\t\tself.txtA.insert('1.0','aaaaabbbbbbcccccddddddeeeeeeffffgggghhhhhhhhhaaaaaabbbbbcccccdddddeeeefffffggggg\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10')\n\t\t# self.txtA['state']=DISABLED\n\n\t\tverticalScroll.grid(row=1,column=2,sticky=W+N+S,rowspan=2) # inserisco il widget \n\t\thorizontalScroll.grid(row=2,column=0,sticky=W+E) # inserisco il widget  \n\n\t\tverticalScroll.config(command= self.txtA.yview)  # configuro la scrollbar il metodo yview della txtA viene richiamato quando agisco sulla scrollbar\n\t\thorizontalScroll.config(command= self.txtA.xview)  # configuro la scrollbar il metodo xview della txtA viene richiamato quando agisco sulla scrollbar\n\n\tdef stampa(self):\n\t\ttxt=self.txtA.get('1.0',END) # prende tutto il testo in txtA dalla righa 1 colonna 0 fino alla fine 'END'\n\t\tselected_text = self.txtA.selection_get()\n\t\tprint(txt)\n\t\t# selected_text = self.txtA.selection_get()  # Ottiene il testo selezionato\n\t\tself.txtA.tag_add('colored', 'sel.first', 'sel.last')  # Aggiunge il tag 'colored' alla selezione\n\t\tself.txtA.tag_config('colored', foreground='red')\n\n\n\tdef SI(self):\n\t\tself.txtA2['state']=NORMAL #abilito il widget in modo da poter scrivere\n\t\tself.txtA2.insert('1.0','Testo inizio ') # inserisco il testo all inizio riga 1 colonna 0\n\t\tself.txtA2['state']=DISABLED # disabilito la casella di testo in modo che l'utente non ci possa scrivere\n\n\tdef SF(self):\n\t\tself.txtA2['state']=NORMAL #abilito il widget in modo da poter scrivere\n\t\tself.txtA2.insert(END,'Testo fine ') # inserisco il testo alla fine END\n\t\tself.txtA2['state']=DISABLED # disabilito la casella di testo in modo che l'utente non ci possa scrivere\n\n\tdef CancAll(self):\n\t\tself.txtA2['state']=NORMAL #abilito il widget in modo da poter scrivere\n\t\tself.txtA2.delete('1.0',END) # cancello il testo da riga 1 colonna 0  fino alla fine\n\t\tself.txtA2['state']=DISABLED # disabilito la casella di testo in modo che l'utente non ci possa scrivere\n\n\tdef colora(self):\n\t\tself.txtA2['state']=NORMAL #abilito il widget in modo da poter scrivere\n\t\tself.txtA2.tag_add('rosso', '1.0', '1.6')  #aggiungo un tag a txtA2 dandogli il nome e il range di caratteri che influisce\n\t\tself.txtA2.tag_config('rosso', foreground='red', background='yellow') #configuro il tag 'rosso' in modo da rendere il colore del carattere rosso e evidenziarlo di giallo \n\t\tself.txtA2['state']=DISABLED # disabilito la casella di testo in modo che l'utente non ci possa scrivere\n\t\t\n\tdef eliminaColore(self):\n\t\tself.txtA2['state']=NORMAL #abilito il widget in modo da poter scrivere\n\t\tself.txtA2.tag_delete('rosso')  # elimino il tag 'rosso'\n\t\tself.txtA2['state']=DISABLED # disabilito la casella di testo in modo che l'utente non ci possa scrivere\n\t\t\ndef main():\n\tf=textWidget()\n\tf.mainloop()\n\n\nmain()\n\n"],
				"prestetazione": "https://www.canva.com/design/DAFjwAcdX3U/M8Uj3t3nlGZgYzxuvMXRDQ/view?website#2:text-widget-tkinter"
			}
		]
	},
		
	{
	"nome": "Giusiano Massimo",
	"keyword": ["scale",
		    "scala",
		    "scorri",
		    "sc",
		    "sca",
		    "scal"],
	"parte": [
			{
				"titolo": "Scale",
				"corpo": "Il Metodo Scale è uno dei widget di Tkinter utilizzato per creare una barra di scorrimento. Questo widget permette all'utente di selezionare un valore da un intervallo specifico.Il Metodo Scale può essere personalizzato per soddisfare le esigenze dello sviluppatore, ad esempio modificando l'intervallo di valori disponibili o cambiando il colore della barra di scorrimento. Il Metodo Scale può essere personalizzato per soddisfare le esigenze dell'utente. Ad esempio, è possibile modificare il colore della barra di scorrimento utilizzando il parametro troughcolor.Inoltre, è possibile modificare l'aspetto del cursore utilizzando il parametro sliderlength, che definisce la lunghezza del cursore rispetto alla larghezza della barra di scorrimento.",
				"code": ["import tkinter as tk\nfrom tkinter import messagebox\n\nclass ScaleWidget(tk.Tk):\n\tdef __init__(self, nome):\n\t\tsuper().__init__()\n\t\tself.title(nome)\n\t\tself.geometry('200x150')\n\t\tself.resizable(0,0)\n\t\tself.crea_widgets()\n\n\tdef crea_widgets(self):\n\t\tmf = tk.Frame(self)\n\t\tmf.grid()\n\n\t\t# Creazione di un widget Scale\n\t\tself.scale = tk.Scale(mf, from_=0, to=100, orient=tk.HORIZONTAL, command=self.update_value, sliderlength=20,resolution=0.5) #sliderlength è la largezza del cursore della barra\n\t\tself.scale.grid(row=0, column=0, columnspan=2, pady=10, sticky='ew')\n\n\t\t# Label per mostrare il valore attuale\n\t\tself.label = tk.Label(mf, text='Valore: ' + str(self.scale.get()))\n\t\tself.label.grid(row=1, column=0, pady=5)\n\n\t\t# Creazione di un pulsante per visualizzare il valore selezionato\n\t\tbutton = tk.Button(mf, text='Visualizza valore', command=self.visualizza_valore)\n\t\tbutton.grid(row=2, column=0,  pady=5)\n\n\t\t# Variabile per salvare il valore selezionato nella scala\n\t\tself.value = 0\n\n\tdef update_value(self, val):\n\t\t# Aggiorna il valore della variabile 'value' ogni volta che viene selezionato un nuovo valore nel Metodo Scale\n\t\tself.value = float(val)\n\t\t\n\t\t# Aggiorna il testo della label con il nuovo valore selezionato\n\t\tself.label.configure(text='Valore: ' + str(self.value))\n\n\t\t# Cambia il colore della barra in base al valore selezionato\n\t\tif self.value < 50:\n\t\t\tself.scale.configure(troughcolor='red')\n\t\telse:\n\t\t\tself.scale.configure(troughcolor='green')\n\n\tdef visualizza_valore(self):\n\t\t# Mostra il valore selezionato nel widget Scale\n\t\ttk.messagebox.showinfo('Valore selezionato', 'Il valore selezionato è: ' + str(self.value))\n\n\ndef main():\n\tf = ScaleWidget('Scale Widget')\n\tf.mainloop()\n\nmain()\n"],
				"prestetazione": "https://github.com/MattiaBracco05/WidgetTkinter/blob/3565f0b396afdd210c76a262173fd10d81327be0/PDF/scale.pdf",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/3565f0b396afdd210c76a262173fd10d81327be0/PDF/scale.pdf"
			}
		]
	},
	
	{
	"nome": "Martini Gabriele",
	"keyword": ["PanedWindow",
		    "window",
		    "pannello",
		    "ridimensiona",
		    "paned",
		    "trascina",
		    "espandi",
		    "riduci"
	],
	"parte": [
			{
				"titolo": "PanedWindow",
				"corpo": "Il <strong>PanedWindow</strong> è un <strong>contenitore</strong> in cui è possibile aggiungere dei widget (figli). Esso è suddiviso a <strong>fasce</strong>, che possono essere verticali o orizzontali (a seconda di come si decide di disporre i widget. Ogni fascia ha una maniglia. La particolarità di questo widget è che tramite le fasce possiamo andare a <strong>rimodellare</strong> lo spazio assegnato a ciascun widget figlio, ovviamente designando più <strong>spazio</strong> ad un widget l'altro ne avrà di meno. Un esempio pratico sono le varie 'pagine secondarie' degli editor di testo e/o foto/video.",
				"code": ["import tkinter as tk\nfrom tkinter import messagebox\nimport os\n\n\nclass Window(tk.Tk):\n\tdef __init__(self):\n\\tsuper().__init__()\n\t\tself.title('Panedwindow | Martini')\n\t\tself.geometry('650x500')\n\t\tself.resizable(True,True)\n\t\tself.configure(bg='grey')\n\n\t\tself.flagADD = False\n\n\t\tself.widget()\n\n\tdef widget(self):\n\t\tself.mainFrame = tk.Frame(self)\n\t\tself.mainFrame.grid()\n\t\tself.mainFrame.configure(bg='grey')\n\n\t\t# MAIN PW\n\t\tself.mainPW = tk.PanedWindow(self.mainFrame, bg='light grey', height=500, width=650, relief='ridge', bd=2, cursor='dotbox', handlepad=2, handlesize=10, opaqueresize=True, sashpad=10, sashwidth=5, showhandle=True, orient=tk.VERTICAL)\n\t\tself.mainPW.pack(fill=tk.BOTH, side=tk.TOP, expand=True)\n\n\t\t# TITLE\n\t\ttitle = tk.Label(self.mainFrame,bg='black',text='IL PANEDWINDOW\ndi Gabriele Martini',font=('Courier', 18,'bold'),fg='white')\n\t\ttitle.pack(fill=tk.BOTH,side=tk.TOP,pady=10)\n\n\t\t# PANEDWINDOW ROW 1\n\t\tself.pwR1 = tk.PanedWindow(self.mainFrame, bg='grey', height=100, relief='ridge', bd=2, cursor='dotbox', handlepad=2, handlesize=10, opaqueresize=True, sashpad=10, sashwidth=5, showhandle=True, orient=tk.HORIZONTAL)\n\t\tself.pwR1.pack(fill=tk.BOTH, side=tk.TOP, expand=True)\n\n\t\tself.b1 = tk.Button(self.mainFrame, text='.add', bg='#dcdcdc', width=21, command=self.methodAdd)\n\t\tself.b2 = tk.Button(self.mainFrame, text='.forget', bg='#dcdcdc', width=21, command=self.methodForget)\n\t\tself.infoR1 = tk.Button(self.mainFrame, text='INFO', bg='purple',command=self.Row1Info)\n\t\tself.pwR1.add(self.b1)\n\t\tself.pwR1.add(self.b2)\n\t\tself.pwR1.add(self.infoR1)\n\n\t\t# PANEDWINDOW ROW 2\n\t\tself.pwR2 = tk.PanedWindow(self.mainFrame, bg='grey', height=100, relief='solid', bd=5, cursor='dotbox', handlepad=40, handlesize=15, opaqueresize=True, sashpad=10, sashwidth=8, showhandle=True, orient=tk.HORIZONTAL)\n\t\tself.pwR2.pack(fill=tk.BOTH, side=tk.TOP, expand=True)\n\t\t\n\t\tself.b3 = tk.Button(self.mainFrame, text='.identify', bg='#dcdcdc', width=21, command=self.methodIdentify)\t\t\n\t\tself.b4 = tk.Button(self.mainFrame, text='.panecget', bg='#dcdcdc', width=21, command=self.methodPanecget)\n\t\tself.infoR2 = tk.Button(self.mainFrame, text='INFO', bg='purple',command=self.Row2Info)\n\t\tself.pwR2.add(self.b3)\n\t\tself.pwR2.add(self.b4)\n\t\tself.pwR2.add(self.infoR2)\n\t\t\n\t\t# PANEDWINDOW ROW 3\n\t\tself.pwR3 = tk.PanedWindow(self.mainFrame, bg='grey', height=100, relief='ridge', bd=8, cursor='dotbox', handlepad=48, handlesize=20, opaqueresize=True, sashpad=10, sashwidth=10, showhandle=True, orient=tk.HORIZONTAL)\n\t\tself.pwR3.pack(fill=tk.BOTH, side=tk.TOP, expand=True)\n\n\t\tself.b5 = tk.Button(self.mainFrame,text='.paneconfig',bg='#dcdcdc', width=21, command=self.methodPaneconfig)\n\t\tself.b6 = tk.Button(self.mainFrame,text='.panes',bg='#dcdcdc', width=21, command=self.methodPanes)\n\t\tself.infoR3 = tk.Button(self.mainFrame, text='INFO', bg='purple',command=self.Row3Info)\n\t\tself.pwR3.add(self.b5)\n\t\tself.pwR3.add(self.b6)\n\t\tself.pwR3.add(self.infoR3)\n\n\t\t# PANEDWINDOW ROW 4\n\t\tself.pwR4 = tk.PanedWindow(self.mainFrame, bg='grey', height=100, relief='solid', bd=10, cursor='dotbox', handlepad=55, handlesize=25, opaqueresize=True, sashpad=10, sashwidth=15, showhandle=True, orient=tk.HORIZONTAL)\n\t\tself.pwR4.pack(fill=tk.BOTH, side=tk.TOP, expand=True)\n\t\t\n\t\tself.b7 = tk.Button(self.mainFrame,text='.sash_coord',bg='#dcdcdc', width=21, command=self.methodSash_coord)\n\t\tself.b8 = tk.Button(self.mainFrame,text='.sash_place',bg='#dcdcdc', width=21, command=self.methodSash_place)\n\t\tself.infoR4 = tk.Button(self.mainFrame, text='INFO', bg='purple',command=self.Row4Info)\n\t\tself.pwR4.add(self.b7)\n\t\tself.pwR4.add(self.b8)\n\t\tself.pwR4.add(self.infoR4)\n\n\t\t# ADD IN THE MAIN PW\n\t\tself.mainPW.add(title)\n\t\tself.mainPW.add(self.pwR1)\n\t\tself.mainPW.add(self.pwR2)\n\t\tself.mainPW.add(self.pwR3)\n\t\tself.mainPW.add(self.pwR4)\n\n\tdef methodAdd(self):\n\t\tif self.flagADD == False:\n\t\t\tself.LabelAdd = tk.Label(self.mainFrame, text='Label agiunto', bg='green')\n\t\t\tself.pwR1.add(self.LabelAdd)\n\t\t\tself.flagADD = True\n\n\tdef methodForget(self):\n\t\tif self.flagADD == True:\n\t\t\tself.pwR1.forget(self.LabelAdd)\n\t\t\tself.flagADD = False\n\n\tdef methodIdentify(self):\n\t\tresult = self.pwR2.identify(384,10)\n\t\ttk.messagebox.showinfo(title='RETURN .identify', message='LEGENDA:\n- stringa vuota = finestra figlio;\n- fascia = (n, 'sash');\n- maniglia = (n, 'handle');\n RISULTATO = '+str(result))\n\n\tdef methodPanecget(self):\n\t\tresult = self.pwR2.panecget(self.b4,'sticky')\n\t\ttk.messagebox.showinfo(title='RETURN .panecget', message='RISULTATO(su quale lato aderisce il button) = '+str(result))\n\t\n\tdef methodPaneconfig(self):\n\t\tself.pwR3.paneconfig(self.b5,pady=10)\n\n\tdef methodPanes(self):\n\t\tresult = self.pwR3.panes()\n\t\ttk.messagebox.showinfo(title='RETURN .panes', message='RISULTATO(lista widget dentro il PanedWindow) = '+str(result))\n\n\tdef methodSash_coord(self):\n\t\tresult = self.pwR4.sash_coord(0)\n\t\ttk.messagebox.showinfo(title='RETURN .sash_coord', message='RISULTATO(coordinate fascia n.0) = '+str(result))\n\n\tdef methodSash_place(self):\n\t\tself.pwR4.sash_place(1,250,10)\n\n\tdef Row1Info(self):\n\t\ttk.messagebox.showinfo(title='INFO 1° PANEDWINDOW', message='bd(spessore bordo)=2px; handlepad(distanza della maniglia dalla parte sup.)=2px; handlesize(dimensone maniglia)=10px; sashwidth(larghezza fascia)=5px;')\n\t\n\tdef Row2Info(self):\n\t\ttk.messagebox.showinfo(title='INFO 2° PANEDWINDOW', message='bd(spessore bordo)=5px; handlepad(distanza della maniglia dalla parte sup.)=40px; handlesize(dimensone maniglia)=15px; sashwidth(larghezza fascia)=8px;')\n\n\tdef Row3Info(self):\n\t\ttk.messagebox.showinfo(title='INFO 3° PANEDWINDOW', message='bd(spessore bordo)=8px; handlepad(distanza della maniglia dalla parte sup.)=48px; handlesize(dimensone maniglia)=20px; sashwidth(larghezza fascia)=10px;')\n\t\n\tdef Row4Info(self):\n\t\ttk.messagebox.showinfo(title='INFO 4° PANEDWINDOW', message='bd(spessore bordo)=10px; handlepad(distanza della maniglia dalla parte sup.)=55px; handlesize(dimensone maniglia)=25px; sashwidth(larghezza fascia)=15px;')\n\n\ndef main():\n\tpulisci()\n\tw = Window()\n\tw.mainloop()\n\ndef pulisci():\n\tos.system('clear')\n\nmain()\n"],
				"prestetazione": "https://view.genial.ly/6431721d14a74800184df5b8/guide-python-tkinter-panedwindow",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/938259b864fdc6218d2cdddbb08927ae2c1afffa/PDF/panedWindow.pdf"
			}
		]
	},
	
	{
	"nome": "Minetti Leonardo",
	"keyword": ["menu",
		    "il menu",
		    "navbar",
		    "barra di navigazione",
		    "barra",
		    "menu()"
	],
	"parte": [
			{
				"titolo": "Menu",
				"corpo": "Il <strong>Menu</strong> è un componente grafico della libreria tkinter di Python. Consenste di creare un  menu a discesa, in cui l'utente può selezionare diverse opzioni. Il menu può essere posizionato in una finestra principale o in una finestra figlia, come una finestra di dialogo. Inoltre, può essere integrato con altri widget, come pulsanti o campi di testo, oppure checkbutton e radiobutton per fornire un'interfaccia utente più avanzata e personalizzata.",
				"code": ["import tkinter as tk\nfrom tkinter import messagebox\nimport os\n\n\nclass Window(tk.Tk):\n\tdef __init__(self):\n\\tsuper().__init__()\n\t\tself.title('Panedwindow | Martini')\n\t\tself.geometry('650x500')\n\t\tself.resizable(True,True)\n\t\tself.configure(bg='grey')\n\n\t\tself.flagADD = False\n\n\t\tself.widget()\n\n\tdef widget(self):\n\t\tself.mainFrame = tk.Frame(self)\n\t\tself.mainFrame.grid()\n\t\tself.mainFrame.configure(bg='grey')\n\n\t\t# MAIN PW\n\t\tself.mainPW = tk.PanedWindow(self.mainFrame, bg='light grey', height=500, width=650, relief='ridge', bd=2, cursor='dotbox', handlepad=2, handlesize=10, opaqueresize=True, sashpad=10, sashwidth=5, showhandle=True, orient=tk.VERTICAL)\n\t\tself.mainPW.pack(fill=tk.BOTH, side=tk.TOP, expand=True)\n\n\t\t# TITLE\n\t\ttitle = tk.Label(self.mainFrame,bg='black',text='IL PANEDWINDOW\ndi Gabriele Martini',font=('Courier', 18,'bold'),fg='white')\n\t\ttitle.pack(fill=tk.BOTH,side=tk.TOP,pady=10)\n\n\t\t# PANEDWINDOW ROW 1\n\t\tself.pwR1 = tk.PanedWindow(self.mainFrame, bg='grey', height=100, relief='ridge', bd=2, cursor='dotbox', handlepad=2, handlesize=10, opaqueresize=True, sashpad=10, sashwidth=5, showhandle=True, orient=tk.HORIZONTAL)\n\t\tself.pwR1.pack(fill=tk.BOTH, side=tk.TOP, expand=True)\n\n\t\tself.b1 = tk.Button(self.mainFrame, text='.add', bg='#dcdcdc', width=21, command=self.methodAdd)\n\t\tself.b2 = tk.Button(self.mainFrame, text='.forget', bg='#dcdcdc', width=21, command=self.methodForget)\n\t\tself.infoR1 = tk.Button(self.mainFrame, text='INFO', bg='purple',command=self.Row1Info)\n\t\tself.pwR1.add(self.b1)\n\t\tself.pwR1.add(self.b2)\n\t\tself.pwR1.add(self.infoR1)\n\n\t\t# PANEDWINDOW ROW 2\n\t\tself.pwR2 = tk.PanedWindow(self.mainFrame, bg='grey', height=100, relief='solid', bd=5, cursor='dotbox', handlepad=40, handlesize=15, opaqueresize=True, sashpad=10, sashwidth=8, showhandle=True, orient=tk.HORIZONTAL)\n\t\tself.pwR2.pack(fill=tk.BOTH, side=tk.TOP, expand=True)\n\t\t\n\t\tself.b3 = tk.Button(self.mainFrame, text='.identify', bg='#dcdcdc', width=21, command=self.methodIdentify)\t\t\n\t\tself.b4 = tk.Button(self.mainFrame, text='.panecget', bg='#dcdcdc', width=21, command=self.methodPanecget)\n\t\tself.infoR2 = tk.Button(self.mainFrame, text='INFO', bg='purple',command=self.Row2Info)\n\t\tself.pwR2.add(self.b3)\n\t\tself.pwR2.add(self.b4)\n\t\tself.pwR2.add(self.infoR2)\n\t\t\n\t\t# PANEDWINDOW ROW 3\n\t\tself.pwR3 = tk.PanedWindow(self.mainFrame, bg='grey', height=100, relief='ridge', bd=8, cursor='dotbox', handlepad=48, handlesize=20, opaqueresize=True, sashpad=10, sashwidth=10, showhandle=True, orient=tk.HORIZONTAL)\n\t\tself.pwR3.pack(fill=tk.BOTH, side=tk.TOP, expand=True)\n\n\t\tself.b5 = tk.Button(self.mainFrame,text='.paneconfig',bg='#dcdcdc', width=21, command=self.methodPaneconfig)\n\t\tself.b6 = tk.Button(self.mainFrame,text='.panes',bg='#dcdcdc', width=21, command=self.methodPanes)\n\t\tself.infoR3 = tk.Button(self.mainFrame, text='INFO', bg='purple',command=self.Row3Info)\n\t\tself.pwR3.add(self.b5)\n\t\tself.pwR3.add(self.b6)\n\t\tself.pwR3.add(self.infoR3)\n\n\t\t# PANEDWINDOW ROW 4\n\t\tself.pwR4 = tk.PanedWindow(self.mainFrame, bg='grey', height=100, relief='solid', bd=10, cursor='dotbox', handlepad=55, handlesize=25, opaqueresize=True, sashpad=10, sashwidth=15, showhandle=True, orient=tk.HORIZONTAL)\n\t\tself.pwR4.pack(fill=tk.BOTH, side=tk.TOP, expand=True)\n\t\t\n\t\tself.b7 = tk.Button(self.mainFrame,text='.sash_coord',bg='#dcdcdc', width=21, command=self.methodSash_coord)\n\t\tself.b8 = tk.Button(self.mainFrame,text='.sash_place',bg='#dcdcdc', width=21, command=self.methodSash_place)\n\t\tself.infoR4 = tk.Button(self.mainFrame, text='INFO', bg='purple',command=self.Row4Info)\n\t\tself.pwR4.add(self.b7)\n\t\tself.pwR4.add(self.b8)\n\t\tself.pwR4.add(self.infoR4)\n\n\t\t# ADD IN THE MAIN PW\n\t\tself.mainPW.add(title)\n\t\tself.mainPW.add(self.pwR1)\n\t\tself.mainPW.add(self.pwR2)\n\t\tself.mainPW.add(self.pwR3)\n\t\tself.mainPW.add(self.pwR4)\n\n\tdef methodAdd(self):\n\t\tif self.flagADD == False:\n\t\t\tself.LabelAdd = tk.Label(self.mainFrame, text='Label agiunto', bg='green')\n\t\t\tself.pwR1.add(self.LabelAdd)\n\t\t\tself.flagADD = True\n\n\tdef methodForget(self):\n\t\tif self.flagADD == True:\n\t\t\tself.pwR1.forget(self.LabelAdd)\n\t\t\tself.flagADD = False\n\n\tdef methodIdentify(self):\n\t\tresult = self.pwR2.identify(384,10)\n\t\ttk.messagebox.showinfo(title='RETURN .identify', message='LEGENDA:\n- stringa vuota = finestra figlio;\n- fascia = (n, 'sash');\n- maniglia = (n, 'handle');\n RISULTATO = '+str(result))\n\n\tdef methodPanecget(self):\n\t\tresult = self.pwR2.panecget(self.b4,'sticky')\n\t\ttk.messagebox.showinfo(title='RETURN .panecget', message='RISULTATO(su quale lato aderisce il button) = '+str(result))\n\t\n\tdef methodPaneconfig(self):\n\t\tself.pwR3.paneconfig(self.b5,pady=10)\n\n\tdef methodPanes(self):\n\t\tresult = self.pwR3.panes()\n\t\ttk.messagebox.showinfo(title='RETURN .panes', message='RISULTATO(lista widget dentro il PanedWindow) = '+str(result))\n\n\tdef methodSash_coord(self):\n\t\tresult = self.pwR4.sash_coord(0)\n\t\ttk.messagebox.showinfo(title='RETURN .sash_coord', message='RISULTATO(coordinate fascia n.0) = '+str(result))\n\n\tdef methodSash_place(self):\n\t\tself.pwR4.sash_place(1,250,10)\n\n\tdef Row1Info(self):\n\t\ttk.messagebox.showinfo(title='INFO 1° PANEDWINDOW', message='bd(spessore bordo)=2px; handlepad(distanza della maniglia dalla parte sup.)=2px; handlesize(dimensone maniglia)=10px; sashwidth(larghezza fascia)=5px;')\n\t\n\tdef Row2Info(self):\n\t\ttk.messagebox.showinfo(title='INFO 2° PANEDWINDOW', message='bd(spessore bordo)=5px; handlepad(distanza della maniglia dalla parte sup.)=40px; handlesize(dimensone maniglia)=15px; sashwidth(larghezza fascia)=8px;')\n\n\tdef Row3Info(self):\n\t\ttk.messagebox.showinfo(title='INFO 3° PANEDWINDOW', message='bd(spessore bordo)=8px; handlepad(distanza della maniglia dalla parte sup.)=48px; handlesize(dimensone maniglia)=20px; sashwidth(larghezza fascia)=10px;')\n\t\n\tdef Row4Info(self):\n\t\ttk.messagebox.showinfo(title='INFO 4° PANEDWINDOW', message='bd(spessore bordo)=10px; handlepad(distanza della maniglia dalla parte sup.)=55px; handlesize(dimensone maniglia)=25px; sashwidth(larghezza fascia)=15px;')\n\n\ndef main():\n\tpulisci()\n\tw = Window()\n\tw.mainloop()\n\ndef pulisci():\n\tos.system('clear')\n\nmain()\n"],
				"prestetazione": "https://www.canva.com/design/DAFgTFOfiqE/UBUQSn8L2OKHwWbduFQ9jQ/view?website#2",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/93441e5d14fa66680097be463cab8f051cc36459/PDF/menu.pdf"
			}
		]
	},
	
	{
	"nome": "Paseri Kevin",
	"keyword": ["bind",
		    "bind()",
		    "la bind()",
		    "la bind",
		    "metodo bind",
		    "eventi"
		],
	"parte": [
			{
				"titolo": "Il metodo bind",
				"corpo": "La <strong>bind()</strong> è un metodo che permette di associare a un widget qualunque il gestore di un evento. Assomiglia alla <strong>command</strong> del tk.Button per attivare il metodo associato in seguito al click del mouse, ma attraverso questo metodo potremmo anche gestire i tasti della tastiera, oltre ovviamente al mouse.",
				"code": ["import tkinter as tk\nfrom functools import partial\nfrom tkinter import messagebox\nfrom datetime import datetime\nimport locale\nlocale.setlocale(locale.LC_ALL, '')\n\nclass WidgetBind(tk.Tk):\n\tdef __init__(self, nome):\n\t\tsuper().__init__()\n\t\tself.title(nome)\n\t\tself.geometry('400x400')\n\t\tself.resizable(1, 1)\n\t\tself.creaWidgets()\n\t\t\n\tdef creaWidgets(self):\n\t\tself.mf = tk.Frame(self)\n\t\tself.mf.grid()\n\t\t\n\t\tself.valNomPre = tk.StringVar()\n\t\tself.labNomPre = tk.Label(self.mf, text = 'NOME [N]', borderwidth = 2, relief = 'raised')\n\t\tself.labNomPre.grid(row = 0, column = 0, pady = 10, padx = 10, ipadx = 20, ipady = 10, columnspan = 1, sticky = 'ew')\n\t\tself.bind('<KeyPress-N>', partial(self.MostraNome, self.valNomPre, 0, 1, 'Nome'))\n\t\t\n\t\tself.valCogPre = tk.StringVar()\n\t\tself.labNomPre = tk.Label(self.mf, text = 'COGNOME [C]', borderwidth = 2, relief = 'raised')\n\t\tself.labNomPre.grid(row = 1, column = 0, pady = 10, padx = 10, ipadx = 20, ipady = 10, columnspan = 1, sticky = 'ew')\n\t\tself.bind('<KeyPress-C>', partial(self.MostraCognome, self.valCogPre, 1, 1, 'Cognome'))\n\t\t\n\t\tself.tipo = tk.Label(self.mf, text = 'TIPO', borderwidth = 2, relief = 'raised')\n\t\tself.tipo.grid(row = 2, column = 0, pady = 10, padx = 10, ipadx = 20, ipady = 10, columnspan = 1, sticky = 'ew')\n\t\tself.tipo.bind('<ButtonPress-1>', partial(self.Abilita, 'singolo'))\n\t\tself.tipo.bind('<Double-Button-1>', partial(self.Abilita, 'doppio'))\n\t\tself.bind('<KeyPress-m>', partial(self.Abilita, 'singolo'))\n\t\tself.bind('<KeyPress-M>', partial(self.Abilita, 'doppio'))\n\t\t\n\t\tself.tipoVeicolo = tk.StringVar()\n\t\tself.moto = tk.Radiobutton(self.mf, text = 'Motocicletta  [m]', variable = self.tipoVeicolo, value = 'Motocicletta')\n\t\tself.macchina = tk.Radiobutton(self.mf, text = 'Macchina [M]', variable = self.tipoVeicolo, value = 'Macchina')\n\t\tself.moto.grid(row = 3, column = 1)\n\t\tself.macchina.grid(row = 3, column = 2)\n\t\t\n\t\tself.labCausale = tk.Label(self.mf, text = 'CAUSALE [A]', borderwidth = 2, relief = 'raised')\n\t\tself.labCausale.grid(row = 4, column = 0, pady = 10, padx = 10, ipadx = 20, ipady = 10, columnspan = 1, sticky = 'ew')\n\t\tself.valCausale = tk.StringVar()\n\t\tself.bind('<KeyPress-A>', partial(self.MostraCausale, self.valCausale, 4, 1, 'Causale'))\n\t\t\n\t\tself.labImporto = tk.Label(self.mf, text = 'IMPORTO [F1-F2]', borderwidth = 2, relief = 'raised')\n\t\tself.labImporto.grid(row = 5, column = 0, pady = 10, padx = 10, ipadx = 20, ipady = 10, columnspan = 1, sticky = 'ew')\n\t\tself.valImporto = tk.StringVar()\n\t\tself.valImporto.set('0,0')\n\t\tself.txtImporto = tk.Entry(self.mf, textvariable = self.valImporto, justify = tk.CENTER, width = 4)\n\t\tself.txtImporto.grid(row = 5, column = 1, ipadx = 10, ipady = 10, columnspan = 1, sticky = 'ew')\n\t\tself.bind('<KeyPress-F1>', partial(self.Calcola))\n\t\tself.bind('<KeyPress-F2>', partial(self.Multa))\n\t\tself.bind('<KeyPress-Escape>', partial(self.Esci))\n\t\t\n\tdef MostraNome(self, valore, riga, colonna, lab, event):\n\t\tself.txtNome = tk.Entry(self.mf, textvariable = valore, justify = tk.CENTER)\n\t\tself.txtNome.grid(row = riga, column = colonna, ipadx = 10, ipady = 10, columnspan = 2, sticky = 'ew')\n\t\tself.txtNome.bind('<KeyPress-Return>', partial(self.controllo, lab))\n\t\t\n\tdef MostraCognome(self, valore, riga, colonna, lab, event):\n\t\tself.txtCognome = tk.Entry(self.mf, textvariable = valore, justify = tk.CENTER)\n\t\tself.txtCognome.grid(row = riga, column = colonna, ipadx = 10, ipady = 10, columnspan = 2, sticky = 'ew')\n\t\tself.txtCognome.bind('<KeyPress-Return>', partial(self.controllo, lab))\n\t\t\n\tdef MostraCausale(self, valore, riga, colonna, lab, event):\n\t\tself.txtCausale = tk.Entry(self.mf, textvariable = valore, justify = tk.CENTER)\n\t\tself.txtCausale.grid(row = riga, column = colonna, ipadx = 10, ipady = 10, columnspan = 2, sticky = 'ew')\n\t\tself.txtCausale.bind('<KeyPress-Return>', partial(self.controllo, lab))\n\t\t\n\tdef controllo(self, val, event):\n\t\tif val == 'Nome':\n\t\t\tif len(self.valNomPre.get()) < 3:\n\t\t\t\tmessagebox.showerror('Errore nel NOME', 'Inserisci un nome valido')\n\t\t\telse:\n\t\t\t\tmessagebox.showinfo('NOME', f'Il nome e' {self.valNomPre.get()}')\n\t\t\t\tself.txtNome.configure(state = 'disabled')\n\t\telif val == 'Cognome':\n\t\t\tif len(self.valCogPre.get()) < 3:\n\t\t\t\tmessagebox.showerror('Errore nel COGNOME', 'Inserisci un cognome valido')\n\t\t\telse:\n\t\t\t\tmessagebox.showinfo('COGNOME', f'Il cognome e' {self.valCogPre.get()}')\n\t\t\t\tself.txtCognome.configure(state = 'disabled')\n\t\telif val == 'Causale':\n\t\t\tif len(self.valCausale.get()) < 3:\n\t\t\t\tmessagebox.showerror('Errore nella CAUSALE', 'Inserisci una causale valido')\n\t\t\telse:\n\t\t\t\tmessagebox.showinfo('MOTIVO', f'La causale della multa e' {self.valCausale.get()}')\n\t\t\t\tself.txtCausale.configure(state = 'disabled')\n\t\t\n\tdef Abilita(self, click, event):\n\t\tif click == 'singolo':\n\t\t\tself.tipoVeicolo.set(value = 'Motocicletta')\n\t\telif click == 'doppio':\n\t\t\tself.tipoVeicolo.set(value = 'Macchina')\n\t\t\n\tdef Calcola(self, event):\n\t\tNome = self.valNomPre.get()\n\t\tCognome = self.valCogPre.get()\n\t\tTipo = self.tipoVeicolo.get()\n\t\tCausale = self.valCausale.get()\n\t\tImporto = locale.atof(self.valImporto.get())\n\t\t\n\t\tif len(Nome) < 3:\n\t\t\tmessagebox.showerror('Errore nel NOME', 'Inserisci un nome valido')\n\t\telif len(Cognome) < 3:\n\t\t\tmessagebox.showerror('Errore nel COGNOME', 'Inserisci un cognome valido')\n\t\telif Tipo != 'Motocicletta' and Tipo != 'Macchina':\n\t\t\tmessagebox.showerror('Errore nel TIPO di VEICOLO', 'Inserire un tipo di veicolo')\n\t\telif len(Causale) < 3:\n\t\t\tmessagebox.showerror('Errore nella CAUSALE', 'Inserire una causale valido')\n\t\telif Importo < 0:\n\t\t\tmessagebox.showerror('Errore nell'IMPORTO', 'Inserire un importo valido')\n\t\telse:\n\t\t\tmessagebox.showinfo('MULTA', f'Cognome e Nome: {Cognome.capitalize()} {Nome.capitalize()}\n\nTipo veicolo: {Tipo}\n\nCausale: {Causale.capitalize()}\n\n\tImporto: €{Importo}')\n\t\t\t\n\tdef Multa(self, event):\n\t\tNome = self.valNomPre.get()\n\t\tCognome = self.valCogPre.get()\n\t\tTipo = self.tipoVeicolo.get()\n\t\tCausale = self.valCausale.get()\n\t\tImporto = locale.atof(self.valImporto.get())\n\t\t\n\t\tif len(Nome) < 3:\n\t\t\tmessagebox.showerror('Errore nel NOME', 'Inserisci un nome valido')\n\t\telif len(Cognome) < 3:\n\t\t\tmessagebox.showerror('Errore nel COGNOME', 'Inserisci un cognome valido')\n\t\telif Tipo != 'Motocicletta' and Tipo != 'Macchina':\n\t\t\tmessagebox.showerror('Errore nel TIPO di VEICOLO', 'Inserire un tipo di veicolo')\n\t\telif len(Causale) < 3:\n\t\t\tmessagebox.showerror('Errore nella CAUSALE', 'Inserire una causale valido')\n\t\telif Importo < 0:\n\t\t\tmessagebox.showerror('Errore nell'IMPORTO', 'Inserire un importo valido')\n\t\telse:\n\t\t\tMultaFile = open('Multa.txt', 'w')\n\t\t\tMultaFile.write(f'MULTA {datetime.today().strftime('%d-%m-%Y')}\n\nCognome e Nome: {Cognome.capitalize()} {Nome.capitalize()}\n\nTipo veicolo: {Tipo}\n\nCausale: {Causale.capitalize()}\n\n\tImporto: €{Importo}')\n\t\t\tMultaFile.close()\n\t\t\t\n\tdef Esci(self, event):\t\n\t\tself.destroy()\n\t\t\t\ndef MAIN():\n\tBIND = WidgetBind('PASERI | Widget Bind | MULTE')\n\tBIND.mainloop()\n\t\nMAIN()\n\n"],
				"prestetazione": "https://www.canva.com/design/DAFf5hzHtWk/s3-afKyTM_wJCJK62HGawQ/view?website#2:titolo",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/b512163f2cddd51bb8c3db6f7a7729dc86090866/PDF/bind.pdf"
			}
		]
	},
	
	{
	"keyword": ["barra di progresso","progress bar","progressione","scorrimento"],
	"nome": "Soave Sebastiano",
	"parte":[
			{
				"titolo": "Scroll Bar",
				"corpo": "la Scroll bar è un widget della tkinter che viene incluso dalla ttk che permette di avere una barra di progressione verticale orizontale  per dei download o barre di vita per dichiarare l'oggetto bassta fare ttk.Progressbar(MainFrame) ci sono 3 parametri fondamentali max , orient , mode",
				"code": ["#Presentazione - Checkbutton \n#De Boni Simone\n\nimport tkinter\nfrom tkinter import messagebox\nfrom functools import partial\nimport webbrowser\n\nclass Finestra(tkinter.Tk):\n    def __init__(self, nome):\n        super().__init__()\n        self.title('Presentazione Checkbutton, '+nome)\n        self.geometry('500x700')\n        self.resizable(1,1)\n        self.crea_widgets()\n\n    def crea_widgets(self):\n        titolo=tkinter.Frame()\n        titolo.grid()\n        titolo.configure(bg='lightgrey',padx=38)\n\n        tit=tkinter.Label(titolo, text='CHECKBUTTON E PARAMETRI', font=('Arial', 15, 'bold'), fg='grey', bg='lightgrey', height=2)\n        tit.grid(row=0, column=0, columnspan=3, rowspan=3)\n\n\n        mf=tkinter.Frame()\n        mf.grid()\n        self.configure(bg='lightgrey', padx=60, pady=10)\n        mf.configure(bg='grey')\n\n        self.check_lista=[]\n\n        for i in range(17):\n            self.scelta = tkinter.IntVar()\n            self.check_lista.append(self.scelta)\n            \n        B1=tkinter.Checkbutton(mf, text='1-activebackground', variable=self.check_lista[0], activebackground='grey')\n        #Attiva lo sfondo quando si clicca sul botton.\n        B1.grid(row=0, column=0, sticky='w', columnspan=3, padx=10, pady=10)\n\n        B2=tkinter.Checkbutton(mf, text='2-activeforeground', variable=self.check_lista[1], activeforeground='grey')\n        #Attiva il colore del testo quando si clicca sul button\n        B2.grid(row=1, column=0, sticky='we', padx=10, pady=10)\n\n        B3=tkinter.Checkbutton(mf, text='3-bg', variable=self.check_lista[2], bg='grey')\n        #Colorazione dello sfondo attiva quando non si clicca sul button.\n        B3.grid(row=2, column=0, sticky='we', padx=10, pady=10)\n\n        B4=tkinter.Checkbutton(mf, bitmap='error', variable=self.check_lista[3])\n        #Immagine di messaggio di errore al posto del testo, può cambiare in base ai parametri.\n        B4.grid(row=3, column=0, sticky='we', padx=10, pady=10)\n\n        B5=tkinter.Checkbutton(mf, text='5-bd', variable=self.check_lista[4], bd=10)\n        #Margine attorno ad ogni lato del button, di default vale 2 pixel.\n        B5.grid(row=4, column=0, sticky='we', padx=10, pady=10)\n\n        B6=tkinter.Checkbutton(mf, text='6-command', variable=self.check_lista[5], command=mf.master.destroy)\n        #Consente di attivare metodi e funzioni al click del bottone.\n        B6.grid(row=5, column=0, sticky='we', padx=10, pady=10)\n\n        B7=tkinter.Checkbutton(mf, text='7-cursor', variable=self.check_lista[6], cursor='dot')\n        #Cambia la forma del cursore al di sopra di questo button.\n        B7.grid(row=6, column=0, sticky='we', padx=10, pady=10)\n\n        B8=tkinter.Checkbutton(mf, text='8-font', variable=self.check_lista[7], font=('Arial', 15))\n        #Font del testo.\n        B8.grid(row=8, column=0, sticky='we', padx=10, pady=10)\n\n        B9=tkinter.Checkbutton(mf, text='9-fg', variable=self.check_lista[8], fg='grey')\n        #Colore del testo.\n        B9.grid(row=9, column=0, sticky='we', padx=10, pady=10)\n\n        B10=tkinter.Checkbutton(mf, text='10-height', variable=self.check_lista[9], height=5)\n        #Altezza del button.\n        B10.grid(row=10, column=0, sticky='we', padx=10, pady=10)\n\n        B11=tkinter.Checkbutton(mf, text='11-image', variable=self.check_lista[10], command=partial(self.creaImmagine, mf))\n        #Immagini come dei button grazie agli oggetti photoimage.\n        B11.grid(row=0, column=1, sticky='we', padx=10, pady=10)\n\n        B12=tkinter.Checkbutton(mf, text='12-justify \n altra riga', anchor='e', variable=self.check_lista[11], justify=tkinter.CENTER)\n        #Se il testo contiene più righe, questa opzione controlla la giustificazione del testo: CENTRO, SINISTRA o DESTRA.\n        B12.grid(row=1, column=1,sticky='we', padx=10, pady=10)\n\n        B13=tkinter.Checkbutton(mf, text='13-relief', variable=self.check_lista[12], relief=tkinter.GROOVE)\n        #Con il valore predefinito, relief=FLAT, il checkbutton non si distingue dal suo sfondo. Puoi impostare più stili.\n        B13.grid(row=2, column=1, sticky='we', padx=10, pady=10)\n\n        B14=tkinter.Checkbutton(mf, text='14-selectcolor', variable=self.check_lista[13], selectcolor='grey')\n        #Il colore del checkbutton quando è impostato. L'impostazione predefinita è selectcolor='rosso'.\n        B14.grid(row=3, column=1,sticky='we', padx=10, pady=10)\n\n        B15=tkinter.Checkbutton(mf, text='15-state', variable=self.check_lista[14], state=tkinter.DISABLED)\n        #è possibile utilizzare state=DISABLED per disattivare il controllo e renderlo non rispondente.\n        B15.grid(row=4, column=1, sticky='we', padx=10, pady=10)\n\n        B16=tkinter.Checkbutton(mf, text='16-underline', variable=self.check_lista[15], underline=4)\n        #Si può sottolineare un carattere oppure tutto iò testo del button.\n        B16.grid(row=5, column=1, sticky='we', padx=10, pady=10)\n\n        B17=tkinter.Checkbutton(mf, text='17-wraplength', variable=self.check_lista[16], wraplength=5)\n        #suddividi in più righe anche testi di solo una parola.\n        B17.grid(row=6, column=1, sticky='we', rowspan=5, padx=10, pady=10)\n        #All'interno dei Checkbutton abbiamo il mainFrame, dove inseriremo il nostro widget,\n        #il testo da associare ai pulsanti e la variabile,\n        #che sarà proprio questa che permetterà di poter selezionare uno o più opzioni, grazie al suo valore\n        #di tipo intero, che può essere 0 o 1 (0 non selezionato, 1 selezionato). \n\n        butt=tkinter.Button(mf, text='VERIFICA', command=self.Dispensa)\n        butt.grid(row=11, column=0, columnspan=3, ipadx=30, ipady=10)\n\n\n    def creaImmagine(self, mf):\n        self.acceso = tkinter.PhotoImage(width=48, height=24)\n        self.spento = tkinter.PhotoImage(width=48, height=24)\n        self.acceso.put(('green',), to=(0, 0, 23,23))\n        self.spento.put(('red',), to=(24, 0, 47, 23))\n        #Creo i due oggetti PhotoImage e successivamente imposterò loro la grandezza,\n        #il colore che devono assumere, e la loro posizione.\n\n        self.var1 = tkinter.IntVar(value=1)\n        self.var2 = tkinter.IntVar()\n        cb1 = tkinter.Checkbutton(mf, image=self.spento, selectimage=self.acceso, indicatoron=False, variable=self.var1)\n        cb2 = tkinter.Checkbutton(mf, image=self.spento, selectimage=self.acceso, indicatoron=False, variable=self.var2)\n        cb1.grid(row=0, column=2, padx=20, pady=10)\n        cb2.grid(row=1, column=2, padx=20, pady=10)\n        #Creo i due checkbutton e grazie alle opzioni image e selectimage posso gestire le immagini\n        #che verranno mostrate sia quando il button è selezionato sia quando non lo è...\n        #grazie poi all'opzione indicatoron impostata a false posso gestire io l'indicatore della tkinter\n        #senza che usi quello predefinito.\n\n    def Dispensa(self):\n        if self.check_lista[0].get()==0 and self.check_lista[1].get()==0 and self.check_lista[2].get()==0 and self.check_lista[3].get()==0 and self.check_lista[4].get()==0 and self.check_lista[6].get()==0 and self.check_lista[7].get()==0 and self.check_lista[8].get()==0 and self.check_lista[9].get()==0 and self.check_lista[10].get()==0 and self.check_lista[11].get()==0 and self.check_lista[12].get()==0 and self.check_lista[13].get()==0 and self.check_lista[15].get()==0 and self.check_lista[16].get()==0:\n            webbrowser.open_new('https://www.canva.com/design/DAFfxoltwcg/O_sJAmSX29-pS-1xUnrVkw/edit?utm_content=DAFfxoltwcg&utm_campaign=designshare&utm_medium=link2&utm_source=sharebutton')\n        else:\n            selezionati = [i+1 for i, self.scelta in enumerate(self.check_lista) if self.scelta.get() == 1]\n            #creo una nuova lista SELEZIONATI dove all'interno salvo un valore, ovvero l'indice della lista CHECK_LISTA increementato di uno, che corrisponde a ogni\n            #elemento di tipo int var che ha valore==1.\n            messagebox.showinfo('Checkbutton selezionati', f'Sono stati selezionati i checkbutton numero: {selezionati}')\n            #stampo la lista che contiene i valori.\n\n            #la funzione enumerate() fornisce l'indice e il valore di ciascun elemento di una lista o tupla ecc...\ndef main():\n    f=Finestra('De Boni')\n    f.mainloop()\n\nmain()\n", "import tkinter as tk\nfrom tkinter import ttk\nfrom time import sleep\nfrom tkinter.messagebox import showinfo\n\nclass Win (tk.Tk):\n\n\tdef __init__(self,nome='barra download'):\n\t\tsuper().__init__()\n\t\tself.title(nome)\n\t\tself.geometry('300x200')\n\t\tself.resizable(1,1)\n\t\tself.Createwidget()\n\tdef Createwidget(self):\n\t\tself.MainFrame=tk.Frame(self)\n\t\tself.MainFrame.pack()\n\t\tself.pb=ttk.Progressbar(self.MainFrame,orient='horizontal',mode='determinate')\n\t\tself.pb.pack()\n\t\tself.start=tk.Button(self.MainFrame,text='Start',command=self.Start)\n\t\tself.start.pack()\n\tdef Start(self):\n\t\twhile (self.pb['value']<100):\n\t\t\tsleep(0.4)\n\t\t\tself.pb['value']+=10\n\t\t\tself.update_idletasks()\n\t\tif self.pb['value'] >= 100:\n\t\t\ta=showinfo('attento','download finito')\n\t\t\tif a == 'ok':\n\t\t\t\tself.pb.stop()\n\t\ndef Main():\n\tw1=Win()\n\tw1.mainloop()\n\nMain()\n\n"],
				"prestetazione": "https://www.canva.com/design/DAFjWKE7p60/Q1MhznzbSNS1ypsTHQryOA/view?website#2",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/main/PDF/progressbar.pdf"
			}
		]
	},
	
	{
	"nome": "Zhou ChengHuan",
	"keyword": ["Tkinter",
		    "widget",
		    "Canvas",
		    "grafica",
		    "2D",
		    "interattivo",
		    "forme geometriche",
		    "linee",
		    "testo",
		    "immagini",
		    "visualizzazioni",
		    "personalizzato",
		    "interfaccia utente",
		    "mouse",
		    "tastiera",
		    "interazione",
		    "metodi di disegno",
		    "colori",
		    "gradazioni",
		    "riempimenti",
		    "stili di linea",
		    "posizionamento",
		    "eventi",
		    "callback",
		    "risposte",
		    "eventi del mouse",
		    "eventi da tastiera",
		    "interazioni dinamiche",
		    "reattivo",
		    "applicazioni Python",
		    "versatilità",
		    "potenza",
		    "interfacce utente dinamiche",
		    "coinvolgente",
		    "interfaccia grafica",
		    "oggetti grafici",
		    "rettangoli",
		    "ovali",
		    "poligoni",
		    "movimento del cursore",
		    "callback",
		    "eventi del mouse",
		    "eventi da tastiera",
		    "dinamico",
		    "creativo",
		    "canvas virtuale",
		    "trasformazioni",
		    "animazioni",
		    "interattività",
		    "programmazione visiva",
		    "progettazione",
		    "creazione",
		    "modifica",
		    "punti di ancoraggio",
		    "scorrimento",
		    "riposizionamento",
		    "dimensioni",
		    "zoom",
		    "reticolo",
		    "sistema di coordinate",
		    "salvataggio",
		    "caricamento",
		    "impostazione dello sfondo",
		    "eliminazione degli oggetti",
		    "aggiornamento dinamico",
		    "ritaglio",
		    "pennello",
		    "editing di immagini",
		    "gestione degli errori",
		    "ottimizzazione",
		    "gestione degli eventi",
		    "grafica vettoriale",
		    "sfumature",
		    "trasparenza",
		    "effetti speciali",
		    "rotazione",
		    "ridimensionamento",
		    "gruppi",
		    "livelli",
		    "interpolazione",
		    "maschere",
		    "sovrapposizione",
		    "sfondo trasparente",
		    "disegno a mano libera",
		    "tracciamento del percorso",
		    "filtraggio",
		    "confini",
		    "disposizione",
		    "stile",
		    "scrittura",
		    "formattazione del testo",
		    "font",
		    "paragrafi",
		    "stile di paragrafo",
		    "allineamento del testo",
		    "scelta del colore",
		    "gestione degli oggetti",
		    "selezione",
		    "spostamento",
		    "copiatura",
		    "incollaggio",
		    "annullamento",
		    "ripristino",
		    "griglia",
		    "integrazione",
		    "sincronizzazione",
		    "guida",
		    "risoluzione",
		    "dimensione del pixel",
		    "visualizzazione",
		    "personalizzazione",
		    "panoramica",
		    "zoom",
		    "interazione multi-touch",
		    "rottura",
		    "clonazione",
		    "punti di ancoraggio",
		    "modifica delle proprietà",
		    "glossario",
		    "strumenti di disegno",
		    "pennello",
		    "matita",
		    "gomma",
		    "strumenti di selezione",
		    "rettangolo di selezione",
		    "selezione a mano libera",
		    "strumenti di trasformazione",
		    "traslazione",
		    "scala",
		    "rotazione",
		    "specchio",
		    "composizione",
		    "sovrapposizione",
		    "effetti",
		    "livelli",
		    "gestione dei livelli",
		    "organizzazione",
		    "apertura",
		    "salvataggio",
		    "esportazione",
		    "importazione",
		    "impostazioni",
		    "configurazione",
		    "personalizzazione",
		    "grafica interattiva",
		    "creazione di giochi",
		    "strumento di presentazione",
		    "programmazione visuale",
		    "interfaccia di progettazione",
		    "creazione di interfacce utente",
		    "elaborazione delle immagini",
		    "animazione",
		    "grafica per il web",
		    "disegno tecnico",
		    "progettazione di loghi",
		    "prototipazione",
		    "sviluppo di applicazioni",
		    "editing di immagini",
		    "creazione di elementi visivi",
		    "visualizzazione dei dati",
		    "creazione di diagrammi",
		    "progettazione di mappe"
	],
	"parte": [
			{
				"titolo": "Canvas",
				"corpo": "Il widget Canvas di Tkinter è un componente versatile e potente che consente di <strong>creare e manipolare grafiche 2D interattive</strong>. Conosciuto per la sua <strong>flessibilità</strong>, il Canvas può essere utilizzato per <strong>disegnare forme geometriche</strong>, linee, testo e persino immagini all'interno di una finestra o di un frame dell'interfaccia utente. \nGrazie al Canvas, <strong>è possibile creare visualizzazioni personalizzate e interattive</strong>, ad esempio grafici, diagrammi, mappe e molti altri elementi visivi. È possibile utilizzare il mouse e la tastiera per interagire con gli oggetti all'interno del Canvas, <strong>come selezionarli, trascinarli o effettuare clic su di essi per eseguire azioni specifiche</strong>. \nIl Canvas offre un'ampia gamma di metodi per disegnare e manipolare gli oggetti. È possibile <strong>creare rettangoli, ovali, poligoni e linee personalizzate utilizzando i metodi di disegno del Canvas</strong>. È anche possibile <strong>applicare colori, gradazioni, riempimenti e stili di linea per personalizzare l'aspetto degli oggetti</strong>. Inoltre, il Canvas supporta anche il posizionamento dei testi e delle immagini all'interno dell'area disegnabile.\n Un aspetto importante del Canvas è la sua capacità di associare eventi agli oggetti grafici. È possibile definire <strong>callback e risposte agli eventi del mouse</strong>, come clic del pulsante sinistro o movimento del cursore, o eventi da tastiera. Questo consente di creare <strong>interazioni dinamiche e reattive all'interno del Canvas</strong>. \nIn sintesi, il widget Canvas di Tkinter offre un'ampia gamma di funzionalità per la creazione di grafiche interattive personalizzate all'interno delle applicazioni Python. La sua versatilità e potenza lo rendono uno strumento essenziale per la creazione di interfacce utente dinamiche e coinvolgenti.",
				"code": ["<a href='https://gitlab.com/xkzyw/tkinter-canvas-editor' target='_blank'>https://gitlab.com/xkzyw/tkinter-canvas-editor</a>"],
				"prestetazione": "https://gitlab.com/xkzyw/tkinter-canvas-editor/-/blob/main/doc/canvas.pdf",
				"pdf": "https://github.com/MattiaBracco05/WidgetTkinter/blob/d013f7723be2d871c7faaa11f32865a5610875a1/PDF/canvas.pdf"
			}
		]
	}


]
