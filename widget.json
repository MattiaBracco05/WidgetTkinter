[
	{
	"keyword": ["listbox", "lista", "list", "scroll", "scorrimento", "tendina"],
	"nome": "Bracco Mattia",
	"parte":[
			{
				"titolo": "Listbox",
				"corpo": "spiega brevemente in 5/10 righe a cosa serve il tuo widget",
				"code": ["#4C Bracco Mattia - TKINTER Widget listbox\n\nimport tkinter\nfrom tkinter import ttk\nfrom tkinter import messagebox as mbox\n\nmioFont = ('Arial, 16')\n\nclass Finestra(tkinter.Tk):\n\t#Costruttore\n\tdef __init__(self, nome):\n\t\tsuper().__init__()\n\t\tself.title(nome)\n\t\tself.geometry('660x1000')\n\t\tself.resizable(0, 0)\n\t\tself.crea_widgets()\n\t#CREA WIDGETS\n\tdef crea_widgets(self):\n\t\tmf = tkinter.Frame(self) #Creo l'oggetto Main Frame (contenitore principale), ci deve sempre essere e contine i widget\n\t\tmf.grid() #Definisco il layout del Main Frame (in questo caso 'grid')\n\n\t\t#LABEL SELECTMODE\n\t\tlblSelectmode = tkinter.Label(mf, text='OPZIONI PER SELECTMODE')\n\t\tlblSelectmode.grid(row=0, column=0, columnspan=4, sticky=tkinter.EW)\n\n\t\t#LISTBOX ACCESSORI (selectmode = browse)\n\t\t#Label\n\t\tlblBrowse = tkinter.Label(mf, text='BROWSE', bg='blue')\n\t\tlblBrowse.grid(row=1, column=0, sticky=tkinter.EW)\n\t\t#Listbox\n\t\taccessori = ('Pasta', 'Bistecca', 'Carne', 'Pesce', 'Patatine', 'Verdura', 'Contorno', 'Dolce')\n\t\tvarAccessori = tkinter.Variable(value = accessori)\n\t\tlistAccessori = tkinter.Listbox(mf, listvariable=varAccessori, height=5, selectmode=tkinter.BROWSE)\n\t\tlistAccessori.grid(row=2, column=0)\n\n\t\t#LISTBOX CIBI (selectmode = extend)\n\t\t#Label\n\t\tlblBrowse = tkinter.Label(mf, text='EXTENDED', bg='yellow')\n\t\tlblBrowse.grid(row=1, column=1, sticky=tkinter.EW)\n\t\t#Listbox\n\t\tcibi = ('Pasta', 'Bistecca', 'Carne', 'Pesce', 'Patatine', 'Verdura', 'Contorno', 'Dolce')\n\t\tvarCibi = tkinter.Variable(value = cibi)\n\t\tlistCibi = tkinter.Listbox(mf, listvariable=varCibi, height=5, selectmode=tkinter.EXTENDED)\n\t\tlistCibi.grid(row=2, column=1)\n\n\t\t#LISTBOX AUTO (selectmode = single)\n\t\t#Label\n\t\tlblBrowse = tkinter.Label(mf, text='SINGLE', bg='green')\n\t\tlblBrowse.grid(row=1, column=2, sticky=tkinter.EW)\n\t\t#Listbox\n\t\tauto = ('Alfa Romeo', 'Fiat', 'Ford', 'Ferrari', 'Lamborgini', 'Maserati', 'Audi', 'Mercedes', 'BMW', 'Lancia', 'Volvo', 'Seat', 'Kia')\n\t\tvarAuto = tkinter.Variable(value = auto)\n\t\tlistAuto = tkinter.Listbox(mf, listvariable=varAuto, height=5, selectmode=tkinter.SINGLE)\n\t\tlistAuto.grid(row=2, column=2)\n\n\t\t#LISTBOX COLORI (selectmode = multiple)\n\t\t#Label\n\t\tlblBrowse = tkinter.Label(mf, text='MULTIPLE', bg='gray')\n\t\tlblBrowse.grid(row=1, column=3, sticky=tkinter.EW)\n\t\t#Listbox\n\t\tcolori = ('Giallo', 'Azzurro', 'Blu', 'Verde', 'Marrone', 'Nero', 'Giallo', 'Mercedes', 'BMW', 'Lancia', 'Volvo', 'Seat', 'Kia')\n\t\tvarColori = tkinter.Variable(value = colori)\n\t\tlistColori = tkinter.Listbox(mf, listvariable=varColori, height=5, selectmode=tkinter.MULTIPLE)\n\t\tlistColori.grid(row=2, column=3)\n\n\t\t#LABEL SCROLLBAR\n\t\tlblScrollbar = tkinter.Label(mf, text='SCROLLBAR')\n\t\tlblScrollbar.grid(row=3, column=0, columnspan=4, sticky=tkinter.EW)\n\n\t\t#Listbox\n\t\tlinguaggi = ('C#', 'C', 'C++', 'Python', 'Go', 'PHP', 'Swift', 'HTML', 'CSS', 'JSON', 'XML', 'JavaScript', 'Java')\n\t\tvarLinguaggi = tkinter.Variable(value = linguaggi)\n\t\tlistLinguaggi = tkinter.Listbox(mf, listvariable=varLinguaggi, height=8, selectmode=tkinter.BROWSE)\n\t\tlistLinguaggi.grid(row=4, column=0)\n\t\t#Scrollbar\n\t\tscrollbar = ttk.Scrollbar(mf, orient=tkinter.VERTICAL, command=listLinguaggi.yview)\n\t\tlistLinguaggi['yscrollcommand'] = scrollbar.set\n\t\tscrollbar.grid(row=4, column=1, sticky=tkinter.NS)\n\n\t\t#LABEL OPERAZIONI\n\t\tlblOperazioni = tkinter.Label(mf, text='OPERAZIONI SULLE LISTE (Vedere codice)')\n\t\tlblOperazioni.grid(row=5, column=0, columnspan=4, sticky=tkinter.EW)\n\n\t\t#Listbox di partenza\n\t\tnomi = ('Alessio', 'Francesco', 'Pietro', 'Paolo', 'Giuseppe', 'Gabriele', 'Edoardo', 'Leonardo', 'Davide')\n\t\tvarNomi = tkinter.Variable(value = nomi)\n\t\tlistNomi = tkinter.Listbox(mf, listvariable=varNomi, height=8, selectmode=tkinter.BROWSE)\n\t\tlistNomi.grid(row=6, column=0)\n\t\t#Inserisco un nome in posizione 0 ('Mattia')\n\t\tlistNomi.insert(0, 'Mattia')\n\t\t#Elimino il nome nella posizione 2 ('Francesco')\n\t\tlistNomi.delete(2)\n\n\t\t#LABEL SELEZIONE\n\t\tlblSelezione = tkinter.Label(mf, text='VALORE SELEZIONATO')\n\t\tlblSelezione.grid(row=7, column=0, columnspan=4, sticky=tkinter.EW)\n\n\t\t#Listbox\n\t\tsport = ('Calcio', 'Pallavolo', 'Basket', 'Rugby', 'Tennis', 'Nuoto', 'Padel', 'Atletica')\n\t\tvarSport = tkinter.Variable(value = sport)\n\t\tself.listSport = tkinter.Listbox(mf, listvariable=varSport, height=8, selectmode=tkinter.BROWSE)\n\t\tself.listSport.grid(row=8, column=0)\n\t\t#Button\n\t\tbtnConferma = tkinter.Button(mf, text='CONFERMA', command=self.stampaSelezione, bg='lightgreen')\n\t\tbtnConferma.grid(row=8, column=1)\n\n\t\t#BUTTON ESCI\n\t\tbtnEsci = tkinter.Button(mf, text='ESCI', command=self.destroy, bg='red')\n\t\tbtnEsci.grid(row=9, column=0, columnspan=4, sticky=tkinter.EW)\n\n\t#STAMPA SELEZIONE\n\tdef stampaSelezione(self):\n\t\tfor i in self.listSport.curselection():\n\t\t\tprint(self.listSport.get(i))\n\t\t\tmbox.showinfo('Selezione', self.listSport.get(i))\n\ndef main():\n\tf = Finestra('Widget Listbox')\n\tf.mainloop()\nmain()\n"],
				"prestetazione": "https://www.canva.com/design/DAFjQ92SnEc/yA9rRmbWWskjgwc2dvlilQ/view?website#2L"
			}
		]
	},
	
	{
	"keyword": ["checkbutton", "check", "button", "selezione", "scelta", "pulsante", "click"],
	"nome": "De Boni Simone",
	"parte":[
			{
				"titolo": "Checkbutton",
				"corpo": "I checkbutton sono utilizzati per visualizzare una serie di opzioni all'utente come pulsanti di commutazione. Grazie a questo widget, della Tkinter, l'utente può selezionare una o più opzioni facendo clic sul pulsante corrispondente a ciascuna opzione.",
				"code": ["#Presentazione\\s-\\sCheckbutton\\s\n#De\\sBoni\\sSimone\n\nimport\\stkinter\nfrom\\stkinter\\simport\\smessagebox\nfrom\\sfunctools\\simport\\spartial\nimport\\swebbrowser\n\nclass\\sFinestra(tkinter.Tk):\n\\s\\s\\s\\sdef\\s__init__(self,\\snome):\n\\s\\s\\s\\s\\s\\s\\s\\ssuper().__init__()\n\\s\\s\\s\\s\\s\\s\\s\\sself.title('Presentazione\\sCheckbutton,\\s'+nome)\n\\s\\s\\s\\s\\s\\s\\s\\sself.geometry('500x700')\n\\s\\s\\s\\s\\s\\s\\s\\sself.resizable(1,1)\n\\s\\s\\s\\s\\s\\s\\s\\sself.crea_widgets()\n\n\\s\\s\\s\\sdef\\screa_widgets(self):\n\\s\\s\\s\\s\\s\\s\\s\\stitolo=tkinter.Frame()\n\\s\\s\\s\\s\\s\\s\\s\\stitolo.grid()\n\\s\\s\\s\\s\\s\\s\\s\\stitolo.configure(bg='lightgrey',padx=38)\n\n\\s\\s\\s\\s\\s\\s\\s\\stit=tkinter.Label(titolo,\\stext='CHECKBUTTON\\sE\\sPARAMETRI',\\sfont=('Arial',\\s15,\\s'bold'),\\sfg='grey',\\sbg='lightgrey',\\sheight=2)\n\\s\\s\\s\\s\\s\\s\\s\\stit.grid(row=0,\\scolumn=0,\\scolumnspan=3,\\srowspan=3)\n\n\n\\s\\s\\s\\s\\s\\s\\s\\smf=tkinter.Frame()\n\\s\\s\\s\\s\\s\\s\\s\\smf.grid()\n\\s\\s\\s\\s\\s\\s\\s\\sself.configure(bg='lightgrey',\\spadx=60,\\spady=10)\n\\s\\s\\s\\s\\s\\s\\s\\smf.configure(bg='grey')\n\n\\s\\s\\s\\s\\s\\s\\s\\sself.check_lista=[]\n\n\\s\\s\\s\\s\\s\\s\\s\\sfor\\si\\sin\\srange(17):\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\sself.scelta\\s=\\stkinter.IntVar()\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\sself.check_lista.append(self.scelta)\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\n\\s\\s\\s\\s\\s\\s\\s\\sB1=tkinter.Checkbutton(mf,\\stext='1-activebackground',\\svariable=self.check_lista[0],\\sactivebackground='grey')\n\\s\\s\\s\\s\\s\\s\\s\\s#Attiva\\slo\\ssfondo\\squando\\ssi\\sclicca\\ssul\\sbotton.\n\\s\\s\\s\\s\\s\\s\\s\\sB1.grid(row=0,\\scolumn=0,\\ssticky='w',\\scolumnspan=3,\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB2=tkinter.Checkbutton(mf,\\stext='2-activeforeground',\\svariable=self.check_lista[1],\\sactiveforeground='grey')\n\\s\\s\\s\\s\\s\\s\\s\\s#Attiva\\sil\\scolore\\sdel\\stesto\\squando\\ssi\\sclicca\\ssul\\sbutton\n\\s\\s\\s\\s\\s\\s\\s\\sB2.grid(row=1,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB3=tkinter.Checkbutton(mf,\\stext='3-bg',\\svariable=self.check_lista[2],\\sbg='grey')\n\\s\\s\\s\\s\\s\\s\\s\\s#Colorazione\\sdello\\ssfondo\\sattiva\\squando\\snon\\ssi\\sclicca\\ssul\\sbutton.\n\\s\\s\\s\\s\\s\\s\\s\\sB3.grid(row=2,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB4=tkinter.Checkbutton(mf,\\sbitmap='error',\\svariable=self.check_lista[3])\n\\s\\s\\s\\s\\s\\s\\s\\s#Immagine\\sdi\\smessaggio\\sdi\\serrore\\sal\\sposto\\sdel\\stesto,\\spuò\\scambiare\\sin\\sbase\\sai\\sparametri.\n\\s\\s\\s\\s\\s\\s\\s\\sB4.grid(row=3,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB5=tkinter.Checkbutton(mf,\\stext='5-bd',\\svariable=self.check_lista[4],\\sbd=10)\n\\s\\s\\s\\s\\s\\s\\s\\s#Margine\\sattorno\\sad\\sogni\\slato\\sdel\\sbutton,\\sdi\\sdefault\\svale\\s2\\spixel.\n\\s\\s\\s\\s\\s\\s\\s\\sB5.grid(row=4,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB6=tkinter.Checkbutton(mf,\\stext='6-command',\\svariable=self.check_lista[5],\\scommand=mf.master.destroy)\n\\s\\s\\s\\s\\s\\s\\s\\s#Consente\\sdi\\sattivare\\smetodi\\se\\sfunzioni\\sal\\sclick\\sdel\\sbottone.\n\\s\\s\\s\\s\\s\\s\\s\\sB6.grid(row=5,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB7=tkinter.Checkbutton(mf,\\stext='7-cursor',\\svariable=self.check_lista[6],\\scursor='dot')\n\\s\\s\\s\\s\\s\\s\\s\\s#Cambia\\sla\\sforma\\sdel\\scursore\\sal\\sdi\\ssopra\\sdi\\squesto\\sbutton.\n\\s\\s\\s\\s\\s\\s\\s\\sB7.grid(row=6,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB8=tkinter.Checkbutton(mf,\\stext='8-font',\\svariable=self.check_lista[7],\\sfont=('Arial',\\s15))\n\\s\\s\\s\\s\\s\\s\\s\\s#Font\\sdel\\stesto.\n\\s\\s\\s\\s\\s\\s\\s\\sB8.grid(row=8,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB9=tkinter.Checkbutton(mf,\\stext='9-fg',\\svariable=self.check_lista[8],\\sfg='grey')\n\\s\\s\\s\\s\\s\\s\\s\\s#Colore\\sdel\\stesto.\n\\s\\s\\s\\s\\s\\s\\s\\sB9.grid(row=9,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB10=tkinter.Checkbutton(mf,\\stext='10-height',\\svariable=self.check_lista[9],\\sheight=5)\n\\s\\s\\s\\s\\s\\s\\s\\s#Altezza\\sdel\\sbutton.\n\\s\\s\\s\\s\\s\\s\\s\\sB10.grid(row=10,\\scolumn=0,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB11=tkinter.Checkbutton(mf,\\stext='11-image',\\svariable=self.check_lista[10],\\scommand=partial(self.creaImmagine,\\smf))\n\\s\\s\\s\\s\\s\\s\\s\\s#Immagini\\scome\\sdei\\sbutton\\sgrazie\\sagli\\soggetti\\sphotoimage.\n\\s\\s\\s\\s\\s\\s\\s\\sB11.grid(row=0,\\scolumn=1,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB12=tkinter.Checkbutton(mf,\\stext='12-justify\\s\n\\saltra\\sriga',\\sanchor='e',\\svariable=self.check_lista[11],\\sjustify=tkinter.CENTER)\n\\s\\s\\s\\s\\s\\s\\s\\s#Se\\sil\\stesto\\scontiene\\spiù\\srighe,\\squesta\\sopzione\\scontrolla\\sla\\sgiustificazione\\sdel\\stesto:\\sCENTRO,\\sSINISTRA\\so\\sDESTRA.\n\\s\\s\\s\\s\\s\\s\\s\\sB12.grid(row=1,\\scolumn=1,sticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB13=tkinter.Checkbutton(mf,\\stext='13-relief',\\svariable=self.check_lista[12],\\srelief=tkinter.GROOVE)\n\\s\\s\\s\\s\\s\\s\\s\\s#Con\\sil\\svalore\\spredefinito,\\srelief=FLAT,\\sil\\scheckbutton\\snon\\ssi\\sdistingue\\sdal\\ssuo\\ssfondo.\\sPuoi\\simpostare\\spiù\\sstili.\n\\s\\s\\s\\s\\s\\s\\s\\sB13.grid(row=2,\\scolumn=1,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB14=tkinter.Checkbutton(mf,\\stext='14-selectcolor',\\svariable=self.check_lista[13],\\sselectcolor='grey')\n\\s\\s\\s\\s\\s\\s\\s\\s#Il\\scolore\\sdel\\scheckbutton\\squando\\sè\\simpostato.\\sL'impostazione\\spredefinita\\sè\\sselectcolor='rosso'.\n\\s\\s\\s\\s\\s\\s\\s\\sB14.grid(row=3,\\scolumn=1,sticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB15=tkinter.Checkbutton(mf,\\stext='15-state',\\svariable=self.check_lista[14],\\sstate=tkinter.DISABLED)\n\\s\\s\\s\\s\\s\\s\\s\\s#è\\spossibile\\sutilizzare\\sstate=DISABLED\\sper\\sdisattivare\\sil\\scontrollo\\se\\srenderlo\\snon\\srispondente.\n\\s\\s\\s\\s\\s\\s\\s\\sB15.grid(row=4,\\scolumn=1,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB16=tkinter.Checkbutton(mf,\\stext='16-underline',\\svariable=self.check_lista[15],\\sunderline=4)\n\\s\\s\\s\\s\\s\\s\\s\\s#Si\\spuò\\ssottolineare\\sun\\scarattere\\soppure\\stutto\\siò\\stesto\\sdel\\sbutton.\n\\s\\s\\s\\s\\s\\s\\s\\sB16.grid(row=5,\\scolumn=1,\\ssticky='we',\\spadx=10,\\spady=10)\n\n\\s\\s\\s\\s\\s\\s\\s\\sB17=tkinter.Checkbutton(mf,\\stext='17-wraplength',\\svariable=self.check_lista[16],\\swraplength=5)\n\\s\\s\\s\\s\\s\\s\\s\\s#suddividi\\sin\\spiù\\srighe\\sanche\\stesti\\sdi\\ssolo\\suna\\sparola.\n\\s\\s\\s\\s\\s\\s\\s\\sB17.grid(row=6,\\scolumn=1,\\ssticky='we',\\srowspan=5,\\spadx=10,\\spady=10)\n\\s\\s\\s\\s\\s\\s\\s\\s#All'interno\\sdei\\sCheckbutton\\sabbiamo\\sil\\smainFrame,\\sdove\\sinseriremo\\sil\\snostro\\swidget,\n\\s\\s\\s\\s\\s\\s\\s\\s#il\\stesto\\sda\\sassociare\\sai\\spulsanti\\se\\sla\\svariabile,\n\\s\\s\\s\\s\\s\\s\\s\\s#che\\ssarà\\sproprio\\squesta\\sche\\spermetterà\\sdi\\spoter\\sselezionare\\suno\\so\\spiù\\sopzioni,\\sgrazie\\sal\\ssuo\\svalore\n\\s\\s\\s\\s\\s\\s\\s\\s#di\\stipo\\sintero,\\sche\\spuò\\sessere\\s0\\so\\s1\\s(0\\snon\\sselezionato,\\s1\\sselezionato).\\s\n\n\\s\\s\\s\\s\\s\\s\\s\\sbutt=tkinter.Button(mf,\\stext='VERIFICA',\\scommand=self.Dispensa)\n\\s\\s\\s\\s\\s\\s\\s\\sbutt.grid(row=11,\\scolumn=0,\\scolumnspan=3,\\sipadx=30,\\sipady=10)\n\n\n\\s\\s\\s\\sdef\\screaImmagine(self,\\smf):\n\\s\\s\\s\\s\\s\\s\\s\\sself.acceso\\s=\\stkinter.PhotoImage(width=48,\\sheight=24)\n\\s\\s\\s\\s\\s\\s\\s\\sself.spento\\s=\\stkinter.PhotoImage(width=48,\\sheight=24)\n\\s\\s\\s\\s\\s\\s\\s\\sself.acceso.put(('green',),\\sto=(0,\\s0,\\s23,23))\n\\s\\s\\s\\s\\s\\s\\s\\sself.spento.put(('red',),\\sto=(24,\\s0,\\s47,\\s23))\n\\s\\s\\s\\s\\s\\s\\s\\s#Creo\\si\\sdue\\soggetti\\sPhotoImage\\se\\ssuccessivamente\\simposterò\\sloro\\sla\\sgrandezza,\n\\s\\s\\s\\s\\s\\s\\s\\s#il\\scolore\\sche\\sdevono\\sassumere,\\se\\sla\\sloro\\sposizione.\n\n\\s\\s\\s\\s\\s\\s\\s\\sself.var1\\s=\\stkinter.IntVar(value=1)\n\\s\\s\\s\\s\\s\\s\\s\\sself.var2\\s=\\stkinter.IntVar()\n\\s\\s\\s\\s\\s\\s\\s\\scb1\\s=\\stkinter.Checkbutton(mf,\\simage=self.spento,\\sselectimage=self.acceso,\\sindicatoron=False,\\svariable=self.var1)\n\\s\\s\\s\\s\\s\\s\\s\\scb2\\s=\\stkinter.Checkbutton(mf,\\simage=self.spento,\\sselectimage=self.acceso,\\sindicatoron=False,\\svariable=self.var2)\n\\s\\s\\s\\s\\s\\s\\s\\scb1.grid(row=0,\\scolumn=2,\\spadx=20,\\spady=10)\n\\s\\s\\s\\s\\s\\s\\s\\scb2.grid(row=1,\\scolumn=2,\\spadx=20,\\spady=10)\n\\s\\s\\s\\s\\s\\s\\s\\s#Creo\\si\\sdue\\scheckbutton\\se\\sgrazie\\salle\\sopzioni\\simage\\se\\sselectimage\\sposso\\sgestire\\sle\\simmagini\n\\s\\s\\s\\s\\s\\s\\s\\s#che\\sverranno\\smostrate\\ssia\\squando\\sil\\sbutton\\sè\\sselezionato\\ssia\\squando\\snon\\slo\\sè...\n\\s\\s\\s\\s\\s\\s\\s\\s#grazie\\spoi\\sall'opzione\\sindicatoron\\simpostata\\sa\\sfalse\\sposso\\sgestire\\sio\\sl'indicatore\\sdella\\stkinter\n\\s\\s\\s\\s\\s\\s\\s\\s#senza\\sche\\susi\\squello\\spredefinito.\n\n\\s\\s\\s\\sdef\\sDispensa(self):\n\\s\\s\\s\\s\\s\\s\\s\\sif\\sself.check_lista[0].get()==0\\sand\\sself.check_lista[1].get()==0\\sand\\sself.check_lista[2].get()==0\\sand\\sself.check_lista[3].get()==0\\sand\\sself.check_lista[4].get()==0\\sand\\sself.check_lista[6].get()==0\\sand\\sself.check_lista[7].get()==0\\sand\\sself.check_lista[8].get()==0\\sand\\sself.check_lista[9].get()==0\\sand\\sself.check_lista[10].get()==0\\sand\\sself.check_lista[11].get()==0\\sand\\sself.check_lista[12].get()==0\\sand\\sself.check_lista[13].get()==0\\sand\\sself.check_lista[15].get()==0\\sand\\sself.check_lista[16].get()==0:\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\swebbrowser.open_new('https://www.canva.com/design/DAFfxoltwcg/O_sJAmSX29-pS-1xUnrVkw/edit?utm_content=DAFfxoltwcg&utm_campaign=designshare&utm_medium=link2&utm_source=sharebutton')\n\\s\\s\\s\\s\\s\\s\\s\\selse:\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\sselezionati\\s=\\s[i+1\\sfor\\si,\\sself.scelta\\sin\\senumerate(self.check_lista)\\sif\\sself.scelta.get()\\s==\\s1]\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s#creo\\suna\\snuova\\slista\\sSELEZIONATI\\sdove\\sall'interno\\ssalvo\\sun\\svalore,\\sovvero\\sl'indice\\sdella\\slista\\sCHECK_LISTA\\sincreementato\\sdi\\suno,\\sche\\scorrisponde\\sa\\sogni\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s#elemento\\sdi\\stipo\\sint\\svar\\sche\\sha\\svalore==1.\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\smessagebox.showinfo('Checkbutton\\sselezionati',\\sf'Sono\\sstati\\sselezionati\\si\\scheckbutton\\snumero:\\s{selezionati}')\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s#stampo\\sla\\slista\\sche\\scontiene\\si\\svalori.\n\n\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s#la\\sfunzione\\senumerate()\\sfornisce\\sl'indice\\se\\sil\\svalore\\sdi\\sciascun\\selemento\\sdi\\suna\\slista\\so\\stupla\\secc...\ndef\\smain():\n\\s\\s\\s\\sf=Finestra('De\\sBoni')\n\\s\\s\\s\\sf.mainloop()\n\nmain()\n\\s\\s\\s\\s\\s\\s\\s\\s\n"],
				"prestetazione": "https://www.canva.com/design/DAFfxoltwcg/O_sJAmSX29-pS-1xUnrVkw/edit?utm_content=DAFfxoltwcg&utm_campaign=designshare&utm_medium=link2&utm_source=sharebutton"
			}
		]
	},
	
	{
	"keyword": ["filedialog", "file", "finestra di dialogo file", "finestra di dialogo"],
	"nome": "Alba Luca",
	"parte":[
			{
				"titolo": "Cos'è il filedialog?",
				"corpo": " Il filedialog è un widgets della tkinter, per poterlo utilizzare dovremmo importalo, in questo modo <strong>from tkinter import filedialog</strong>, una volta importato potremmo andare ad utilizzare lui e i suoi metodi. Le keyword principali del filediaog sono: <strong>title, initialdir, filetypes, defaultextension, initialfile e multiple.</strong> Invece i suoi metodi principali sono: <strong>askopenfile, asksaveasfile, askopenfilename, asksaveasfilename, askdirectory.</strong>",
				"code": ["import tkinter as tk\nfrom tkinter import filedialog\nimport tkinter.messagebox as mbox\nfrom functools import partial\nfrom PIL import Image, ImageTk\nimport os\n\n#pulisco il terminale\nos.system('clear')\n\n#creo la classe principale della mia finestra e creo la finestra principale\nclass Edipy(tk.Tk):\n\tdef __init__(self):\n\t\t#richiamo il costruttore delal tk.Tk\n\t\tsuper().__init__()\n\t\tself.grandezza_finestra = '400x400'\n\t\t\n\t\t#variabili menu\n\t\tself.sfondo = '#1c2226'\n\t\tself.sfondo_scritta = 'white'\n\t\tself.user_name = 'Utente'\n\t\tself.message_benvenuto = f'Benvenuto su Edipy {self.user_name}'\n\t\tself.image_user = None\n\t\tself.h_img = 8\n\t\tself.w_img = 15\n\t\t\n\t\t#variabili impostazioni\n\t\tself.path_predefinita = '/home'\n\t\tself.width_tab = 30\n\t\t\n\t\t#variabili popup metodi prefatti\n\t\tself.variable_radio = tk.StringVar()\n\t\tself.save_code = ''\n\t\t\n\t\tself.geometry(self.grandezza_finestra)\n\t\tself.title('Alba - Edipy')\n\t\tself.resizable(0, 0)\n\t\tself.config(bg = self.sfondo)\n\t\tself.crea_widgets()\n\t\n\tdef crea_widgets(self):\n\t\tself.crea_menu()\n\t\n\tdef crea_menu(self, can_remove = False, fin = None):\t\n\t\t#mi salvo il codice che l'utente ha digitato all'interno della Text() in tal caso\n\t\t#non esista ancora il widgets gestisco i vari errori\n\t\ttry:\n\t\t\tself.save_code = str(self.blocco_lavoro.get('1.0', 'end'))\n\t\texcept AttributeError:\n\t\t\tself.save_code = ''\n\t\texcept tk.TclError:\n\t\t\tpass\n\t\t\n\t\t#rimuovo la finestra precedente in tal modo da far visualizzare solo il menu quando necessario\n\t\tif can_remove == True:\n\t\t\tfin.destroy()\n\t\t\n\t\t#per sicurezza rimposto la grandezza della finestra principale in tal caso siamo andati nell'edipy\n\t\t#che al suo interno viene ingrandita la finestra \n\t\tself.geometry(self.grandezza_finestra)\n\t\t\n\t\t#creo il frame e grazie alla place() riesco a centrare il frame\n\t\twm = tk.Frame(self, bg = self.sfondo)\n\t\twm.place(relx = 0.5, rely = 0.45, anchor = tk.CENTER)\n\t\t\n\t\t#creazione dei widgets\n\t\ttitle_win = tk.Label(wm, text = 'MENU', font = ('Arial', 16, 'bold'), bg = self.sfondo, fg = self.sfondo_scritta)\n\t\ttitle_win.grid(row = 0, column = 0)\n\t\t\n\t\tself.button_user_image = tk.Button(wm, image = self.image_user, height = self.h_img, width = self.w_img, text = 'carica immagine...', command = self.aggiungi_foto)\n\t\tself.button_user_image.grid(row = 1, column = 0, pady = (10, 0))\n\t\t\n\t\tself.label_benvenuto = tk.Label(wm, bg = self.sfondo, text = self.message_benvenuto, fg = self.sfondo_scritta)\n\t\tself.label_benvenuto.grid(row = 2, column = 0, pady = (10, 0))\n\t\t\n\t\tbutton_settings = tk.Button(wm, text = 'IMPOSTAZIONI', command = partial(self.crea_impostazioni, wm))\n\t\tbutton_settings.grid(row = 3, column = 0, pady = (10, 0))\n\t\t\n\t\tbutton_create = tk.Button(wm, text = 'EDIPY', width = 14, command = partial(self.crea_progetto, wm))\n\t\tbutton_create.grid(row = 4, column = 0, pady = (10, 0))\n\t\t\n\t\tbutton_exit = tk.Button(wm, text = 'ESCI', width = 14, command = self.destroy)\n\t\tbutton_exit.grid(row = 5, column = 0, pady = (10, 0))\n\t\t\n\t\t#riconfiguoro il nome dell'utente ogni volta che entra nel menu in tal caso\n\t\t#l'utente abbia cambiato il suo user name dalle impostazioni\n\t\tself.label_benvenuto.config(text = f'Benvenuto su Edipy {self.user_name}')\n\n\tdef aggiungi_foto(self):\n\t\t'''\n\t\tCon il file dialog.askopenfilename() l'utente può selezionare l'immagine che \n\t\tvuole, in più evito che l'utente possa iserire qualsiasi tipo di file limitando l'apertura\n\t\tdei file solo per il tipo di estensioni che io vado ad elencare all'interno della tupla grazie \n\t\tall'opzione filetypes, e io riceverò la posizione dell'immagine, in cui uccessivamente grazie il\n\t\tmetodo tk.PhotoImage() potrò andar a visualizzare l'immagine all'interno del mio programma\n\t\t'''\n\t\t\n\t\ttry:\n\t\t\tpath_img = filedialog.askopenfilename(initialdir = self.path_predefinita, filetypes=[('Image Files', ('*.png'))])\n\t\t\t#self.image_user = tk.PhotoImage(file = path_img) --> così non puoi gestire la dimensione delle immagini\n\t\t\t#imposto grandezza button per la selezione delle immagini\n\t\t\tself.w_img = 125\n\t\t\tself.h_img = 125\n\t\t\t\n\t\t\t#uso il modulo PIL perchè ha la funzione adatta per ridimensionare l'immagine\n\t\t\t#e alla fine lo faccio diventare un oggetto di tipo PhotoImage così viene\n\t\t\t#riconosciuto dalla tkinter\n\t\t\top_img = Image.open(path_img)\n\t\t\tresized_img = op_img.resize((self.w_img, self.h_img))\n\t\t\tself.image_user = ImageTk.PhotoImage(resized_img)\n\t\t\t\n\t\t\tself.button_user_image.config(image = self.image_user, activebackground = self.sfondo, bg = self.sfondo, width = 125, height = 125)\n\t\t\n\t\texcept AttributeError:\n\t\t\t#imposto grandezza button per la selezione delle immagini e mostro errore se\n\t\t\t#l'utente ha solo schiacciato aggiugi immagine ma ha schiacciato la x\n\t\t\tself.w_img = 15\n\t\t\tself.h_img = 8\n\t\t\tmbox.showwarning('Attenzione!', 'Nessuna immagine è stata caricata!')\n\t\t\n\tdef crea_impostazioni(self, fin):\n\t\t#mi salvo il codice che l'utente ha digitato all'interno della Text() in tal caso\n\t\t#non esista ancora il widgets gestisco i vari errori\n\t\ttry:\n\t\t\tself.save_code = str(self.blocco_lavoro.get('1.0', 'end'))\n\t\texcept AttributeError:\n\t\t\tself.save_code = ''\n\t\texcept tk.TclError:\n\t\t\tpass\n\t\n\t\t#distruggo qualsiasi finestra precedente\n\t\tfin.destroy()\n\t\t\n\t\t#per sicurezza rimposto la grandezza della finestra principale in tal caso siamo andati nell'edipy\n\t\t#che al suo interno viene ingrandita la finestra \n\t\tself.geometry(self.grandezza_finestra)\n\t\t\n\t\t#creo il frame e grazie alla place() riesco a centrare il frame\n\t\twi = tk.Frame(self, bg = self.sfondo)\n\t\twi.place(relx = 0.5, rely = 0.45, anchor = tk.CENTER)\n\t\t\n\t\t#creo i widgets necessari per la mia finestra\n\t\ttitle_win = tk.Label(wi, text = 'IMPOSTAZIONI', font = ('Arial', 16, 'bold'), bg = self.sfondo, fg = self.sfondo_scritta)\n\t\ttitle_win.grid(row = 0, column = 0, columnspan = 2)\n\t\t\n\t\tlbl_username = tk.Label(wi, text = 'Nome utente: ', bg = self.sfondo, fg = self.sfondo_scritta)\n\t\tlbl_username.grid(row = 1, column = 0, pady = 15)\n\t\t\n\t\tself.input_name = tk.Entry(wi)\n\t\tself.input_name.grid(row = 1, column = 1, pady = 15, ipady = 8, ipadx = 5)\n\t\t\n\t\tlbl_width_tab = tk.Label(wi, text = 'Larghezza tabulazioni: ', bg = self.sfondo, fg = self.sfondo_scritta)\n\t\tlbl_width_tab.grid(row = 2, column = 0, pady = 15)\n\t\t\n\t\tself.input_width_tab = tk.Entry(wi)\n\t\tself.input_width_tab.grid(row = 2, column = 1, pady = 15, ipady = 8, ipadx = 5)\n\t\t\n\t\tlbl_save_path = tk.Label(wi, text = 'Percorso predefinito: ', bg = self.sfondo, fg = self.sfondo_scritta)\n\t\tlbl_save_path.grid(row = 3, column = 0, pady = 15)\n\t\t\n\t\tself.input_save_path = tk.Entry(wi)\n\t\tself.input_save_path.grid(row = 3, column = 1, pady = 15, ipady = 8, ipadx = 5)\n\t\t\n\t\tbtn_home = tk.Button(wi, text = 'SALVA', width = 20, command = self.salva_impostazioni)\n\t\tbtn_home.grid(row = 4, column = 0, padx = (0, 10))\n\t\t\n\t\tbtn_home = tk.Button(wi, text = 'MENU', width = 20, command = partial(self.crea_menu, True, wi))\n\t\tbtn_home.grid(row = 4, column = 1)\n\t\t\n\t\tbtn_edipy = tk.Button(wi, text = 'EDIPY', command = partial(self.crea_progetto, wi))\n\t\tbtn_edipy.grid(row = 5, columnspan = 2, pady = (10, 0), sticky = 'WE')\n\t\t\n\t\t#in tal caso l'utente abbia già effettuato delle modifiche \n\t\t#le inserisco all'intero delle entry\n\t\tself.input_name.insert(0, self.user_name)\n\t\tself.input_width_tab.insert(0, self.width_tab)\n\t\tself.input_save_path.insert(0, self.path_predefinita)\n\t\n\tdef salva_impostazioni(self):\n\t\t#flag controllo errori, valori entry\n\t\tno_error = True\n\t\tself.user_name = str(self.input_name.get())\n\t\tself.path_predefinita = str(self.input_save_path.get())\n\t\t\n\t\ttry:\n\t\t\tself.width_tab = int(self.input_width_tab.get())\n\t\t\tno_error = True\n\t\texcept ValueError:\n\t\t\tmbox.showerror('Errore - tabulazione', 'Errore nell'inserimento del numero di tabulazione')\n\t\t\tno_error = False\n\t\t\t\n\t\tif self.user_name.isspace() or self.user_name.isnumeric() or self.user_name == ''  or self.path_predefinita.isspace() or self.path_predefinita.isnumeric() or self.path_predefinita == '':\n\t\t\tmbox.showerror('Errore - campi impostazioni', 'Errore nell'inserimento dei campi')\n\t\t\tno_error = False\n\t\t\n\t\tif no_error == True:\n\t\t\tmbox.showinfo('impostazioni - salvate', f'Le tue impostazioni sono state salvate con successo\n\nNome utente: {self.user_name}\nPercorso predefinito: {self.path_predefinita}\nLarghezza tabulazioni: {self.width_tab}')\n\t\t\n\tdef crea_progetto(self, fin):\n\t\t#distruggo la finestra precedente\n\t\tfin.destroy()\n\t\t\n\t\t#imposto la grandezza della finestra principale più grande, soltato per avere una visione\n\t\t#maggiore all'intero della mia finestra\n\t\tself.geometry('1000x750')\n\t\t\n\t\t#creo i frame e grazie alla place() riesco a centrare il frame padre\n\t\twp = tk.Frame(self, bg = self.sfondo)\n\t\twp.place(relx = 0.5, rely = 0.5, anchor = tk.CENTER)\n\n\t\twb = tk.Frame(wp, bg = self.sfondo)\n\t\twb.grid(row = 0, column = 0, padx = (0, 30))\n\n\t\twbl = tk.Frame(wp, bg = self.sfondo)\n\t\twbl.grid(row = 0, column = 1)\n\n\t\t#creo i widgets necessari per la finestra\n\t\tbutton_settings = tk.Button(wb, text = 'IMPOSTAZIONI', command = partial(self.crea_impostazioni, wp))\n\t\tbutton_settings.grid(row = 0, column = 0, pady = (20, 0), sticky = 'NSWE')\t\n\n\t\tbtn_home = tk.Button(wb, text = 'MENU', command = partial(self.crea_menu, True, wp))\n\t\tbtn_home.grid(row = 1, column = 0, sticky = 'NSWE', pady = (20, 0))\n\n\t\tbtn_cls_set_get = tk.Button(wb, text = 'Classe, set + get', command = partial(self.crea_classe_set_get, wp, True ))\n\t\tbtn_cls_set_get.grid(row = 2, column = 0, pady = (20, 0), sticky = 'NSWE')\t\n\t\t\n\t\tbtn_cls_set_get = tk.Button(wb, text = 'set + get', command = partial(self.crea_classe_set_get, wp, False ))\n\t\tbtn_cls_set_get.grid(row = 3, column = 0, pady = (20, 0), sticky = 'NSWE')\n\t\t\n\t\tbtn_pulisci = tk.Button(wb, text = 'PULISCI', command = self.pulisci_blocco)\n\t\tbtn_pulisci.grid(row = 4, column = 0, sticky = 'WE', pady = (20, 0))\n\t\t\n\t\tbtn_save = tk.Button(wb, text = 'SALVA', command = self.salva_progetto)\n\t\tbtn_save.grid(row = 6, column = 0, columnspan = 2, sticky = 'WE', pady = (20, 0))\n\t\t\n\t\tbtn_save = tk.Button(wb, text = 'CARICA', command = self.carica_progetto)\n\t\tbtn_save.grid(row = 5, column = 0, sticky = 'WE', pady = (20, 0))\n\t\t\n\t\tself.blocco_lavoro = tk.Text(wbl, width = 102, height = 45, tabs = (self.width_tab), bg = '#283136', fg = 'white', borderwidth = 0, insertbackground = 'white')\n\t\tself.blocco_lavoro.grid(row = 0, column = 1)\n\t\t\n\t\tself.blocco_lavoro.insert('1.0', self.save_code)\n\t\n\tdef crea_classe_set_get(self, fin, class_flag = False):\n\t\t#creo un popup per far inserire all'utente il metodo che vuole e graze alla tk.Toplevel()\n\t\t#vado a creare una finestra sueriore alla finestra principale\n\t\tpopup = tk.Toplevel(bg = self.sfondo)\n\t\tpopup.geometry('350x300')\n\t\tpopup.title('crea metodi')\n\t\t\n\t\t#creo il frame e grazie alla place() riesco a centrare il frames\n\t\tfp = tk.Frame(popup, bg = self.sfondo)\n\t\tfp.place(relx = 0.5, rely = 0.45, anchor = tk.CENTER)\n\t\t\n\t\t#piccolo controllo per vedere se l'utente ha schiacciato il bottone classe, set e get\n\t\t#oppure solo setter e getter + creazione widgets\n\t\tif class_flag == True:\n\t\t\tlabel_nm_cls = tk.Label(fp, text = 'Inserisci nome classe: ', bg = self.sfondo, fg = self.sfondo_scritta)\n\t\t\tlabel_nm_cls.grid(row = 0, column = 0, pady = (10, 0))\n\t\t\t\n\t\t\tself.input_nm_cls = tk.Entry(fp)\n\t\t\tself.input_nm_cls.grid(row = 0, column = 1, ipady = 8, ipadx = 10, pady = (10, 0))\n\t\t\n\t\tself.radio_private = tk.Radiobutton(fp, text = 'Privato: ', variable = self.variable_radio, value = 'Privato', bg = self.sfondo, activebackground = self.sfondo, fg = self.sfondo_scritta, activeforeground = self.sfondo_scritta, selectcolor=self.sfondo)\n\t\tself.radio_private.grid(row = 1, column = 0, pady = (10, 0))\n\t\t\n\t\tself.radio_public = tk.Radiobutton(fp, text = 'Pubblico: ', variable = self.variable_radio, value = 'Pubblico', bg = self.sfondo, activebackground = self.sfondo, fg = self.sfondo_scritta, activeforeground = self.sfondo_scritta, selectcolor=self.sfondo)\n\t\tself.radio_public.grid(row = 1, column = 1, pady = (10, 0))\n\t\t\n\t\tlabel_primo_attributo = tk.Label(fp, text = 'Nome primo attributo: ', bg = self.sfondo, fg = self.sfondo_scritta)\n\t\tlabel_primo_attributo.grid(row = 2, column = 0, pady = (10, 0))\n\t\t\n\t\tself.input_primo_attributo = tk.Entry(fp)\n\t\tself.input_primo_attributo.grid(row = 2, column = 1, ipady = 8, ipadx = 10, pady = (10, 0))\n\t\t\n\t\tlabel_secondo_attributo = tk.Label(fp, text = 'Nome secondo attributo: ', bg = self.sfondo, fg = self.sfondo_scritta)\n\t\tlabel_secondo_attributo.grid(row = 3, column = 0, pady = (10, 0))\n\t\t\n\t\tself.input_secondo_attributo = tk.Entry(fp)\n\t\tself.input_secondo_attributo.grid(row = 3, column = 1, ipady = 8, ipadx = 10, pady = (10, 0))\n\t\t\n\t\tbtn_aggiungi = tk.Button(fp, text = 'AGGIUNGI', command = partial(self.popup_aggiungi, class_flag))\n\t\tbtn_aggiungi.grid(row = 4, columnspan = 2, sticky = 'NSWE', pady = (10, 0))\n\t\t\n\t\t#valoredi default per i radio button\n\t\tself.variable_radio.set('Privato')\n\t\n\tdef popup_aggiungi(self, fc):\n\t\t#flag per il controllo errore delle entry per l'utente\n\t\tno_error = True\n\t\tatr1 = str(self.input_primo_attributo.get())\n\t\tatr2 = str(self.input_secondo_attributo.get())\n\t\tvalore_radio = str(self.variable_radio.get())\n\t\t\n\t\t#controllo se ha schiacciato il bottone con classe, set e get... \n\t\t#evitando di fare controlli inutili\n\t\tif fc == True:\n\t\t\tnm_cls = str(self.input_nm_cls.get())\n\t\t\t\n\t\t\tif nm_cls.isspace() or nm_cls.isnumeric() or nm_cls == '': \n\t\t\t\tmbox.showerror('Errore - nome classe', 'Il nome della classe ha una sintassi errata')\n\t\t\t\tno_error = False\n\t\t\n\t\tif atr1.isspace() or atr1.isnumeric() or atr1 == '' or atr2.isspace() or atr2.isnumeric() or atr2 == '':\n\t\t\tmbox.showerror('Errore - nome attributi', 'I nomi degli attrubuti hanno una sintassi errata')\n\t\t\tno_error = False\n\t\t\n\t\t#se non è presente alcun errore controllo se ha selezionato un radio\n\t\t#per la classe privata oppure pubblica\n\t\tif no_error == True:\n\t\t\tif valore_radio == 'Privato':\n\t\t\t\tnome_var1 = f'self.__V{atr1}'\n\t\t\t\tnome_var2 = f'self.__V{atr2}'\n\t\t\telse:\n\t\t\t\tnome_var1 = f'self.V{atr1}'\n\t\t\t\tnome_var2 = f'self.V{atr2}'\n\t\t\t\n\t\t\t#solito controllo per vedere se il codice che devo andare ad inserire dentro la\n\t\t\t#text ha schiacciato il bottone con classe + set e get o solo setter e getter\n\t\t\tif fc == True:\n\t\t\t\tcodice = f'''class {nm_cls}():\n\tdef __init__(self, {atr1}_ex, {atr2}_ex):\n\t\tself.set_{atr1}({atr1}_ex)\n\t\tself.set_{atr2}({atr2}_ex)\n\t\t\n\tdef set_{atr1}(self, {atr1}):\n\t\t{nome_var1} = {atr1}\n\t\n\tdef get_{atr1}(self):\n\t\treturn {nome_var1}\n\t\n\tdef set_{atr2}(self, {atr2}):\n\t\t{nome_var2} = {atr2}\n\t\n\tdef get_{atr2}(self):\n\t\treturn {nome_var2}\n\t\t\t\t\t\t'''\n\t\t\telse:\n\t\t\t\tcodice = f'''\tdef set_{atr1}(self, {atr1}):\n\t\t{nome_var1} = {atr1}\n\n\tdef get_{atr1}(self):\n\t\treturn {nome_var1}\n\n\tdef set_{atr2}(self, {atr2}):\n\t\t{nome_var2} = {atr2}\n\n\tdef get_{atr2}(self):\n\t\treturn {nome_var2}\n\t\t\t\t\t\t'''\n\t\t\t#ricavo l'indice in cui lampeggia il cursore del mouse e lo inserisco\n\t\t\t#all'intero della text in quella posizione\n\t\t\tindice = self.blocco_lavoro.index(tk.INSERT).split('.')[0]\n\t\t\tself.blocco_lavoro.insert(f'{indice}.0', codice)\n\t\n\tdef pulisci_blocco(self):\n\t\t#pulisco la text\n\t\tself.blocco_lavoro.delete('1.0', 'end')\n\t\n\tdef salva_progetto(self):\n\t\t'''\n\t\tgrazie al filedialog.asksaveasfilename() chiedo all'utente in che directory vuole salvare il progetto\n\t\te grazie al metodo initialdir gli inserisci la path principale in cui l'utente vuole andare a salvare\n\t\ti suoi futuri progetti, di default ha /home ed e modificabile nelle impostazioni. Proseguendo\n\t\tgrazie alla filetypes vado a definire all'interno di una tupla che tipo di file vuole salavare, in questo \n\t\tcaso .py\n\t\t'''\n\t\tcode = self.blocco_lavoro.get('1.0', 'end')\n\t\tpath_file = filedialog.asksaveasfilename(initialdir = self.path_predefinita, filetypes = [('python file', ('*.py'))])\n\t\t\n\t\t#qui semplicemente controllo se la path_file restituise True. Faccio una try per aprire il file\n\t\t#in modlità scrittura, inserisco il codice e chiudo il file, in caso contrario visualizzo\n\t\t#un errore\n\t\tif path_file:\n\t\t\ttry:\n\t\t\t\tfile_py = open(path_file,'w')\n\t\t\t\tfile_py.write(code)\n\t\t\t\tfile_py.close()\n\t\t\texcept IOError:\n\t\t\t\tmbox.showwarning('Errore', 'È stato rilevato un errore nel salvare il file')\n\t\n\tdef carica_progetto(self):\n\t\t'''\n\t\tgrazie al filedialog.askopenfilename() chiedo all'utente in che directory vuole aprire il progetto\n\t\te grazie al metodo initialdir gli inserisci la path principale in cui l'utente vuole andare a visualizzare\n\t\ti suoi futuri progetti, di default ha /home ed e modificabile nelle impostazioni. Proseguendo\n\t\tgrazie alla filetypes vado a definire all'interno di una tupla che tipo di file vuole salavare, in questo \n\t\tcaso .py\n\t\t'''\n\t\tpath_file = filedialog.askopenfilename(initialdir = self.path_predefinita, filetypes=[('Python File', ('*.py'))])\n\t\t\n\t\t#qui semplicemente controllo se la path_file restituise True. Faccio una try per aprire il file\n\t\t#in modlità letturo, prendo il codice e chiudo il file, in caso contrario visualizzo\n\t\t#un errore, impossibile aprire file.\n\t\tif path_file:\n\t\t\ttry:\n\t\t\t\tfile_py = open(path_file,'r')\n\t\t\t\tres = file_py.read()\n\t\t\t\tfile_py.close()\n\t\t\t\t\n\t\t\t\tself.blocco_lavoro.delete('1.0', 'end')\n\t\t\t\tself.blocco_lavoro.insert(f'1.0', res)\n\t\t\t\t\n\t\t\texcept IOError:\n\t\t\t\tmbox.showwarning('Errore', 'È stato rilevato un errore nel caricare il file')\n\t\t\t\n#funzione principale per richiamare la mia classe\t\ndef main():\n\tep = Edipy()\n\tep.mainloop()\n\nmain()\n\t\n"],
				"prestetazione": "https://lucx-albx.github.io/Filedialog_guida/index.html"
			}
		]
	},
	
	{
	"keyword": ["bind", "bind()", "la bind()", "la bind", "metodo bind", "eventi"],
	"nome": "Paseri Kevin",
	"parte":[
			{
				"titolo": "Il metodo bind",
				"corpo": "La <strong>bind()</strong> è un metodo che permette di associare a un widget qualunque il gestore di un evento. Assomiglia alla <strong>command</strong> del tk.Button per attivare il metodo associato in seguito al click del mouse, ma attraverso questo metodo potremmo anche gestire i tasti della tastiera, oltre ovviamente al mouse.",
				"code": ["Inserisci il codice di esempio", "Inserisci un eventuale 2° codice (in caso di altri aggiungerne)"],
				"prestetazione": "https://www.canva.com/design/DAFf5hzHtWk/s3-afKyTM_wJCJK62HGawQ/view?website#2:titolo"
			}
		]
	},
	
	{
	"keyword": ["radiobutton", "Radiobutton", "radio", "il radiobutton", "selezionare", "pallino rotondo"],
	"nome": "Culasso Edoardo",
	"parte":[
			{
				"titolo": "Il Radiobutton",
				"corpo": "Il <strong>Radiobutton</strong> è un <strong>widget della tkinter</strong> che ti permette di <strong>selezionare</strong> una cosa di un gruppo di oggetti, e per utilizzarlo non serve importare cose tranne la tkinter e si crea così: <strong>tk.Radiobutton.</strong>",
				"code": ["Inserisci il codice di esempio", "Inserisci un eventuale 2° codice (in caso di altri aggiungerne)"],
				"prestetazione": "https://www.canva.com/design/DAFjv-fRzZ8/1zKCOF67tyU0zaMZ1_LeVg/view?website#2:il-radiobutton"
			}
		]
	}
]
