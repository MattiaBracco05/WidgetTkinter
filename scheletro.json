[{
	keyword: ["listbox", "lista", "scroll", "scorrimento"]
	nome: "Bracco Mattia",
	parte:[
		titolo: "Listbox",
		corpo: "Attraverso una listbox l’utente può visualizzare una tendina contenente diverse opzioni fra le quali può effettuare delle selezioni.",
		code: ["#4C Bracco Mattia - TKINTER Widget listbox

import tkinter
from tkinter import ttk
from tkinter import messagebox as mbox

mioFont = ("Arial, 16")

#------------------------------------------------------------------------------------------------------------------------------------
class Finestra(tkinter.Tk):
	#Costruttore
	def __init__(self, nome):
		super().__init__()
		self.title(nome)
		self.geometry("660x1000")
		self.resizable(0, 0)
		self.crea_widgets()
	
	#CREA WIDGETS
	def crea_widgets(self):
		mf = tkinter.Frame(self) #Creo l'oggetto Main Frame (contenitore principale), ci deve sempre essere e contine i widget
		mf.grid() #Definisco il layout del Main Frame (in questo caso "grid")
		
		#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		#LABEL SELECTMODE
		lblSelectmode = tkinter.Label(mf, text="OPZIONI PER SELECTMODE")
		lblSelectmode.grid(row=0, column=0, columnspan=4, sticky=tkinter.EW)
		
		#LISTBOX ACCESSORI (selectmode = browse)
		#Label
		lblBrowse = tkinter.Label(mf, text="BROWSE", bg="blue")
		lblBrowse.grid(row=1, column=0, sticky=tkinter.EW)
		#Listbox
		accessori = ('Pasta', 'Bistecca', 'Carne', 'Pesce', 'Patatine', 'Verdura', 'Contorno', 'Dolce')
		varAccessori = tkinter.Variable(value = accessori)
		listAccessori = tkinter.Listbox(mf, listvariable=varAccessori, height=5, selectmode=tkinter.BROWSE)
		listAccessori.grid(row=2, column=0)
		
		#LISTBOX CIBI (selectmode = extend)
		#Label
		lblBrowse = tkinter.Label(mf, text="EXTENDED", bg="yellow")
		lblBrowse.grid(row=1, column=1, sticky=tkinter.EW)
		#Listbox
		cibi = ('Pasta', 'Bistecca', 'Carne', 'Pesce', 'Patatine', 'Verdura', 'Contorno', 'Dolce')
		varCibi = tkinter.Variable(value = cibi)
		listCibi = tkinter.Listbox(mf, listvariable=varCibi, height=5, selectmode=tkinter.EXTENDED)
		listCibi.grid(row=2, column=1)
		
		#LISTBOX AUTO (selectmode = single)
		#Label
		lblBrowse = tkinter.Label(mf, text="SINGLE", bg="green")
		lblBrowse.grid(row=1, column=2, sticky=tkinter.EW)
		#Listbox
		auto = ('Alfa Romeo', 'Fiat', 'Ford', 'Ferrari', 'Lamborgini', 'Maserati', 'Audi', 'Mercedes', 'BMW', 'Lancia', 'Volvo', 'Seat', 'Kia')
		varAuto = tkinter.Variable(value = auto)
		listAuto = tkinter.Listbox(mf, listvariable=varAuto, height=5, selectmode=tkinter.SINGLE)
		listAuto.grid(row=2, column=2)
		
		#LISTBOX COLORI (selectmode = multiple)
		#Label
		lblBrowse = tkinter.Label(mf, text="MULTIPLE", bg="gray")
		lblBrowse.grid(row=1, column=3, sticky=tkinter.EW)
		#Listbox
		colori = ('Giallo', 'Azzurro', 'Blu', 'Verde', 'Marrone', 'Nero', 'Giallo', 'Mercedes', 'BMW', 'Lancia', 'Volvo', 'Seat', 'Kia')
		varColori = tkinter.Variable(value = colori)
		listColori = tkinter.Listbox(mf, listvariable=varColori, height=5, selectmode=tkinter.MULTIPLE)
		listColori.grid(row=2, column=3)
	
		#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		#LABEL SCROLLBAR
		lblScrollbar = tkinter.Label(mf, text="SCROLLBAR")
		lblScrollbar.grid(row=3, column=0, columnspan=4, sticky=tkinter.EW)

		#Listbox
		linguaggi = ('C#', 'C', 'C++', 'Python', 'Go', 'PHP', 'Swift', 'HTML', 'CSS', 'JSON', 'XML', 'JavaScript', 'Java')
		varLinguaggi = tkinter.Variable(value = linguaggi)
		listLinguaggi = tkinter.Listbox(mf, listvariable=varLinguaggi, height=8, selectmode=tkinter.BROWSE)
		listLinguaggi.grid(row=4, column=0)
		#Scrollbar
		scrollbar = ttk.Scrollbar(mf, orient=tkinter.VERTICAL, command=listLinguaggi.yview)
		listLinguaggi['yscrollcommand'] = scrollbar.set
		scrollbar.grid(row=4, column=1, sticky=tkinter.NS)
		
		#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		#LABEL OPERAZIONI
		lblOperazioni = tkinter.Label(mf, text="OPERAZIONI SULLE LISTE (Vedere codice)")
		lblOperazioni.grid(row=5, column=0, columnspan=4, sticky=tkinter.EW)
		
		#Listbox di partenza
		nomi = ('Alessio', 'Francesco', 'Pietro', 'Paolo', 'Giuseppe', 'Gabriele', 'Edoardo', 'Leonardo', 'Davide')
		varNomi = tkinter.Variable(value = nomi)
		listNomi = tkinter.Listbox(mf, listvariable=varNomi, height=8, selectmode=tkinter.BROWSE)
		listNomi.grid(row=6, column=0)
		#Inserisco un nome in posizione 0 ("Mattia")
		listNomi.insert(0, "Mattia")
		#Elimino il nome nella posizione 2 ("Francesco")
		listNomi.delete(2)
		
		#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		#LABEL SELEZIONE
		lblSelezione = tkinter.Label(mf, text="VALORE SELEZIONATO")
		lblSelezione.grid(row=7, column=0, columnspan=4, sticky=tkinter.EW)

		#Listbox
		sport = ('Calcio', 'Pallavolo', 'Basket', 'Rugby', 'Tennis', 'Nuoto', 'Padel', 'Atletica')
		varSport = tkinter.Variable(value = sport)
		self.listSport = tkinter.Listbox(mf, listvariable=varSport, height=8, selectmode=tkinter.BROWSE)
		self.listSport.grid(row=8, column=0)
		#Button
		btnConferma = tkinter.Button(mf, text='CONFERMA', command=self.stampaSelezione, bg="lightgreen")
		btnConferma.grid(row=8, column=1)
		
		#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		#BUTTON ESCI
		btnEsci = tkinter.Button(mf, text="ESCI", command=self.destroy, bg="red")
		btnEsci.grid(row=9, column=0, columnspan=4, sticky=tkinter.EW)
		
	#STAMPA SELEZIONE
	def stampaSelezione(self):
		for i in self.listSport.curselection():
			print(self.listSport.get(i))
			mbox.showinfo("Selezione", self.listSport.get(i))
			
#------------------------------------------------------------------------------------------------------------------------------------
def main():
	f = Finestra('Widget Listbox')
	f.mainloop()
#------------------------------------------------------------------------------------------------------------------------------------
main()
"],
		prestetazione: "link della tua presentazione (canva) esportata in HTML"
	]}				
],




[{
	keyword: ["checkbutton", "check", "button", "photoimage", "selezione", "scelta", "pulsante", "click"]
	nome: "De Boni Simone",
	parte:[
		titolo: "Checkbutton",
		corpo: "I checkbutton sono utilizzati per visualizzare una serie di opzioni all'utente come pulsanti di commutazione. Grazie a questo widget, della Tkinter, l'utente può selezionare una o più opzioni facendo clic sul pulsante corrispondente a ciascuna opzione.",
		code: ["#Presentazione - Checkbutton 
#De Boni Simone

import tkinter
from tkinter import messagebox
from functools import partial
import webbrowser

class Finestra(tkinter.Tk):
    def __init__(self, nome):
        super().__init__()
        self.title("Presentazione Checkbutton, "+nome)
        self.geometry("500x700")
        self.resizable(1,1)
        self.crea_widgets()

    def crea_widgets(self):
        titolo=tkinter.Frame()
        titolo.grid()
        titolo.configure(bg="lightgrey",padx=38)

        tit=tkinter.Label(titolo, text="CHECKBUTTON E PARAMETRI", font=("Arial", 15, "bold"), fg="grey", bg="lightgrey", height=2)
        tit.grid(row=0, column=0, columnspan=3, rowspan=3)


        mf=tkinter.Frame()
        mf.grid()
        self.configure(bg="lightgrey", padx=60, pady=10)
        mf.configure(bg="grey")

        self.check_lista=[]

        for i in range(17):
            self.scelta = tkinter.IntVar()
            self.check_lista.append(self.scelta)
            
        B1=tkinter.Checkbutton(mf, text="1-activebackground", variable=self.check_lista[0], activebackground="grey")
        #Attiva lo sfondo quando si clicca sul botton.
        B1.grid(row=0, column=0, sticky="w", columnspan=3, padx=10, pady=10)

        B2=tkinter.Checkbutton(mf, text="2-activeforeground", variable=self.check_lista[1], activeforeground="grey")
        #Attiva il colore del testo quando si clicca sul button
        B2.grid(row=1, column=0, sticky="we", padx=10, pady=10)

        B3=tkinter.Checkbutton(mf, text="3-bg", variable=self.check_lista[2], bg="grey")
        #Colorazione dello sfondo attiva quando non si clicca sul button.
        B3.grid(row=2, column=0, sticky="we", padx=10, pady=10)

        B4=tkinter.Checkbutton(mf, bitmap="error", variable=self.check_lista[3])
        #Immagine di messaggio di errore al posto del testo, può cambiare in base ai parametri.
        B4.grid(row=3, column=0, sticky="we", padx=10, pady=10)

        B5=tkinter.Checkbutton(mf, text="5-bd", variable=self.check_lista[4], bd=10)
        #Margine attorno ad ogni lato del button, di default vale 2 pixel.
        B5.grid(row=4, column=0, sticky="we", padx=10, pady=10)

        B6=tkinter.Checkbutton(mf, text="6-command", variable=self.check_lista[5], command=mf.master.destroy)
        #Consente di attivare metodi e funzioni al click del bottone.
        B6.grid(row=5, column=0, sticky="we", padx=10, pady=10)

        B7=tkinter.Checkbutton(mf, text="7-cursor", variable=self.check_lista[6], cursor="dot")
        #Cambia la forma del cursore al di sopra di questo button.
        B7.grid(row=6, column=0, sticky="we", padx=10, pady=10)

        B8=tkinter.Checkbutton(mf, text="8-font", variable=self.check_lista[7], font=("Arial", 15))
        #Font del testo.
        B8.grid(row=8, column=0, sticky="we", padx=10, pady=10)

        B9=tkinter.Checkbutton(mf, text="9-fg", variable=self.check_lista[8], fg="grey")
        #Colore del testo.
        B9.grid(row=9, column=0, sticky="we", padx=10, pady=10)

        B10=tkinter.Checkbutton(mf, text="10-height", variable=self.check_lista[9], height=5)
        #Altezza del button.
        B10.grid(row=10, column=0, sticky="we", padx=10, pady=10)

        B11=tkinter.Checkbutton(mf, text="11-image", variable=self.check_lista[10], command=partial(self.creaImmagine, mf))
        #Immagini come dei button grazie agli oggetti photoimage.
        B11.grid(row=0, column=1, sticky="we", padx=10, pady=10)

        B12=tkinter.Checkbutton(mf, text="12-justify \n altra riga", anchor="e", variable=self.check_lista[11], justify=tkinter.CENTER)
        #Se il testo contiene più righe, questa opzione controlla la giustificazione del testo: CENTRO, SINISTRA o DESTRA.
        B12.grid(row=1, column=1,sticky="we", padx=10, pady=10)

        B13=tkinter.Checkbutton(mf, text="13-relief", variable=self.check_lista[12], relief=tkinter.GROOVE)
        #Con il valore predefinito, relief=FLAT, il checkbutton non si distingue dal suo sfondo. Puoi impostare più stili.
        B13.grid(row=2, column=1, sticky="we", padx=10, pady=10)

        B14=tkinter.Checkbutton(mf, text="14-selectcolor", variable=self.check_lista[13], selectcolor="grey")
        #Il colore del checkbutton quando è impostato. L'impostazione predefinita è selectcolor="rosso".
        B14.grid(row=3, column=1,sticky="we", padx=10, pady=10)

        B15=tkinter.Checkbutton(mf, text="15-state", variable=self.check_lista[14], state=tkinter.DISABLED)
        #è possibile utilizzare state=DISABLED per disattivare il controllo e renderlo non rispondente.
        B15.grid(row=4, column=1, sticky="we", padx=10, pady=10)

        B16=tkinter.Checkbutton(mf, text="16-underline", variable=self.check_lista[15], underline=4)
        #Si può sottolineare un carattere oppure tutto iò testo del button.
        B16.grid(row=5, column=1, sticky="we", padx=10, pady=10)

        B17=tkinter.Checkbutton(mf, text="17-wraplength", variable=self.check_lista[16], wraplength=5)
        #suddividi in più righe anche testi di solo una parola.
        B17.grid(row=6, column=1, sticky="we", rowspan=5, padx=10, pady=10)
        #All'interno dei Checkbutton abbiamo il mainFrame, dove inseriremo il nostro widget,
        #il testo da associare ai pulsanti e la variabile,
        #che sarà proprio questa che permetterà di poter selezionare uno o più opzioni, grazie al suo valore
        #di tipo intero, che può essere 0 o 1 (0 non selezionato, 1 selezionato). 

        butt=tkinter.Button(mf, text="VERIFICA", command=self.Dispensa)
        butt.grid(row=11, column=0, columnspan=3, ipadx=30, ipady=10)


    def creaImmagine(self, mf):
        self.acceso = tkinter.PhotoImage(width=48, height=24)
        self.spento = tkinter.PhotoImage(width=48, height=24)
        self.acceso.put(("green",), to=(0, 0, 23,23))
        self.spento.put(("red",), to=(24, 0, 47, 23))
        #Creo i due oggetti PhotoImage e successivamente imposterò loro la grandezza,
        #il colore che devono assumere, e la loro posizione.

        self.var1 = tkinter.IntVar(value=1)
        self.var2 = tkinter.IntVar()
        cb1 = tkinter.Checkbutton(mf, image=self.spento, selectimage=self.acceso, indicatoron=False, variable=self.var1)
        cb2 = tkinter.Checkbutton(mf, image=self.spento, selectimage=self.acceso, indicatoron=False, variable=self.var2)
        cb1.grid(row=0, column=2, padx=20, pady=10)
        cb2.grid(row=1, column=2, padx=20, pady=10)
        #Creo i due checkbutton e grazie alle opzioni image e selectimage posso gestire le immagini
        #che verranno mostrate sia quando il button è selezionato sia quando non lo è...
        #grazie poi all'opzione indicatoron impostata a false posso gestire io l'indicatore della tkinter
        #senza che usi quello predefinito.

    def Dispensa(self):
        if self.check_lista[0].get()==0 and self.check_lista[1].get()==0 and self.check_lista[2].get()==0 and self.check_lista[3].get()==0 and self.check_lista[4].get()==0 and self.check_lista[6].get()==0 and self.check_lista[7].get()==0 and self.check_lista[8].get()==0 and self.check_lista[9].get()==0 and self.check_lista[10].get()==0 and self.check_lista[11].get()==0 and self.check_lista[12].get()==0 and self.check_lista[13].get()==0 and self.check_lista[15].get()==0 and self.check_lista[16].get()==0:
            webbrowser.open_new("https://www.canva.com/design/DAFfxoltwcg/O_sJAmSX29-pS-1xUnrVkw/edit?utm_content=DAFfxoltwcg&utm_campaign=designshare&utm_medium=link2&utm_source=sharebutton")
        else:
            selezionati = [i+1 for i, self.scelta in enumerate(self.check_lista) if self.scelta.get() == 1]
            #creo una nuova lista SELEZIONATI dove all'interno salvo un valore, ovvero l'indice della lista CHECK_LISTA increementato di uno, che corrisponde a ogni
            #elemento di tipo int var che ha valore==1.
            messagebox.showinfo("Checkbutton selezionati", f"Sono stati selezionati i checkbutton numero: {selezionati}")
            #stampo la lista che contiene i valori.

            #la funzione enumerate() fornisce l'indice e il valore di ciascun elemento di una lista o tupla ecc...
def main():
    f=Finestra("De Boni")
    f.mainloop()

main()
        "],
		prestetazione: "https://www.canva.com/design/DAFfxoltwcg/O_sJAmSX29-pS-1xUnrVkw/edit?utm_content=DAFfxoltwcg&utm_campaign=designshare&utm_medium=link2&utm_source=sharebutton"
	]}				
],




[{
	keyword: ["Lista delle key word per filtrare il tuo widget"]
	nome: "inserire nome widget",
	parte:[
		titolo: "titolo della presentazione",
		corpo: "spiega brevemente in 5/10 righe a cosa serve il tuo widget",
		code: ["Inserisci il codice di esempio", "Inserisci un eventuale 2° codice (in caso di altri aggiungerne)"],
		prestetazione: "link della tua presentazione (canva) esportata in HTML"
	]}				
]
